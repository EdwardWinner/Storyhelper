using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using StoryHelperLibrary.Helpers;

namespace StoryHelper.Classes
{
    [JsonConverter(typeof(PropertyNameMatchingConverter))]
    public abstract class Being : Matter 
    {
        public Being()
            : base()
        {
            setClassConstants();
        }

        public bool age_readonly { get; set; }
        public bool height_readonly { get; set; }


        public Being(string name) : base(name) {
            setClassConstants();
        }

        public Being(string name, string spieces) : base(name) {
            this.Spieces = spieces;
            setClassConstants();
        }

        public Being(string name, int age) : base(name) {
            this.Age = age;
            setClassConstants();
        }

        public Being(string name, string spieces, int age) : base(name) {
            this.Spieces = spieces;
            this.Age = age;
            setClassConstants();
        }

        private string spieces = "";
        public string Spieces
        {
            get
            {
                //if (!this.spiecesGiven) throw new Exception("Species not set!");
                return spieces;
            }
            set
            {
                spieces = value;
                this.spiecesGiven = true;
            }
        }
        private bool spiecesGiven = false;

        public bool SpiecesGiven
        {
            get { return spiecesGiven; }
        }

        private int age = 0;
        public int Age
        {
            get { return age; }
            set {
                //if (age < 0) throw new Exception("Age cannot be less than zero!");
                
                age = value; 
            }
        }

        

        private string height = "";
        public string Height
        {
            get { return height; }
            set {
                
                height = value; 
            }
        }

        public override ActionParser getClone()
        {
            return this.deepCopy();
            //return (ActionParser)Newtonsoft.Json.JsonConvert.DeserializeObject<Being>(this.getJson());
        }

        public override ActionParser deepCopy()
        {
            ActionParser b = base.deepCopy();

            Matter c = copy(b as Matter);

            return c as ActionParser;
        }

        protected override Matter copy(Matter m)
        {
            Console.WriteLine(m.Name + " = Being accessed");
            Being c = m as Being;
            c.spieces = this.spieces;
            c.spiecesGiven = this.spiecesGiven;
            c.height = this.height;
            c.age = this.age;

            return base.copy(c);
        }

        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            base.GetObjectData(info, context);
            info.AddValue("Age", this.Age);
            if (!String.IsNullOrEmpty(this.Spieces)) info.AddValue("Spieces", this.Spieces);
            if (!String.IsNullOrEmpty(this.Height)) info.AddValue("Height", this.Height);
        }

        //Deserialization constructor.
        public Being(SerializationInfo info, StreamingContext ctxt)
            : base(info, ctxt)
        {
            //Get the values from info and assign them to the appropriate properties
            try{ this.Age = (int)info.GetValue("Age", typeof(int)); } catch (Exception) { }
            try { this.Spieces = (string)info.GetValue("Spieces", typeof(string)); } catch (Exception) { }
            try { this.Height = (string)info.GetValue("Height", typeof(string)); }
            catch (Exception) { }

        }

        public override int CompareTo(object obj)
        {
            return base.CompareTo(obj);
        }

        protected abstract void setClassConstants();

        protected override void setDelegates()
        {
            base.setDelegates();
            addDelegate("AGE", "", null, (x, y) => { return this.Age.ToString(); });
            addDelegate("AGE-N", "", null, (x, y) => { return this.Age.ToString(); });
            addDelegate("AGE-W", "", null, (x, y) => { return this.getAgeInWordForm().Trim(); });
            addDelegate("AGE-WH", "", null, (x, y) => { return this.getAgeInWordForm().Trim().Replace(' ', '-'); });
            addDelegate("TYPE", "", null, (x, y) => { 
                return this.Spieces; 
            });
            addDelegate("HE", "", null, (x, y) => { return this.Height; });
        }

        public override string interpret(string code, int tense)
        {

            return base.interpret(code, tense);

            
            switch (code.ToUpper())
            {
                case "AGE":
                    return this.Age.ToString();
                case "AGE-N":
                    return this.Age.ToString();
                case "AGE-W":
                    return this.getAgeInWordForm().Trim();
                case "AGE-WH":
                    return this.getAgeInWordForm().Trim().Replace(' ', '-');
                case "TYPE":
                    return this.Spieces;
                case "HE":
                    return this.Height;
                default:
                    return base.interpret(code, tense);
            }


        }

        public override Dictionary<string, string> help()
        {
            Dictionary<string, string> d = base.help();
            d.Add("AGE","Gets the age in number form.");
            d.Add("AGE-N", "Gets the age in number form.");
            d.Add("AGE-W", "Gets the age in word form.");
            d.Add("AGE-WH", "Gets the age in word form seperated by hyphens.");
            d.Add("SP", "Gets the type of species this being is.");
            d.Add("HE", "Gets the height.");
            return d;
        }

        public override void selfRegisterAll()
        {
            base.selfRegisterAll();

        }

        #region AGE METHODS
        private string getAgeInWordForm()
        {

            char[] ageChar = this.Age.ToString().ToCharArray();
            int[] age = new int[ageChar.Length];

            for(int x =  0; x < ageChar.Length; x++)
            {
                age[x] = int.Parse(ageChar[x].ToString());
            }
            
            switch (ageChar.Length)
            {
                case 0:
                    return "a few months";
                case 1:
                    return this.getSingleDigit(this.Age);
                case 2:
                    return this.getSecondsDigit(age[0], age[1]);
                case 3:
                    return this.getThreeDigit(age[0], age[1], age[2]);
                case 4:
                    return getFourDigit(age);
                case 5:
                    return getFiveDigit(age);
                case 6:
                    return getSixDigit(age);
                case 7:
                    return getSevenDigits(age);
                case 8:
                    return getEightDigits(age);
                case 9:
                    return getNineDigits(age);
            }

            return "no age";

        }

        private string getSingleDigit(int value) {

            switch (value)
            {
                case 1:
                    return "one";
                case 2:
                    return "two";
                case 3:
                    return "three";
                case 4:
                    return "four";
                case 5:
                    return "five";
                case 6:
                    return "six";
                case 7:
                    return "seven";
                case 8:
                    return "eight";
                case 9:
                    return "nine";
                default:
                    return "";
            }
            
        }

        private string getTeensDigit(int value)
        {

            switch (value)
            {
                case 1:
                    return "eleven";
                case 2:
                    return "twelve";
                case 3:
                    return "thirteen";
                case 4:
                    return "fourteen";
                case 5:
                    return "fifteen";
                case 6:
                    return "sixteen";
                case 7:
                    return "seventeen";
                case 8:
                    return "eighteen";
                case 9:
                    return "ninteen";
                default:
                    return "ten";
            }

        }

        private string getSecondsDigit(int second, int firstPlaceDigit)
        {
            switch (second)
            {
                case 1:
                    return getTeensDigit(firstPlaceDigit);
                case 2:
                    return "twenty " + getSingleDigit(firstPlaceDigit);
                case 3:
                    return "thirty " + getSingleDigit(firstPlaceDigit);
                case 4:
                    return "fourty " + getSingleDigit(firstPlaceDigit);
                case 5:
                    return "fifty " + getSingleDigit(firstPlaceDigit);
                case 6:
                    return "sixty " + getSingleDigit(firstPlaceDigit);
                case 7:
                    return "seventy " + getSingleDigit(firstPlaceDigit);
                case 8:
                    return "eighty " + getSingleDigit(firstPlaceDigit);
                case 9:
                    return "ninety " + getSingleDigit(firstPlaceDigit);
                default:
                    return getSingleDigit(firstPlaceDigit);
            }
        }

        private string getThreeDigit(int hundredth, int tenth, int first )
        {
            return (((hundredth != 0) ? getSingleDigit(hundredth) + " hundred " : "") + getSecondsDigit(tenth, first)).Trim();
        }

        private string getFourDigit(int[] age)
        {
            return (((age[age.Length - 4] != 0) ? getSingleDigit(age[age.Length - 4]) + " thousand " : "") + getThreeDigit(age[age.Length - 3], age[age.Length - 2], age[age.Length - 1])).Trim();
        }

        private string getFiveDigit(int[] age)
        {
            return ((age[age.Length - 5] != 0) ? getSecondsDigit(age[age.Length - 5], age[age.Length - 4]) : getSingleDigit(age[age.Length - 4])) + " thousand " + getThreeDigit(age[age.Length - 3], age[age.Length - 2], age[age.Length - 1]).Trim();
        }

        private string getSixDigit(int[] age)
        {
            return ((age[age.Length - 6] != 0) ? getThreeDigit(age[age.Length - 6], age[age.Length - 5], age[age.Length - 4]) : getSecondsDigit(age[age.Length - 5], age[age.Length - 4])) + " thousand " + getThreeDigit(age[age.Length - 3], age[age.Length - 2], age[age.Length - 1]).Trim();
        }

        private string getSevenDigits(int[] age)
        {
            return ((age[age.Length - 7] != 0) ? getSingleDigit(age[age.Length - 7]) + " million " : "") + getSixDigit(age).Trim();
        }

        private string getEightDigits(int[] age)
        {
            return ((age[age.Length - 8] != 0) ? getSecondsDigit(age[age.Length - 8], age[age.Length - 7]) : getSingleDigit(age[age.Length - 7])) + " million " + getSixDigit(age).Trim();
        }

        private string getNineDigits(int[] age)
        {
            return ((age[age.Length - 9] != 0) ? getThreeDigit(age[age.Length - 9], age[age.Length - 8], age[age.Length - 7]) : getSecondsDigit(age[age.Length - 8], age[age.Length - 7])) + " million " + getSixDigit(age).Trim();
        }

        public override DBbase getDBObejct(DBbase o)
        {
            return base.getDBObejct(o);
        }

        public override void setFromDBObject(DBbase o)
        {
            base.setFromDBObject(o);
        }

        #endregion

    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using StoryHelperLibrary.Helpers;

namespace StoryHelper.Classes
{
    [JsonConverter(typeof(PropertyNameMatchingConverter))]
    public class Character : JSerializable<Character>, IComparable, DBActionable
    {
        public int Id { get; set; } = 0;
        public int OwnerId { get; set; } = 0;
        public int Age { get; set; } = 0;
        public int Weight { get; set; } = 0;
        public string Height { get; set; } = "";
        public string Colour { get; set; } = "";
        public string Size { get; set; } = "";
        public bool HasVagina { get; set; } = true;
        public bool IsImportant { get; set; } = true;
        public bool IsAnIt { get; set; } = false;
        public bool IsMany { get; set; } = false;
        public int Perspective { get; set; } = 3;
        public string Pronouns { get; set; } = Classes.Pronouns.getStringFromPronoun(Classes.Pronouns.Pronoun.Female);

        public int LinkedCharacterId { get; set; } = 0;
        public string LinkedCharacterName { get; set; } = "";
        public string _scriptId = "";
        public string _firstName = "";
        public string _middleName = "";
        public string _familyName = "";
        public string _descrption = "";

        public string ScriptId
        {
            get
            {
                if (String.IsNullOrWhiteSpace(this._scriptId)) return "";
                if (this._scriptId == Human.defaultScriptId) return "";
                return this._scriptId;
            }
            set
            {
                this._scriptId = value;
            }
        }
        public string FirstName 
        {
            get
            {
                if (String.IsNullOrWhiteSpace(this._firstName)) return "";
                if (this._firstName == Human.defaultFirstName) return "";
                return this._firstName;
            }
            set
            {
                this._firstName = value;
            }
        }
        public string MiddleName
        {
            get
            {
                if (String.IsNullOrWhiteSpace(this._middleName)) return "";
                if (this._middleName == Human.defaultMiddleName) return "";
                return this._middleName;
            }
            set
            {
                this._middleName = value;
            }
        }
        public string FamilyName
        {
            get
            {
                if (String.IsNullOrWhiteSpace(this._familyName)) return "";
                if (this._familyName == Human.defaultLastName) return "";
                return this._familyName;
            }
            set
            {
                this._familyName = value;
            }
        }
        public string Descrption
        {
            get
            {
                if (String.IsNullOrWhiteSpace(this._descrption)) return "";
                return this._descrption;
            }
            set
            {
                this._descrption = value;
            }
        }
        

        public Character()
        {
            Id = -1;
            OwnerId = -1;
            Age = 18;
            ScriptId = "";
            FirstName = "";
            MiddleName = "";
            FamilyName = "";
            HasVagina = true;
            Descrption = "";
            this.LinkedCharacterId = 0;
            IsImportant = true;
        }

        public Character(int userId) : this()
        {
            this.OwnerId = userId;
        }

        public Character(int userId, string scriptId)
            : this(userId)
        {
            this.ScriptId = scriptId;
        }

        public Character(int userId, string scriptId, string firstName, string middleName, string familyName, bool hasVagina)
            : this(userId, scriptId)
        {
            this.FirstName = firstName;
            this.FamilyName = familyName;
            this.MiddleName = middleName;
            this.HasVagina = hasVagina;
        }

        public Character(int userId, string scriptId, string firstName, string middleName, string familyName, bool hasVagina, string description)
            : this(userId, scriptId, firstName, middleName, familyName, hasVagina)
        {
            this.Descrption = description;
        }

        public Character(Human human)
        {
            set(human);
        }

        public void set(Character character)
        {
            this.OwnerId = character.OwnerId;
            this.ScriptId = character.ScriptId;
            this.FirstName = character.FirstName;
            this.MiddleName = character.MiddleName;
            this.FamilyName = character.FamilyName;
            this.HasVagina = character.HasVagina;
            this.Colour = character.Colour;
            this.Age = character.Age;
            this.Height = character.Height;
            this.IsAnIt = character.IsAnIt;
            this.IsMany = character.IsMany;
            this.IsImportant = true;
            this.Weight = character.Weight;
            this.Size = character.Size;
            this.Perspective = character.Perspective;
            this.Pronouns = character.Pronouns;
        }

        public void set(Human human)
        {
            this.OwnerId = human.userId;
            this.ScriptId = human.getId();
            this.FirstName = human.FirstName;
            this.MiddleName = human.MiddleName;
            this.FamilyName = human.FamilyName;
            this.HasVagina = human.HasVagina;
            this.Colour = human.Colour;
            this.Age = human.Age;
            this.Height = human.Height;
            this.IsAnIt = human.IsAnIt;
            this.IsMany = human.IsMany;
            this.IsImportant = true;
            this.Weight = human.Weight;
            this.Size = human.Size;
            this.Perspective = human.Perspective;
            this.Pronouns = Classes.Pronouns.getStringFromPronoun(human.pronouns);
        }
        public static T ObjectFromJson<T>(string json) where T : Character
        {
            try
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<T>(json);
            }
            catch (Exception)
            {

                return null;
            }
        }

        public string getJson()
        {
            string muhString = Newtonsoft.Json.JsonConvert.SerializeObject(this);
            return muhString;
        }

        public Character getClone()
        {
            DBCharacters dbMatter = new DBCharacters();
            dbMatter = this.getDBObejct(dbMatter) as DBCharacters;
            Character h = new Character();
            h.setFromDBObject(dbMatter);

            return h;
        }

        //public Character(SerializationInfo info, StreamingContext ctxt)
        //{
        //    if(this.LinkedCharacterName.Equals(this.ScriptId))
        //    {
        //        this.LinkedCharacterName = "";
        //        this.LinkedCharacterId = 0;
        //    }
        //    try
        //    {
        //        this.FirstName = (string)info.GetValue("firstName", typeof(string));
        //    }
        //    catch (Exception)
        //    { }
        //    try
        //    {
        //        this.MiddleName = (string)info.GetValue("middleName", typeof(string));
        //    }
        //    catch (Exception)
        //    { }
        //    try
        //    {
        //        this.FamilyName = (string)info.GetValue("familyName", typeof(string));
        //    }
        //    catch (Exception)
        //    { }
        //    try
        //    {
        //        this.HasVagina = (bool)info.GetValue("hasVagina", typeof(bool));
        //    }
        //    catch (Exception)
        //    { }
        //    try
        //    {
        //        this.ScriptId = (string)info.GetValue("scriptId", typeof(string));
        //    }
        //    catch (Exception)
        //    { }
        //    try
        //    {
        //        this.Age = (int)info.GetValue("age", typeof(int));
        //    }
        //    catch (Exception)
        //    { }
        //    try
        //    {
        //        this.IsImportant = (bool)info.GetValue("is_important", typeof(bool));
        //    }
        //    catch (Exception)
        //    { }
        //    try
        //    {

        //        this.Size = (string)info.GetValue("size", typeof(string));
        //    }
        //    catch (Exception) { }
        //    try
        //    {
        //        this.Height = (string)info.GetValue("height", typeof(string));
        //    }
        //    catch (Exception) { }
        //    try
        //    {
        //        this.Weight = (int)info.GetValue("weight", typeof(int));
        //    }
        //    catch (Exception) { }
        //    try
        //    {
        //        this.IsAnIt = (bool)info.GetValue("isAnIt", typeof(bool));
        //    }
        //    catch (Exception) { }
        //    try
        //    {
        //        this.IsMany = (bool)info.GetValue("isMany", typeof(bool));
        //    }
        //    catch (Exception) { }
        //    try
        //    {
        //        this.Colour = (string)info.GetValue("colour", typeof(string));
        //    }
        //    catch (Exception) { }
        //    try
        //    {
        //        this.LinkedCharacterName = (string)info.GetValue("linkedCharacterName", typeof(string));
        //    }
        //    catch (Exception) { }
        //}

        //override void GetObjectData(SerializationInfo info, StreamingContext context)

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            if (!String.IsNullOrEmpty(this.FirstName)) info.AddValue("firstName", this.FirstName);
            if (!String.IsNullOrEmpty(this.MiddleName)) info.AddValue("middleName", this.MiddleName);
            if (!String.IsNullOrEmpty(this.FamilyName)) info.AddValue("familyName", this.FamilyName);
            if (!String.IsNullOrEmpty(this.ScriptId)) info.AddValue("scriptId", this.ScriptId);
            info.AddValue("is_important", this.IsImportant);
            info.AddValue("isMany", this.IsMany);
            info.AddValue("isAnIt", this.IsAnIt);
            info.AddValue("colour", this.Colour);
            info.AddValue("height", this.Height);
            info.AddValue("weight", this.Weight);
            info.AddValue("size", this.Size);
            info.AddValue("hasVagina", this.HasVagina);
            info.AddValue("age", this.Age);
            info.AddValue("linkedCharacterName", this.LinkedCharacterName);
            info.AddValue("Pronoun", this.Pronouns);

        }


        public int CompareTo(object obj)
        {
            if (obj == null)
                return -1;
            if (!(obj is Character))
                return -1;
            if (obj.Equals(this))
                return 0;

            //string formatter = "{0}, {1} {2}";
            //string thisObject = String.Format(formatter, this.FamilyName, this.FirstName, this.MiddleName);
            //string otherObject = String.Format(formatter, ((Human)obj).FamilyName, ((Human)obj).FirstName, ((Human)obj).MiddleName);

            string formatter = "{0}, {1} {2}";
            string thisObject = String.Format(formatter, this.FirstName, this.FamilyName, this.MiddleName);
            string otherObject = String.Format(formatter, ((Character)obj).FirstName, ((Character)obj).FamilyName, ((Character)obj).MiddleName);


            return thisObject.CompareTo(otherObject); ;
        }

        public DBbase getDBObejct(DBbase d)
        {
            DBCharacters c = new DBCharacters();
            
            //var c = new DBCharacters();
            c.scriptId = this.ScriptId;
            c.middleName = this.MiddleName;
            c.firstName = this.FirstName;
            c.familyName = this.FamilyName;
            c.colour = this.Colour;
            c.height = this.Height;
            c.weight = this.Weight;
            c.size = this.Size;
            c.hasVagina = this.HasVagina ? 1 : 0;
            c.id = this.Id;
            c.age = this.Age;
            c.ownerId = this.OwnerId;
            c.description = this.Descrption;
            c.is_important = this.IsImportant ? 1 : 0;
            c.isAnIt = this.IsAnIt ? 1 : 0;
            c.isMany = this.IsMany ? 1 : 0;
            // a linked character is a character that takes 2 or more forms. This is used to ensure POV consistancy. 
            // I.e. On character is set on 2nd person, and the same character but in the past will remain in 3rd if this system is not implemented.
            // It refers to the base character. Generally, the character should be loaded in the story, as the two characters co exist in the same story.
            // Intention: Fetch the pov of the reference character, and set it on this one.
            c.linkedCharacterId = this.LinkedCharacterId; 
            c.linkedCharacterName = this.LinkedCharacterName;
            c.Perspective = this.Perspective;
            c.Pronouns = this.Pronouns;
            return c;
        }

        public void setFromDBObject(DBbase d)
        {
            if (d is DBCharacters)
            {
                var c = d as DBCharacters;
                this.ScriptId = c.scriptId;
                this.OwnerId = c.ownerId;
                this.MiddleName = c.middleName;
                this.Id = c.id;
                this.Colour = c.colour;
                this.Weight = c.weight;
                this.Height = c.height;
                this.HasVagina = c.hasVagina == 1 ? true : false;
                this.FirstName = c.firstName;
                this.FamilyName = c.familyName;
                this.Descrption = c.description;
                this.Size = c.size;
                this.Age = c.age;
                this.IsImportant = c.is_important == 1 ? true : false;
                this.IsAnIt = c.isAnIt == 1 ? true : false;
                this.IsMany = c.isMany == 1 ? true : false;
                this.LinkedCharacterId = c.linkedCharacterId;
                this.LinkedCharacterName = c.linkedCharacterName;
                this.Perspective = c.Perspective;
                this.Pronouns = c.Pronouns;

            }
        }

        public override string ToString()
        {
            if (this.FirstName.Trim().ToLower().Equals(this.ScriptId.Trim().ToLower()))
                return this.FirstName;
            return this.FirstName + " (" + this.ScriptId + ")";
        }

        public override bool Equals(System.Object obj)
        {
            // If parameter is null return false.
            if (obj == null)
            {
                return false;
            }

            // If parameter cannot be cast to Point return false.
            Character p = obj as Character;
            if ((System.Object)p == null)
            {
                return false;
            }

            // check for reference equality.
            if (System.Object.ReferenceEquals(this, p)) return true;

            // Return true if the fields match:

            return (this.ScriptId.Equals(p.ScriptId, StringComparison.OrdinalIgnoreCase));
        }



        public void setId(long id)
        {
            this.Id = (int)id;
        }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using StoryHelperLibrary.Helpers;

namespace StoryHelper.Classes
{
    [JsonConverter(typeof(PropertyNameMatchingConverter))]
    public class Garment : Matter, StoryHelperLibrary.Interfaces.Mergable<Garment>
    {

        public bool fabricType_readonly { get; set; }
        public bool location_readonly { get; set; }
        public bool description_readonly { get; set; }


        private string fabricType = "";

        public string FabricType
        {
            get { return fabricType; }
            set { 
                fabricType = value;  }
        }

        private string location = "";

        public string Location
        {
            get { return location; }
            set { location = value; }
        }


        private ListDrawString garmentThat_ = new ListDrawString(100, false);

        public List<string> GarmentThat_
        {
            get { return garmentThat_; }
            set { 
                garmentThat_ = new ListDrawString(100, value); 
            }
        }

        public void addGarmentDescription(string desc)
        {
            this.GarmentThat_.Add(desc);
        }

        public void addGarmentDescription(string[] desc)
        {
            foreach (string str in desc)
            {
                this.GarmentThat_.Add(str);
            }
        }

        public string[] getGarmentsArray()
        {
            return getList(this.garmentThat_);
        }

        public Garment() : base() 
		{ 
			this.IsUsed = false;
		
		}

        public Garment(string name)
            : base(name)
        { }

        public Garment(string name, string fabricType)
            : base(name)
        {

            this.FabricType = fabricType;
        }

        public Garment(string name, string fabricType, string location)
            : this(name, fabricType)
        {
            this.Location = location;
        }

        public override ActionParser deepCopy()
        {
            Garment g = new Garment(this.Name);
            this.copy(g as Matter);
            return g as ActionParser;
        }

        protected override Matter copy(Matter m)
        {
            //Console.WriteLine(m.Name +  " = Garment accessed");
            Garment g = m as Garment;
            g.fabricType = this.fabricType;
            g.garmentThat_ = new ListDrawString(100, this.copyList(this.garmentThat_));
            g.location = this.location;
            return base.copy(g);
        }

        public override ActionParser getClone()
        {

            DBGarment dbMatter = new DBGarment();
            this.getDBObejct(dbMatter);
            Garment m = new Garment();
            m.setFromDBObject(dbMatter);
            return m;

            //return this.deepCopy();
            //return (ActionParser)Newtonsoft.Json.JsonConvert.DeserializeObject<Garment>(this.getJson());
        }

        public override void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            base.GetObjectData(info, context);
            if (!String.IsNullOrEmpty(this.Location)) info.AddValue("Location", this.Location);
            if (!String.IsNullOrEmpty(this.fabricType)) info.AddValue("FabricType", this.FabricType);
            if (this.GarmentThat_.Count > 0) info.AddValue("GarmentThat_", this.GarmentThat_);
            

            info.AddValue("location_readonly", this.location_readonly);
            info.AddValue("fabricType_readonly", this.fabricType_readonly);
            info.AddValue("description_readonly", this.description_readonly);

        }

        //Deserialization constructor.
        public Garment(SerializationInfo info, StreamingContext ctxt)
            : base(info, ctxt)
        {

            try
            {
                this.Location = (string)info.GetValue("Location", typeof(string));
            }
            catch (Exception)
            { }

            try
            {
                this.FabricType = (string)info.GetValue("FabricType", typeof(string));
            }
            catch (Exception)
            { }
            try
            {
                this.GarmentThat_ = (List<string>)info.GetValue("GarmentThat_", typeof(IList<string>));
            }
            catch (Exception)
            { }
            



            try
            {
                this.location_readonly = (bool)info.GetValue("location_readonly", typeof(bool));
            }
            catch (Exception)
            { }
            try
            {
                this.fabricType_readonly = (bool)info.GetValue("fabricType_readonly", typeof(bool));
            }
            catch (Exception)
            { }
            try
            {
                this.description_readonly = (bool)info.GetValue("description_readonly", typeof(bool));
            }
            catch (Exception)
            { }



        }

        protected override void setDelegates()
        {
            base.setDelegates();
            var d = getFreshParameterList();


            
            addDelegate("MY", "", null, (x, y) =>
            {
                if (this.Owner != null && this.Owner is Matter)
                    return (this.Owner as Matter).interpret("PA", tense);
                return this.interpret("PA", tense);
            });
            addDelegate("FAB", "", null, (x, y) => { return this.FabricType; });
            addDelegate("L", "", null, (x, y) => { return this.Location; });
            addDelegate("GT", "", null, (x, y) => { if (this.garmentThat_.ListCount() > 0) return this.garmentThat_.draw(); return ""; });
            addDelegate("GT-A", "", null, (x, y) =>
            {
                try
                {
                    return this.garmentThat_.draw();
                }
                catch (Exception ex)
                {

                }

                return "";

            });
            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("id", "The id of the garment to draw.", typeof(string)));
            addDelegate("GT-A", "", d, (x, y) => { 
                try{
                    return this.garmentThat_.draw(y[0]);
                }catch (Exception ex){

                }

                return "";
                
            });
            addDelegate("GT-F", "", null, (x, y) => { return this.garmentThat_.getAssociated(ListDrawString.DrawingStyle.ForcedSublist); });
            addDelegate("GT-L", "", null, (x, y) => { return this.garmentThat_.LastSelected; });
            addDelegate("FF", "", null, (x, y) => { return "that " + this.drawWho(); });
            addDelegate("FSP", "", null, (x, y) => { return "that " + this.drawWho(); });
            addDelegate("FOP", "", null, (x, y) => { return "that " + this.drawWho(); });
        }

        public override string interpret(string code, int tense)
        {
            return base.interpret(code, tense);
            //if (code.StartsWith("{") && code.EndsWith("}"))
            //{
            //    code = code.Remove(code.Length - 1, 1).Remove(0, 1);
            //}

            Regex regexCallListWithKey = new Regex(@"^GT\-A\(([a-z]|[A-Z]|\d)+\)$", RegexOptions.IgnoreCase);
            if (regexCallListWithKey.IsMatch(code.ToUpper()))
            {
                ListDrawString list = null;
                string theCode = code.ToUpper();
								
				if (code.StartsWith("GT")) list = this.garmentThat_;

				list = this.garmentThat_;
				
				
                string listCode = theCode.Remove(0, 5);
                listCode = listCode.Remove(listCode.Length - 1, 1);

                return list.draw(listCode);
            }


            Verb.Gender gender = Verb.Gender.it;
            string verb = Verb.getVerb(code, this.IsMany, 3, true, gender, tense);
            if (!String.IsNullOrWhiteSpace(verb)) return verb;


            switch (code.ToUpper())
            {
                case "FAB":
                    return this.FabricType;
                case "L":
                    return this.Location;
                case "GT":
                    if (this.garmentThat_.ListCount() > 0)
                        return this.garmentThat_.draw();
                    break;

                case "GT-A":
                    return this.garmentThat_.getAssociated();
                case "GT-F":
                    return this.garmentThat_.getAssociated(ListDrawString.DrawingStyle.ForcedSublist);
                case "GT-L":
                    return this.garmentThat_.LastSelected;

                case "PP":
                    return this.getPossesivePronoun();
                case "PPP":
                    return "the " + this.Name + "'s";
                case "SP":
                    return this.getSubjectPronoun();
                case "SPP":
                    return "the " + this.Name;
                case "OP":
                    return this.getObjectPronouns();
                case "OPP":
                    return "the " + this.Name;
                case "PAP":
                    return "the " + this.Name + "'s";


                
                case "MY":
                    if (this.Owner != null && this.Owner is Matter)
                        return (this.Owner as Matter).interpret("PA", tense);
                    return base.interpret(code, tense);
                
                


                case "THE":
                    return "the";

                case "FF": 
                    return "that " + this.drawWho();

                case "FSP": // stands for fact subject perspective
                    return "that " + this.drawWho();

                case "FOP": // stands for fact Object perspective
                    return "that " + this.drawWho();

                default:
                    return base.interpret(code, tense);
            }

            return base.interpret(code, tense);
        }


        public override Dictionary<string, string> help()
        {
            Dictionary<string, string> dic = base.help();
            dic.Add("F", "Gets the fabric type.");
            dic.Add("L", "Gets the location of the garment");
            dic.Add("GT", "Gets a random garment description.");
            dic.Add("PP", "Gets a personal possesive pronoun.");
            dic.Add("SP", "Gets a subject pronoun.");
            dic.Add("OP", "Gets an object pronoun.");
            dic.Add("PA", "Gets a possessive adjective pronoun.");
            dic.Add("RP", "Gets a reflexive pronoun.");


            return dic;
        }

        public override string ToString()
        {
            return base.ToString();
        }

        public override int CompareTo(object obj)
        {
            return base.CompareTo(obj);
        }


        public override DBbase getDBObejct(DBbase o)
        {
            DBGarment g = o as DBGarment;
            if (g == null) g = new DBGarment();
            g.description = String.Join("|", this.garmentThat_.getExpandedList().ToArray());
            g.location = this.location;
            g.fabricType = this.fabricType;

            g.description_readonly = this.description_readonly ? 1 : 0;
            g.fabricType_readonly = this.fabricType_readonly ? 1 : 0;
            g.isMany_readonly = this.isMany_readonly ? 1 : 0;
            g.location_readonly = this.location_readonly ? 1 : 0;
            g.name_readonly = this.name_readonly ? 1 : 0;
            g.scriptId = this.Id;

            return base.getDBObejct(g);
        }


        public override void setFromDBObject(DBbase o)
        {
            //base.setFromDBObject(o);
            //DBGarment g = o as DBGarment;

            DBGarment g = o as DBGarment;
            if (g == null) g = new DBGarment();
            base.setFromDBObject(g);

            this.location = g.location;
            this.fabricType = g.fabricType;
            ListDrawString.SetStringListFromCSV(garmentThat_, g.description);
            this.setId(g.scriptId);
            this.name_readonly = g.name_readonly == 1 ? true : false;

            this.description_readonly = g.description_readonly == 1 ? true : false;
            this.fabricType_readonly = g.fabricType_readonly == 1 ? true : false;
            this.isMany_readonly = g.isMany_readonly == 1 ? true : false;
            this.location_readonly = g.location_readonly == 1 ? true : false;

        }





        public override bool Equals(System.Object obj)
        {
            // If parameter is null return false.
            if (obj == null)
            {
                return false;
            }

            // If parameter cannot be cast to Point return false.
            Garment p = obj as Garment;
            if ((System.Object)p == null)
            {
                return false;
            }

            // check for reference equality.
            if (System.Object.ReferenceEquals(this, p)) return true;

            // Return true if the fields match:

            return this.Id.ToLower().Equals(p.Id.ToLower());
        }


        public void combine(Garment other)
        {
            if (other == null) return;
            foreach (var item in other.Adjectives) this.AddAdjective(item);
            foreach (var item in other.Adverbs) this.addAdverb(item);
            foreach (var item in other.Aliases) this.AddAlias(item);
            foreach (var item in other.States) this.addState(item);
            foreach (var item in other.Who) this.addWho(item);
            foreach (var item in other.GarmentThat_) this.addGarmentDescription(item);

            if (!String.IsNullOrWhiteSpace(other.Location))
            {
                this.Location = other.Location;
            }

            if (!String.IsNullOrWhiteSpace(other.Colour))
            {
                this.Colour = other.Colour;
            }

            if (!String.IsNullOrWhiteSpace(other.FabricType))
            {
                this.FabricType = other.FabricType;
            }
            if (!String.IsNullOrWhiteSpace(other.Size))
            {
                this.Size = other.Size;
            }

            
            
        }

        public void merge(Garment mergedTo, Garment migrant)
        {
            if (mergedTo == null || migrant == null) return;
            base.merge(mergedTo, migrant);

            // do it by reference
            //merge the lists
            mergedTo.addGarmentDescription(mergedTo.GarmentThat_.ToArray());

        }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using StoryHelperLibrary.Helpers;

namespace StoryHelper.Classes
{
    [JsonConverter(typeof(PropertyNameMatchingConverter))]
    public class Human : Being, StoryHelperLibrary.Interfaces.Mergable<Human>
    {
        public Human MainChar = null;
        private int _charactersId = -1;
        private int perspective = 3;
        public Human() : base()
        {
            setClassConstants();
        }

        public Human(string firstName, string familyName) : this()
        {
            this.FirstName = firstName;
            this.FamilyName = familyName;
            this.Age = 18;
        }

        public Human(string firstName, string middleName, string familyName) : this(firstName, familyName) {
            this.MiddleName = middleName;
            setClassConstants();
        }

        //Deserialization constructor.
        public Human(SerializationInfo info, StreamingContext ctxt)
            : base(info, ctxt)
        {

            try
            {
                this.Character = (Character)info.GetValue("Character", typeof(Character));
            }
            catch (Exception)
            { }

            //try
            //{
            //    this.UserModifiedCharacter = (UserCharacter)info.GetValue("UserCharacter", typeof(UserCharacter));
            //}
            //catch (Exception)
            //{ }
            //try
            //{
            //    List<Trait> list = new List<Trait>();
            //    list = (List<Trait>)info.GetValue("Traits", typeof(IList<Trait>));
            //    foreach (Trait t in list)
            //    {
            //        this.addTrait(t);
            //    }
            //}
            //catch (Exception)
            //{ }
            try
            {
                //this.Garments = (List<IRegistry<ActionParser>>)info.GetValue("Garments", typeof(IList<Garment>));

                List<Garment> list = new List<Garment>();
                list = (List<Garment>)info.GetValue("Garments", typeof(IList<Garment>));
                foreach (Garment t in list)
                {
                    this.addGarment(t);
                }
            }
            catch (Exception)
            { }
            try
            {
                List<string> x = (List<string>)info.GetValue("Scripts", typeof(IList<string>));
                foreach (string str in x)
                {
                    this.addScripts(str);
                }

            }
            catch (Exception) { }
        }

        public const string defaultFirstName = "New Name";
        public const string defaultLastName = "New Name";
        public const string defaultMiddleName = "New Name";
        public const string defaultSpecies = "human being";
        public const string defaultScriptId = "new";


        public bool hasVagina_readonly { get; set; } = false;
        public bool firstName_readonly { get; set; } = false;
        public bool middleName_readonly { get; set; } = false;
        public bool familyName_readonly { get; set; } = false;
        public bool perspective_readonly { get; set; } = false;
        public bool isAnIt_readonly { get; set; } = false;
        public bool scripts_readonly { get; set; } = false;
        public bool HasVagina { get; set; } = false;

        public int charactersId {
            get
            {
                if (this.Character != null) return this.Character.Id;
                return _charactersId;
            }
            set {
                this._charactersId = value;
            }
        }
        public bool isPov { get; set; } = false;
        
        //public bool MainCharacter
        //{
        //    // Idea: change this to boolean and give every character a reference to the main list of characters. 
        //    // Make sure that the list is never changed so that the characters do not lose the reference to the original list.
        //    //get
        //    //{
        //    //    return mainCharacter;
        //    //}
        //    //set
        //    //{
        //    //    this.mainCharacter = value;
        //    //    if (value != null && value.Equals(this)) isPov = true;

        //    //}

        //    get; set;
        //}

        private Character character = null;

        public Character Character
        {
            get { return character; }
            set
            {
                if (value != null)
                {

                    Character old = this.character;
                    this.character = value;
                    this.FamilyName = this.character.FamilyName;
                    this.FirstName = this.character.FirstName;
                    this.MiddleName = this.character.MiddleName;

                    if (!String.IsNullOrWhiteSpace(this.character.Colour)) this.Colour = this.character.Colour;
                    if (!String.IsNullOrWhiteSpace(this.character.Height)) this.Height = this.character.Height;
                    if (!String.IsNullOrWhiteSpace(this.character.Size)) this.Size = this.character.Size;
                    if (this.character.Weight != 0) this.Weight = this.character.Weight;
                    if (!String.IsNullOrWhiteSpace(this.character.Colour)) this.Colour = this.character.Colour;
                    if (!String.IsNullOrWhiteSpace(this.character.Height)) this.Height = this.character.Height;
                    this.IsAnIt = this.character.IsAnIt;
                    this.IsMany = this.character.IsMany;
                    this.HasVagina = this.character.HasVagina;
                    this.pronouns = new Pronouns(Pronouns.getPronounEnumFromString(this.character.Pronouns));
                    this.charactersId = this.character.Id;
                    this.Id = this.character.ScriptId;
                    this.Perspective = this.character.Perspective;
                    this.setAgeAndSpecies(this.character.Age);

                    this.FamilyName = this.character.FamilyName;
                    this.FirstName = this.character.FirstName;
                    this.MiddleName = this.character.MiddleName;

                    // Replace the defaults with an empty string, but only after setting the strings
                    if (String.IsNullOrWhiteSpace(this.familyName) || (this.familyName.Equals(Human.defaultLastName))) this.familyName = String.Empty;
                    if (String.IsNullOrWhiteSpace(this.firstName) || (this.firstName.Equals(Human.defaultFirstName))) this.firstName = String.Empty;
                    if (String.IsNullOrWhiteSpace(this.middleName) || (this.middleName.Equals(Human.defaultMiddleName))) this.middleName = String.Empty;



                    // Reset if read_only, but keep the pointer correct.
                    if (old != null)
                    {
                        if (this.familyName_readonly)
                        {
                            this.FamilyName = old.FamilyName;
                            this.Character.FamilyName = old.FamilyName;
                        }
                        if (this.firstName_readonly)
                        {
                            this.FirstName = old.FirstName;
                            this.Character.FirstName = old.FirstName;
                        }
                        if (this.middleName_readonly)
                        {
                            this.MiddleName = old.MiddleName;
                            this.Character.MiddleName = old.MiddleName;
                        }
                        if (this.age_readonly)
                        {
                            this.setAgeAndSpecies(old.Age);
                        }

                        if (this.colour_readonly)
                        {
                            this.character.Colour = old.Colour;
                            this.Colour = old.Colour;
                        }
                        if (this.hasVagina_readonly)
                        {
                            this.character.HasVagina = old.HasVagina;
                            this.HasVagina = old.HasVagina;
                        }
                        if (this.height_readonly)
                        {
                            this.character.Height = old.Height;
                            this.Height = old.Height;
                        }
                        if (this.isAnIt_readonly)
                        {
                            this.character.IsAnIt = old.IsAnIt;
                            this.IsAnIt = old.IsAnIt;
                        }
                        if (this.isMany_readonly)
                        {
                            this.character.IsMany = old.IsMany;
                            this.IsMany = old.IsMany;

                        }
                        if (this.perspective_readonly)
                        {
                            this.character.Perspective = old.Perspective;
                            this.Perspective = this.character.Perspective;
                        }
                        if (this.size_readonly)
                        {
                            this.character.Size = old.Size;
                            this.Size = old.Size;
                        }
                    }
                    

                } // end of != null
                
            }
        }

        //public void setPerspective(int perspective)
        //{
        //    this.perspective = perspective;
        //}

        //public int getPerspective()
        //{
        //    return this.perspective;

        //}

        //public UserCharacter getUserModifiedCharacter()
        //{
        //    return this._userCharacter;
        //}

        //public void setUserModifiedCharacter(UserCharacter uc)
        //{
        //    if (uc != null)
        //    {
        //        this._userCharacter = uc;

        //        this.pronouns = new Pronouns(uc.pronouns.selectedPronoun);
        //    }
        //}

        //public UserCharacter UserModifiedCharacter
        //{
        //    get {
        //        if (this._userCharacter != null)
        //        {
        //            this._userCharacter.colour = this.Colour;
        //            this._userCharacter.age = this.Age;
        //            this._userCharacter.isAnIt = this.IsAnIt;
        //            this._userCharacter.isMany = this.IsMany;
        //            //if (this.perspective != this._userCharacter.perspectiveId)
        //            //{
        //            //    this.perspective = this._userCharacter.perspectiveId;
        //            //}
        //            this._userCharacter.PerspectiveId = this.perspective;
        //            this._userCharacter.weight = this.Weight;
        //            this._userCharacter.height = this.Height;
        //            this._userCharacter.hasVagina = this.HasVagina;
        //            this._userCharacter.familyName = this.familyName;
        //            this._userCharacter.middleName = this.MiddleName;
        //            this._userCharacter.firstName = this.FirstName;
        //            return this._userCharacter;
        //        }
        //        else
        //        {
        //            this._userCharacter = new UserCharacter();
        //            this._userCharacter.colour = this.Colour;
        //            this._userCharacter.age = this.Age;
        //            this._userCharacter.isAnIt = this.IsAnIt;
        //            this._userCharacter.isMany = this.IsMany;
        //            this._userCharacter.PerspectiveId = this.perspective;
        //            this._userCharacter.weight = this.Weight;
        //            this._userCharacter.height = this.Height;
        //            this._userCharacter.hasVagina = this.HasVagina;
        //            this._userCharacter.familyName = this.familyName;
        //            this._userCharacter.middleName = this.MiddleName;
        //            this._userCharacter.firstName = this.FirstName;
        //            return this._userCharacter;
        //        }
        //    }
        //    set
        //    {
        //        if (value != null)
        //        {

        //            this._userCharacter = value;
        //            value.belongsTo = this;
        //            this.FirstName = value.firstName;
        //            this.MiddleName = value.middleName;
        //            this.familyName = value.familyName;
        //            this.HasVagina = value.hasVagina;
        //            this.Height = value.height;
        //            this.Weight = value.weight;
        //            this.perspective = value.PerspectiveId;
        //            this.IsMany = value.isMany;
        //            this.IsAnIt = value.isAnIt;
        //            this.Age = value.age;
        //            this.Colour = value.colour;

        //        }
        //    }
        //}



        

        private List<Registrable<ActionParser>> traits = new List<Registrable<ActionParser>>();
        public List<Trait> Traits
        {
            get
            {
                List<Trait> list = new List<Trait>();
                foreach (var item in this.traits)
                {
                    list.Add(item as Trait);
                }
                return list;
            }
            set
            {
                if (value == null) return;
                foreach (var item in value)
                {
                    this.addTrait(item);
                }
            }
        }




        

        public int Perspective
        {
            get {

                //if (this._userCharacter != null)
                //{
                //    this.perspective = this._userCharacter.PerspectiveId;
                //    return this._userCharacter.PerspectiveId;
                //}

                if (this.character == null) return this.perspective;
                return this.character.Perspective;

                //return this.perspective;

                //if (this.perspective > 0 && this.perspective < 4)
                //{
                //    this.perspective = this._userCharacter.perspectiveId;
                //    return this.perspective;
                //}

                //return 3;// Third person default for stories. 
            }
            set {

                if (value >= 3) perspective = 3;
                else if (value <= 1) perspective = 1;
                else perspective = value;

                if (this.character != null)
                {
                    this.character.Perspective = this.perspective;
                }

                

                //if (this._userCharacter != null)
                //{
                //    this._userCharacter.PerspectiveId = this.perspective;
                //}
            }
        }


        public bool IsAnIt
        {
            get;
            set;
        } = false;

        public void addTrait(Trait trait)
        {
            if (trait != null)
            {
                if (!this.traits.Contains(trait))
                {
                    this.traits.Add(trait as Registrable<ActionParser>);
                    this.register(trait.getId(), trait as ActionParser, this.registry);
                    this.traits.Sort();
                }

            }
        }

        public void mergeTrait(Trait trait)
        {
            if (trait != null)
            {
                if (!this.traits.Contains(trait))
                {
                    this.traits.Add(trait as Registrable<ActionParser>);
                    this.register(trait.getId(), trait as ActionParser, this.registry);
                    this.traits.Sort();
                }
                else
                {
                    Trait found = this.traits[this.traits.IndexOf(trait)] as Trait;
                    found.combine(trait);
                    this.traits.Sort();
                }

            }
        }

        public List<Registrable<ActionParser>> getTraitsList()
        {
            List<Registrable<ActionParser>> list = new List<Registrable<ActionParser>>();
            foreach (Registrable<ActionParser> t in this.traits)
            {
                list.Add(t);
            }

            return list;
        }

        public List<Trait> getTraitsAsTraitsList()
        {
            List<Trait> list = new List<Trait>();
            foreach (Registrable<ActionParser> t in this.traits)
            {
                list.Add(t as Trait);
            }

            return list;
        }

        public Dictionary<string, Registrable<ActionParser>> getTraitsAsTraitsDictionary()
        {
            Dictionary<string, Registrable<ActionParser>> dictionary = new Dictionary<string, Registrable<ActionParser>>();
            foreach (Registrable<ActionParser> t in this.traits)
            {
                dictionary.Add(t.getFullId(), t);
            }

            return dictionary;
        }

        public void clearTraits()
        {
            this.traits.Clear();
            this.registry.Clear();
            this.selfRegisterAll();
        }

        //public override void selfRegisterAll()
        //{

        //}

        public void removeTrait(string scriptId)
        {
            Trait trait = null;
            foreach (var t in this.getTraitsAsTraitsList())
            {
                if (t.getId().Equals(scriptId))
                {
                    trait = t;
                    break;
                }
            }

            if (trait != null)
            {
                this.removeTrait(trait);
            }
        }

        public bool removeTrait(Trait trait)
        {
            if (trait != null)
            {
                this.traits.Remove(trait as Registrable<ActionParser>);
                try
                {
                    this.registry.Remove(trait.getId());
                    return true;
                }
                catch (Exception)
                {

                    Console.WriteLine(trait.getName() + " does not exist in the registery.");
                    return true;
                }
            }
            return false;
        }

        private List<Registrable<ActionParser>> garments = new List<Registrable<ActionParser>>();

        public List<Garment> Garments
        {
            get
            {
                List<Garment> list = new List<Garment>();
                foreach (var item in this.garments)
                {
                    list.Add(item as Garment);
                }
                return list;
            }
            set
            {
                if (value == null) return;
                foreach (var item in value)
                {
                    this.addGarment(item);
                }
            }
        }

        public void addGarment(Garment garment)
        {
            if (garment != null)
            {
                if (!this.garments.Contains(garment))
                {
                    this.garments.Add(garment as Registrable<ActionParser>);
                    this.register(garment.getId(), garment as ActionParser, this.registry);
                    this.garments.Sort();
                }
            }
        }


        public void mergeGarment(Garment garment)
        {
            if (garment != null)
            {
                if (!this.garments.Contains(garment))
                {
                    this.garments.Add(garment as Registrable<ActionParser>);
                    this.register(garment.getId(), garment as ActionParser, this.registry);
                    this.garments.Sort();
                }
                else
                {
                    Garment found = this.garments[this.garments.IndexOf(garment)] as Garment;
                    found.combine(garment);
                    this.garments.Sort();
                }

            }
        }

        public List<Registrable<ActionParser>> getGarmentsList()
        {
            List<Registrable<ActionParser>> list = new List<Registrable<ActionParser>>();
            foreach (Registrable<ActionParser> t in this.garments)
            {
                list.Add(t);
            }

            return list;
        }

        public List<Garment> getGarmentsAsGarmentList()
        {
            List<Garment> list = new List<Garment>();
            foreach (Registrable<ActionParser> t in this.garments)
            {
                list.Add(t as Garment);
            }

            return list;
        }

        public void clearGarments()
        {
            this.garments.Clear();
            this.registry.Clear();
            this.selfRegisterAll();
        }

        public void removeGarment(Garment garment)
        {
            if (garment != null)
            {
                this.garments.Remove(garment as Registrable<ActionParser>);
                try
                {
                    this.registry.Remove(garment.getId());
                }
                catch (Exception)
                {
                    Console.WriteLine(garment.getName() + " does not exist in the registery.");
                }
            }
        }

        #region Scripts
        private ListDrawString scripts = new ListDrawString(100);
        public List<string> Scripts
        {
            get
            {
                //List<string> x = new List<string>();

                //foreach (string s in aliases)
                //{
                //    x.Add(s);
                //}
                //return x;
                this.scripts.replenish();
                return this.scripts;
            }
            set
            {

                scripts = new ListDrawString(100, value);
            }
        }
        public void addScripts(string scripts)
        {
            addStringToList(this.scripts, scripts);
        }
        public void addScripts(string[] scripts)
        {
            addStringsToList(this.scripts, scripts);
        }
        public string[] getScripts()
        {
            return getList(this.scripts);
        }

        #endregion

        private string firstName = Human.defaultFirstName;
        public string FirstName
        {
            get 
            {
                if (String.IsNullOrWhiteSpace(this.firstName)) this.firstName = "";
                if (this.firstName == Human.defaultFirstName) return "";
                return this.firstName; 
            }
            set {
                firstName = value;
                // Name is the property being set in nameChanged, and it's located in the Matter class, therefore justifying doing it here.
                nameChanged();
            }
        }
        private string middleName = Human.defaultMiddleName;
        public string MiddleName
        {
            get {
                if (String.IsNullOrWhiteSpace(this.middleName)) this.middleName = "";
                if (this.middleName == Human.defaultMiddleName) return "";
                return this.middleName;
            }
            set
            {
                //if (String.IsNullOrEmpty(value.Trim())) throw new Exception("Cannot have an empty MiddleName.");
                middleName = value;
                nameChanged();
            }
        }

        private string familyName = Human.defaultLastName;
        public string FamilyName
        {
            get 
            {
                if (String.IsNullOrWhiteSpace(this.familyName)) this.familyName = "";
                if (this.familyName == Human.defaultLastName) return "";
                return familyName; 
            }
            set
            {
                //if (String.IsNullOrEmpty(value.Trim())) throw new Exception("Cannot have an empty FamilyName.");
                familyName = value;
                nameChanged();
            }
        }
        public override ActionParser deepCopy()
        {
            Human h = new Human();
            this.copy(h);
            return h as ActionParser;
        }

        protected override Matter copy(Matter m)
        {
            //Console.WriteLine(m.Name + " = Human accessed");
            Human h = m as Human;
            h.familyName = this.familyName;
            h.firstName = this.firstName;
            h.middleName = this.middleName;
            h.HasVagina = this.HasVagina;
            h.perspective = this.perspective;
            h.IsAnIt = this.IsAnIt;
            h.IsMany = this.IsMany;
            h.Scripts = this.Scripts;

            foreach (Garment g in this.garments)
            {
                h.garments.Add(g.deepCopy() as Garment);
            }

            foreach (Trait t in this.traits)
            {
                h.traits.Add(t.deepCopy() as Trait);
            }

            return base.copy(h);

        }

        private void nameChanged()
        {
            this.Name = String.Format("{0} {1} {2}", this.FirstName, this.MiddleName, this.FamilyName);
        }

        public void setAgeAndSpecies(int age)
        {
            this.Age = age;
            if (String.IsNullOrWhiteSpace(this.Spieces) || (this.Spieces.ToLower().Equals("girl") || this.Spieces.ToLower().Equals("boy") || this.Spieces.ToLower().Equals("teenager") || this.Spieces.ToLower().Equals("man") || this.Spieces.ToLower().Equals("woman") || this.Spieces.ToLower().Equals(Human.defaultSpecies)))
            {
                if (this.HasVagina)
                {
                    if (age < 13)
                    {
                        this.Spieces = "girl";
                    }
                    else if (age >= 13 && age < 20)
                    {
                        this.Spieces = "teenager";
                    }
                    else if (age >= 20)
                    {
                        this.Spieces = "woman";
                    }
                }
                else
                {
                    if (age < 13)
                    {
                        this.Spieces = "boy";
                    }
                    else if (age >= 13 && age < 20)
                    {
                        this.Spieces = "teenager";
                    }
                    else if (age >= 20)
                    {
                        this.Spieces = "man";
                    }
                }
            }
        }

        public override ActionParser getClone()
        {

            DBHuman dbHuman = new DBHuman();
            //DBMatter dbMatter = new DBMatter();

            //dbMatter = base.getDBObejct(dbMatter) as DBMatter;

            dbHuman = this.getDBObejct(dbHuman) as DBHuman;
            Human h = new Human();
            h.setFromDBObject(dbHuman);

            //try
            //{
            //    h.UserModifiedCharacter = this.UserModifiedCharacter.getClone();
            //}
            //catch (Exception ex)
            //{

            //    //throw new Exception("The UserModifiedCharacter must be chosen.");
            //    h.setUserModifiedCharacter(new UserCharacter(this.userId, this.Character));
            //}

            try
            {
                h.Character = this.Character.getClone();

            }
            catch (Exception ex)
            {

                //throw new Exception("The base character must be chosen.");
                h.Character = new Character(this.userId, r.Next(int.MaxValue).ToString(), this.FirstName, this.MiddleName, this.FamilyName, this.HasVagina);

            }

            // must set attributes that the character clone overrides.
            h.setAgeAndSpecies(this.Age);
            h.Spieces = this.Spieces;
            h.Colour = this.Colour;
            h.Size = this.Size;
            h.Height = this.Height;
            h.Weight = this.Weight;

            foreach (Garment g in this.garments)
            {
                h.garments.Add(g.getClone() as Garment);
            }

            foreach (Trait t in this.traits)
            {
                h.traits.Add(t.getClone() as Trait);
            }

            h.isPov = this.isPov;
            h.setPronoun(this.pronouns.selectedPronoun);

            return h;
            //return this.deepCopy();
            //return (ActionParser)Newtonsoft.Json.JsonConvert.DeserializeObject<Human>(this.getJson());
        }

        public static Human ObjectFromJson(string json) {
            try
            {
                Human h = Newtonsoft.Json.JsonConvert.DeserializeObject<Human>(json);

                return h;

            }
            catch (Exception)
            {

                return null;
            }
        }

        public override void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            base.GetObjectData(info, context);
            if (!String.IsNullOrEmpty(this.FamilyName)) info.AddValue("FirstName", this.FirstName);
            if (!String.IsNullOrEmpty(this.MiddleName)) info.AddValue("MiddleName", this.MiddleName);
            if (!String.IsNullOrEmpty(this.FamilyName)) info.AddValue("FamilyName", this.FamilyName);

            if (this.Character != null) info.AddValue("Character", this.Character);
            //if (this.UserModifiedCharacter != null) info.AddValue("UserCharacter", this.UserModifiedCharacter);
            //else
            //{
            //    if(this.Character != null) this.setUserModifiedCharacter(new UserCharacter(-1, this.Character, this.pronouns));
            //}
            info.AddValue("charactersId", this.charactersId);

            info.AddValue("HasVagina", this.HasVagina);
            info.AddValue("Perspective", this.Perspective);
            info.AddValue("IsAnIt", this.IsAnIt);

            info.AddValue("hasVagina_readonly", this.hasVagina_readonly);
            info.AddValue("familyName_readonly", this.familyName_readonly);
            info.AddValue("firstName_readonly", this.firstName_readonly);
            info.AddValue("isAnIt_readonly", this.isAnIt_readonly);
            info.AddValue("isMany_readonly", this.isMany_readonly);
            info.AddValue("middleName_readonly", this.middleName_readonly);
            info.AddValue("perspective_readonly", this.perspective_readonly);
            info.AddValue("scripts_readonly", this.scripts_readonly);


            if (this.traits.Count > 0) info.AddValue("Traits", this.traits);

            if (this.garments.Count > 0) info.AddValue("Garments", this.garments);
            if (this.scripts.Count > 0) info.AddValue("Scripts", this.scripts);

        }

        public override int CompareTo(object obj)
        {
            if (obj == null)
                return -1;
            if (!(obj is Human))
                return -1;
            if (obj.Equals(this))
                return 0;

            //string formatter = "{0}, {1} {2}";
            //string thisObject = String.Format(formatter, this.FamilyName, this.FirstName, this.MiddleName);
            //string otherObject = String.Format(formatter, ((Human)obj).FamilyName, ((Human)obj).FirstName, ((Human)obj).MiddleName);

            string formatter = "{0}, {1} {2}";
            string thisObject = String.Format(formatter, this.FirstName, this.FamilyName, this.MiddleName);
            string otherObject = String.Format(formatter, ((Human)obj).FirstName, ((Human)obj).FamilyName, ((Human)obj).MiddleName);


            return thisObject.CompareTo(otherObject); ;
        }

        protected override void setClassConstants()
        {
            this.Spieces = "Human Being";
        }

        //protected override string tripleDollarSign(int adjectiveCount = 1)
        //{
        //    string adjectives = this.chainedDraws(adjectiveCount, Matter.multipleAdjectivesSeperator, this.adjectives , Matter.multipleAdjectivesFinalizer);
        //    if (String.IsNullOrWhiteSpace(adjectives)) return this.interpret("$", tense);
        //    string interpretedFailsafe = this.interpret("N", tense);
        //    return "the " + this.drawNoConflict(adjectives, this.aliases, tense, interpretedFailsafe);
        //}

        //protected override string tripleAtSign(int adjectiveCount = 1)
        //{
        //    string adjectives = this.chainedDraws(adjectiveCount, Matter.multipleAdjectivesSeperator, this.adjectives, Matter.multipleAdjectivesFinalizer);
        //    if (String.IsNullOrWhiteSpace(adjectives)) return this.interpret("@", tense);
        //    string interpretedFailsafe = this.interpret("N", tense);
        //    return "the " + this.drawNoConflict(adjectives, this.aliases, tense, interpretedFailsafe);
        //}


        protected override void setDelegates()
        {
            base.setDelegates();
            MethodPackage.Method method = delegate (string methodName, List<string> parameters)
            {
                return "";
            };
            var d = getFreshParameterList();


            addDelegate("SC", "", null, (x, y) => { return this.drawFromList(this.scripts, ""); });
            addDelegate("SC-N", "", null, (x, y) => { return this.drawFromList(this.scripts, "", linear: true); });
            addDelegate("SC-A", "", null, (x, y) => { return this.scripts.getAssociated(); });
            addDelegate("SC-F", "", null, (x, y) => { return this.scripts.getAssociated(ListDrawString.DrawingStyle.ForcedSublist); });
            addDelegate("SC-L", "", null, (x, y) => { return this.scripts.LastSelected; });

            addDelegate("FN", "", null, (x, y) => { return this.FirstName; });
            addDelegate("MN", "", null, (x, y) => { return this.MiddleName; });
            addDelegate("LN", "", null, (x, y) => { return this.FamilyName; });
            addDelegate("PP", "", null, (x, y) => { return this.getPossesivePronoun(); });
            addDelegate("PPP", "", null, (x, y) => {
                if (this.perspective == 3)
                {
                    if (this.firstName.EndsWith("s")) return this.firstName + "'";
                    return this.firstName + "'s";
                }
                else return this.getPossesivePronoun();

            });
            addDelegate("SP", "", null, (x, y) => { return this.getSubjectPronoun(); });
            addDelegate("SPP", "", null, (x, y) => {
                return (this.perspective == 3) ? this.firstName : this.getSubjectPronoun();
            });
            addDelegate("OP", "", null, (x, y) => { return this.getObjectPronouns(); });
            addDelegate("OPP", "", null, (x, y) => { return (this.perspective == 3) ? this.firstName : this.getObjectPronouns(); });
            addDelegate("PAP", "", null, (x, y) => {
                if (this.perspective == 3)
                {
                    if (this.firstName.EndsWith("s")) return this.firstName + "'";
                    return this.firstName + "'s";
                }
                else return this.getPossessiveAdjectives();
            });
            addDelegate("POV", "", null, (x, y) => { return this.perspective.ToString(); });

            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Codes", "A - insert Adjective, I - get Id, C - get Color, F - fabric", typeof(string)));
            addDelegate("RANDOMGARMENT", "", d, (x, y) => { return getRandomGarment(y[0]); });

            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Codes", "The letters of the operations to apply to the random draw. M for possessive, R for random between possessive and article, M-R-ID-A-S-K ", typeof(string)));
            d.Add(new MethodPackage.Parameter("GroupId", "The group id of the set of traits that will be subject to a random draw.", typeof(int)));
            addDelegate("RANDOMTRAIT", "Get a random trait given the groupid supplied.", d, (x, y) =>
            {
                return this.getRandomTrait(y[0], this.tense, MethodPackage.Parameter.getParameter(y[1]).getValue());
            });

            method = (x, y) =>
            {
                string theSex = "";
                if (this.IsAnIt) theSex = "thing";
                else if (this.HasVagina) theSex = "female";
                else theSex = "male";

                if (this.IsMany) theSex += "s";
                return theSex;
            };
            d = getFreshParameterList();
            addDelegate("SEXE", "Male, female, or thing", null, method);
            addDelegate("GENDER", "Male, female, or thing", null, method);
            addDelegate("CHILD", "Boy, Girl, thing", null, (x, y) =>
            {
                string child = "";
                if (this.IsAnIt) child = "thing";
                else if (this.HasVagina) child = "girl";
                else child = "boy";
                if (this.IsMany) child += "s";
                return child;
            });
            d = getFreshParameterList();
            addDelegate("ADULT", "Man, Woman, thing", null, (x, y) =>
            {
                string adult = "";
                if (this.IsAnIt)
                {
                    adult = "thing";
                    return adult;
                }
                else if (this.HasVagina) adult = "woman";
                else adult = "man";
                if (this.IsMany)
                {
                    if (this.HasVagina) adult = "women";
                    else adult = "men";
                }
                return adult;
            });
            d = getFreshParameterList();
            addDelegate("WE", "Returns a subjective pronoun that includes this human to at least one other person. Set this person at [me.other]", null, (x, y) =>
            {
                var other = this.getOther();
                Human many = null;
                if (other == null) return this.getSubjectPronoun();
                if (!(other is Human)) return this.getPossessiveAdjectives() + " " + other.getName();
                many = getMeAsMany();
                return many.getSubjectPronoun();
            });
            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("ID Code", "The code of the human object to use as 'other'", typeof(string)));
            addDelegate("WE", "Returns a subjective pronoun that includes this human to at least one other person. Set this person as parameter", d , (x, y) =>
            {
                var other = this.getOther();
                Human many = null;
                var param = MethodPackage.Parameter.getParameter(y[0]).getValue();
                if (!(String.IsNullOrWhiteSpace(param)))
                {
                    string result = 
                }
                if (other == null) return this.getSubjectPronoun();
                if (!(other is Human)) return this.getPossessiveAdjectives() + " " + other.getName();
                many = getMeAsMany();
                return many.getSubjectPronoun();
            });
            d = getFreshParameterList();
            addDelegate("US", "Returns an objective pronoun that includes this human to at least one other person. Set this person at [me.other]", null, (x, y) =>
            {
                var other = this.getOther();
                Human many = null;
                if (other == null) return this.getObjectPronouns();
                if (!(other is Human)) return this.getPossessiveAdjectives() + " " + other.getName();
                many = getMeAsMany();
                return many.getObjectPronouns();
            });
            d = getFreshParameterList();
            addDelegate("OUR", "", null, (x, y) =>
            {
                var other = this.getOther();
                Human many = null;
                if (other == null) return this.getPossessiveAdjectives();
                if (!(other is Human)) return this.getPossessiveAdjectives() + " " + other.getName();
                many = getMeAsMany();
                return many.getPossessiveAdjectives();
            });
            addDelegate("OURS", "", null, (x, y) =>
            {
                var other = this.getOther();
                Human many = null;
                if (other == null) return this.getPossesivePronoun();
                if (!(other is Human)) return this.getPossessiveAdjectives() + " " + other.getName();
                many = getMeAsMany();
                return many.getPossesivePronoun();
            });
            addDelegate("OURSELVES", "", null, (x, y) =>
            {
                var other = this.getOther();
                Human many = null;
                if (other == null) return this.getReflexivePronouns();
                if (!(other is Human)) return this.getPossessiveAdjectives() + " " + other.getName();
                many = getMeAsMany();
                return many.getReflexivePronouns();
            });
            addDelegate("DA", "", null, (x, y) =>
            {
                if (this.IsMany)
                    if (this.getPerspectiveAsMany() < 3)
                        return "these";
                    else
                        return "those";
                else
                {
                    int daPerspective = this.getPerspectiveAsMany();
                    if (daPerspective == 3)
                    {
                        return "that";
                    }
                    else if (daPerspective == 2)
                    {
                        return "that";
                    }
                    else if (daPerspective == 1)
                    {
                        return "this";
                    }

                }
                return "this";
            });
            addDelegate("DACLOSE", "", null, (x, y) => { return (this.IsMany) ? "these" : "this"; });
            addDelegate("DAFAR", "", null, (x, y) => { return (this.IsMany) ? "those" : "that"; });
            addDelegate("AOP", "", null, (x, y) => { return (this.perspective == 3) ? "there" : "here"; });
            addDelegate("AOPS", "", null, (x, y) => { return (this.perspective == 3) ? "there" : "here"; });
            addDelegate("AOPO", "", null, (x, y) => { return (this.perspective == 3) ? "here" : "there"; });
            addDelegate("THEKSP", "", null, (x, y) => { return (this.perspective == 3) ? "the " + this.interpret("YAR", tense) : this.getSubjectPronoun(); });
            addDelegate("THEKOP", "", null, (x, y) => { return (this.perspective == 3) ? "the " + this.interpret("YAR", tense) : this.getObjectPronouns(); });
            addDelegate("THEKPA", "", null, (x, y) => { return (this.perspective == 3) ? "the " + this.interpret("YAR", tense) + "'s" : this.getPossessiveAdjectives(); });
            addDelegate("THEKPP", "", null, (x, y) => { return (this.perspective == 3) ? "the " + this.interpret("YAR", tense) + "'s" : this.getPossesivePronoun(); });
            addDelegate("THEKRP", "", null, (x, y) => { return (this.perspective == 3) ? "the " + this.interpret("YAR", tense) : this.getReflexivePronouns(); });

            addDelegate("DAKSP", "", null, (x, y) => { return (this.perspective == 3) ? this.interpret("DA", tense) + " " + this.interpret("YAR", tense) : this.getSubjectPronoun(); });
            addDelegate("DAKOP", "", null, (x, y) => { return (this.perspective == 3) ? this.interpret("DA", tense) + " " + this.interpret("YAR", tense) : this.getObjectPronouns(); });
            addDelegate("DAKPA", "", null, (x, y) => { return (this.perspective == 3) ? this.interpret("DA", tense) + " " + this.interpret("YAR", tense) + "'s" : this.getPossessiveAdjectives(); });
            addDelegate("DAKPP", "", null, (x, y) => { return (this.perspective == 3) ? this.interpret("DA", tense) + " " + this.interpret("YAR", tense) + "'s" : this.getPossesivePronoun(); });
            addDelegate("DAKRP", "", null, (x, y) => { return (this.perspective == 3) ? this.interpret("DA", tense) + " " + this.interpret("YAR", tense) : this.getReflexivePronouns(); });

            addDelegate("DAFARKSP", "Demonstrative Adjective from the away perspective, with a YAR call.", null, (x, y) => { return (this.perspective == 3) ? this.interpret("DAFAR", tense) + " " + this.interpret("YAR", tense) : this.getSubjectPronoun(); });
            addDelegate("DAFARKOP", "Demonstrative Adjective from the away perspective, with a YAR call.", null, (x, y) => { return (this.perspective == 3) ? this.interpret("DAFAR", tense) + " " + this.interpret("YAR", tense) : this.getObjectPronouns(); });
            addDelegate("DAFARKPA", "Demonstrative Adjective from the away perspective, with a YAR call.", null, (x, y) => { return (this.perspective == 3) ? this.interpret("DAFAR", tense) + " " + this.interpret("YAR", tense) + "'s" : this.getPossessiveAdjectives(); });
            addDelegate("DAFARKPP", "Demonstrative Adjective from the away perspective, with a YAR call.", null, (x, y) => { return (this.perspective == 3) ? this.interpret("DAFAR", tense) + " " + this.interpret("YAR", tense) + "'s" : this.getPossesivePronoun(); });
            addDelegate("DAFARKRP", "Demonstrative Adjective from the away perspective, with a YAR call.", null, (x, y) => { return (this.perspective == 3) ? this.interpret("DAFAR", tense) + " " + this.interpret("YAR", tense) : this.getReflexivePronouns(); });

            addDelegate("FSP", "stands for fact subject perspective", null, (x, y) => { return ((this.IsAnIt) ? "that " : "who ") + this.drawWho(); });
            addDelegate("FOP", "stands for fact Object perspective", null, (x, y) => { return ((this.IsAnIt) ? "that " : "whom ") + this.drawWho(); });
            addDelegate("ISMANY", "", null, (x, y) => { return ((this.IsMany) ? "true" : "false"); });
            addDelegate("CLOTH", "", null, (x, y) =>
            {
                var garm = this.getLastRandomlySelectedGarment();
                if (garm == null) return "ERR: NO CLOTH!";
                return garm.interpret("$", tense);
            });
            addDelegate("MYCLOTH", "", null, (x, y) =>
            {
                var garm1 = this.getLastRandomlySelectedGarment();
                if (garm1 == null) return "ERR: NO CLOTH!";
                return this.interpret("PAP", tense) + " " + garm1.interpret("YSR", tense);
            });

            #region Overwrites the matter versions
            #region $@+%
            //==========================================================================================================
            addDelegate("@", "Objective noun phrase if the character is in the third person. Else returns a standard objective pronoun. (I, you)", null, (x, y) =>
            {
                if (this.perspective != 3) return this.getObjectPronouns();
                if (willDraw(this.AliasPercentage))
                {
                    string da = "the";
                    string yar = this.interpret("yar", tense);
                    if (!String.IsNullOrWhiteSpace(yar)) return da + " " + yar; else return this.interpret("op", tense);
                }
                else
                {
                    return "the " + this.interpret("k-a", tense);
                }
            });
            //==========================================================================================================
            addDelegate("$", "Something", null, (x, y) =>
            {
                if (this.perspective != 3) return this.getSubjectPronoun();
                if (willDraw(this.AliasPercentage))
                {
                    string da = "the"; //this.interpret("da", tense);
                    string yar = this.interpret("yar", tense);
                    if (!String.IsNullOrWhiteSpace(yar)) return da + " " + yar; else return this.interpret("sp", tense);
                }
                else
                {
                    return "the " + this.interpret("k-a", tense);
                }
            });
            //==========================================================================================================
            addDelegate("+", "Something", null, (x, y) =>
            {
                if (this.perspective != 3) return this.getPossessiveAdjectives();
                if (willDraw(this.AliasPercentage))
                {
                    string yar = this.interpret("yar", tense);
                    if (!String.IsNullOrWhiteSpace(yar))
                    {
                        if (yar.EndsWith("s")) return "the " + yar + "'";
                        return "the " + yar + "'s";
                    }

                    else return this.interpret("pa", tense);
                }
                else
                {
                    string moniker = this.interpret("k-a", tense); moniker += (moniker.EndsWith("s")) ? "'" : "'s";
                    return "the " + moniker;
                    //return "the " + this.interpret("k-a", tense) + "'s";
                }
            });
            //==========================================================================================================
            addDelegate("%", "Something", null, (x, y) =>
            {
                if (this.perspective != 3) return this.getPossesivePronoun();
                if (willDraw(this.AliasPercentage))
                {
                    string yar = this.interpret("yar", tense);
                    if (!String.IsNullOrWhiteSpace(yar))
                    {
                        if (yar.EndsWith("s")) return "the " + yar + "'";
                        return "the " + yar + "'s";
                    }
                    else return this.interpret("pp", tense);
                }
                else
                {
                    string moniker = this.interpret("k-a", tense); moniker += (moniker.EndsWith("s")) ? "'" : "'s";
                    return "the " + moniker;
                    //return "the " + this.interpret("k-a", tense) + "'s";
                }
            });
            #endregion

            #region $@+% With Parameter
            //==========================================================================================================
            d = getFreshParameterList(); d.Add(new MethodPackage.Parameter("Adjective Count", "The amount of adjectives to be drawn.", typeof(int)));
            addDelegate("@", "Objective noun phrase if the character is in the third person. Else returns a standard objective pronoun. (I, you)", d, (x, y) =>
            {
                if (this.perspective != 3) return this.getObjectPronouns();
                if (willDraw(this.AliasPercentage))
                {
                    string da = "the";
                    string adjectives = this.chainedDraws(MethodPackage.Parameter.getParameter(y[0]).getValue(), Matter.multipleAdjectivesSeperator, getDescribingList(ListCode.Adjective), Matter.multipleAdjectivesFinalizer);
                    string moniker = this.interpret("k-a", tense);
                    if (!String.IsNullOrWhiteSpace(adjectives)) return da + " " + adjectives + " " + moniker; else return this.interpret("op", tense);
                }
                else
                {
                    return "the " + this.interpret("k-a", tense);
                }
            });
            //==========================================================================================================
            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Adjective Count", "The amount of adjectives to be drawn.", typeof(int)));
            addDelegate("$", "Something", d, (x, y) =>
            {
                if (this.perspective != 3) return this.getSubjectPronoun();
                if (willDraw(this.AliasPercentage))
                {
                    string da = "the";
                    string adjectives = this.chainedDraws(MethodPackage.Parameter.getParameter(y[0]).getValue(), Matter.multipleAdjectivesSeperator, getDescribingList(ListCode.Adjective), Matter.multipleAdjectivesFinalizer);
                    string moniker = this.interpret("k-a", tense);
                    if (!String.IsNullOrWhiteSpace(adjectives)) return da + " " + adjectives + " " + moniker; else return this.interpret("sp", tense);
                }
                else
                {
                    return "the " + this.interpret("k-a", tense);
                }
            });
            //==========================================================================================================
            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Adjective Count", "The amount of adjectives to be drawn.", typeof(int)));
            addDelegate("+", "Something", d, (x, y) =>
            {
                if (this.perspective != 3) return this.getPossessiveAdjectives();
                if (willDraw(this.AliasPercentage))
                {
                    string da = "the";
                    string adjectives = this.chainedDraws(MethodPackage.Parameter.getParameter(y[0]).getValue(), Matter.multipleAdjectivesSeperator, getDescribingList(ListCode.Adjective), Matter.multipleAdjectivesFinalizer);
                    string moniker = this.interpret("k-a", tense); moniker += (moniker.EndsWith("s")) ? "'" : "'s";
                    if (!String.IsNullOrWhiteSpace(adjectives)) return da + " " + adjectives + " " + moniker; else return this.interpret("pa", tense);
                }
                else
                {
                    string moniker = this.interpret("k-a", tense); moniker += (moniker.EndsWith("s")) ? "'" : "'s";
                    return "the " + moniker;
                }
            });
            //==========================================================================================================
            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Adjective Count", "The amount of adjectives to be drawn.", typeof(int)));
            addDelegate("%", "Something", d, (x, y) =>
            {
                if (this.perspective != 3) return this.getPossesivePronoun();
                if (willDraw(this.AliasPercentage))
                {
                    string da = "the";
                    string adjectives = this.chainedDraws(MethodPackage.Parameter.getParameter(y[0]).getValue(), Matter.multipleAdjectivesSeperator, getDescribingList(ListCode.Adjective), Matter.multipleAdjectivesFinalizer);
                    string moniker = this.interpret("k-a", tense); moniker += (moniker.EndsWith("s")) ? "'" : "'s";
                    if (!String.IsNullOrWhiteSpace(adjectives)) return da + " " + adjectives + " " + moniker; else return this.interpret("pp", tense);
                }
                else
                {
                    string moniker = this.interpret("k-a", tense); moniker += (moniker.EndsWith("s")) ? "'" : "'s";
                    return "the " + moniker;
                }

            });
            #endregion

            //#region $@+% With Mode
            //==========================================================================================================
            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Adjective Count", "The amount of adjectives to be drawn.", typeof(int)));
            d.Add(new MethodPackage.Parameter("Mode", "Lists to use. S,A,V,SA,VA,VS,SAV", typeof(string)));
            addDelegate("@", "Objective noun phrase if the character is in the third person. Else returns a standard objective pronoun. (I, you)", d, (x, y) =>
            {
                if (this.perspective != 3) return this.getObjectPronouns();
                if (willDraw(this.AliasPercentage))
                {
                    string da = "the";
                    string adjectives = this.chainedDraws(
                        MethodPackage.Parameter.getParameter(y[0]).getValue(),
                        Matter.multipleAdjectivesSeperator,
                        getDescribingList(MethodPackage.Parameter.getParameter(y[1]).getValue()),
                        Matter.multipleAdjectivesFinalizer
                        );
                    string moniker = this.interpret("k-a", tense);
                    if (!String.IsNullOrWhiteSpace(adjectives)) return da + " " + adjectives + " " + moniker; else return this.interpret("op", tense);
                }
                else
                {
                    return "the " + this.interpret("k-a", tense);
                }
            });
            //==========================================================================================================
            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Adjective Count", "The amount of adjectives to be drawn.", typeof(int)));
            d.Add(new MethodPackage.Parameter("Mode", "Lists to use. S,A,V,SA,VA,VS,SAV", typeof(string)));
            addDelegate("$", "Something", d, (x, y) =>
            {
                if (this.perspective != 3) return this.getSubjectPronoun();
                if (willDraw(this.AliasPercentage))
                {
                    string da = "the";
                    string adjectives = this.chainedDraws(
                        MethodPackage.Parameter.getParameter(y[0]).getValue(),
                        Matter.multipleAdjectivesSeperator,
                        getDescribingList(MethodPackage.Parameter.getParameter(y[1]).getValue()),
                        Matter.multipleAdjectivesFinalizer
                        );
                    string moniker = this.interpret("k-a", tense);
                    if (!String.IsNullOrWhiteSpace(adjectives)) return da + " " + adjectives + " " + moniker; else return this.interpret("sp", tense);
                }
                else
                {
                    return "the " + this.interpret("k-a", tense);
                }
            });
            //==========================================================================================================
            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Adjective Count", "The amount of adjectives to be drawn.", typeof(int)));
            d.Add(new MethodPackage.Parameter("Mode", "Lists to use. S,A,V,SA,VA,VS,SAV", typeof(string)));
            addDelegate("+", "Something", d, (x, y) =>
            {
                if (this.perspective != 3) return this.getPossessiveAdjectives();
                if (willDraw(this.AliasPercentage))
                {
                    string da = "the";
                    string adjectives = this.chainedDraws(
                        MethodPackage.Parameter.getParameter(y[0]).getValue(),
                        Matter.multipleAdjectivesSeperator,
                        getDescribingList(MethodPackage.Parameter.getParameter(y[1]).getValue()),
                        Matter.multipleAdjectivesFinalizer
                        );
                    string moniker = this.interpret("k-a", tense); moniker += (moniker.EndsWith("s")) ? "'" : "'s";
                    if (!String.IsNullOrWhiteSpace(adjectives)) return da + " " + adjectives + " " + moniker; else return this.interpret("pa", tense);
                }
                else
                {
                    string moniker = this.interpret("k-a", tense); moniker += (moniker.EndsWith("s")) ? "'" : "'s";
                    return "the " + moniker;
                    //return "the " + this.interpret("k-a", tense) + "'s";
                }
            });
            //==========================================================================================================
            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Adjective Count", "The amount of adjectives to be drawn.", typeof(int)));
            d.Add(new MethodPackage.Parameter("Mode", "Lists to use. S,A,V,SA,VA,VS,SAV", typeof(string)));
            addDelegate("%", "Something", d, (x, y) =>
            {
                if (this.perspective != 3) return this.getPossesivePronoun();
                if (willDraw(this.AliasPercentage))
                {
                    string da = "the";
                    string adjectives = this.chainedDraws(
                        MethodPackage.Parameter.getParameter(y[0]).getValue(),
                        Matter.multipleAdjectivesSeperator,
                        getDescribingList(MethodPackage.Parameter.getParameter(y[1]).getValue()),
                        Matter.multipleAdjectivesFinalizer
                        );
                    string moniker = this.interpret("k-a", tense); moniker += (moniker.EndsWith("s")) ? "'" : "'s";
                    if (!String.IsNullOrWhiteSpace(adjectives)) return da + " " + adjectives + " " + moniker; else return this.interpret("pp", tense);
                }
                else
                {
                    string moniker = this.interpret("k-a", tense); moniker += (moniker.EndsWith("s")) ? "'" : "'s";
                    return "the " + moniker;
                    //return "the " + this.interpret("k-a", tense) + "'s";
                }

            });
            #endregion

            addDelegate("?", "Looks for the Human's 'conditionals' trait or garment and executes the facts list. An error returns an empty string.", null, (x, y) => { return this.getConditional(tense); });
            //==========================================================================================================
            addDelegate("$$$", "Returns $, but Ensures and SPP failsafe", null, (x, y) =>
            {
                if (this.perspective != 3) return this.getSubjectPronoun();
                return this.tripleDollarSign();
            });
            d = getFreshParameterList(); d.Add(new MethodPackage.Parameter("Adjective Count", "The amount of adjectives to be drawn.", typeof(int)));
            addDelegate("$$$", "Returns $, but Ensures and SPP failsafe. Integer parameter is the adjective count returned.", d, (x, y) =>
            {
                if (this.perspective != 3) return this.getSubjectPronoun();
                return tripleDollarSign(MethodPackage.Parameter.getParameter(y[0]).getValue());
            });
            //==========================================================================================================
            addDelegate("@@@", "Returns @, but Ensures and OPP failsafe.", null, (x, y) =>
            {
                if (this.perspective != 3) return this.getObjectPronouns();
                return this.tripleAtSign();
            });
            d = getFreshParameterList(); d.Add(new MethodPackage.Parameter("Adjective Count", "The amount of adjectives to be drawn.", typeof(int)));
            addDelegate("@@@", "Returns @, but Ensures and OPP failsafe. Integer parameter is the adjective count returned.", d, (x, y) =>
            {
                if (this.perspective != 3) return this.getObjectPronouns();
                return this.tripleAtSign(MethodPackage.Parameter.getParameter(y[0]).getValue());
            });
            //#endregion


            #region Verb Methods
            //==========================================================================================================
            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Infinitive", "The verb in infinitive form.", typeof(string)));
            addDelegate("V", "Something", d, (x, y) =>
            {
                var relativeTense = Verb.getTenseFromInt(this.tense);
                var gender = this.HasVagina ? Verb.Gender.female : Verb.Gender.male;
                var verb = new Verb(MethodPackage.Parameter.getParameter(y[0]).getValue(), this.IsMany, this.perspective, gender, relativeTense);
                return verb.getVerb();
            });
            //==========================================================================================================
            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Infinitive", "The verb in infinitive form.", typeof(string)));
            d.Add(new MethodPackage.Parameter("Relative tense", "Values accepted are -1, 0, 1, 2", typeof(int)));
            addDelegate("V", "Something", d, (x, y) =>
            {

                int secondParameter = MethodPackage.Parameter.getParameter(y[1]).getValue();
                if (secondParameter < -1 || secondParameter > 2) secondParameter = 0;
                var relativeTense = Verb.getTenseFromInt(this.tense + secondParameter);
                var gender = this.HasVagina ? Verb.Gender.female : Verb.Gender.male;
                var verb = new Verb(MethodPackage.Parameter.getParameter(y[0]).getValue(), this.IsMany, this.perspective, gender, relativeTense);
                return verb.getVerb();
            });
            //==========================================================================================================
            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Infinitive", "The verb in infinitive form.", typeof(string)));
            d.Add(new MethodPackage.Parameter("Relative tense", "Values accepted are -1, 0, 1, 2", typeof(int)));
            d.Add(new MethodPackage.Parameter("Adverb", "And adverb to slap into the verb phrase.", typeof(string)));
            addDelegate("V", "Something", d, (x, y) =>
            {
                int secondParameter = MethodPackage.Parameter.getParameter(y[1]).getValue();
                if (secondParameter < -1 || secondParameter > 2) secondParameter = 0;
                var relativeTense = Verb.getTenseFromInt(this.tense + secondParameter);
                //var relativeTense = Verb.getTenseFromInt(tense + MethodPackage.Parameter.getParameter(y[1]).getValue());
                var gender = this.HasVagina ? Verb.Gender.female : Verb.Gender.male;
                var verb = new Verb(MethodPackage.Parameter.getParameter(y[0]).getValue(), this.IsMany, this.perspective, gender, relativeTense, MethodPackage.Parameter.getParameter(y[2]).getValue());
                return verb.getVerb();
            });
            //d = getFreshParameterDictionary();
            //d.Add(new MethodPackage.Parameter("Infinitive", "The verb in infinitive form.", typeof(string)));
            //d.Add(new MethodPackage.Parameter("Adverb", "And adverb to slap into the verb phrase.", typeof(string)));
            //addDelegate("V", "Something", d, (x, y) =>
            //{
            //    var gender = this.hasVagina ? Verb.Gender.female : Verb.Gender.male;
            //    var verb = new Verb(y[0], this.IsMany, this.perspective, gender, Verb.getTenseFromInt(tense), y[1]);
            //    return verb.getVerb();
            //});


            //==========================================================================================================

            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Infinitive", "The verb in infinitive form.", typeof(string)));
            d.Add(new MethodPackage.Parameter("Adverb", "And adverb to slap into the verb phrase.", typeof(string)));
            addDelegate("V", "Something", d, (x, y) =>
            {
                var gender = this.HasVagina ? Verb.Gender.female : Verb.Gender.male;
                int parameteredRelativeTense = Verb.getIntFromString(y[1]);
                Verb verb = null;
                if (parameteredRelativeTense != -1)
                {
                    verb = new Verb(y[0], this.IsMany, this.perspective, gender, Verb.getTenseFromInt(parameteredRelativeTense));
                }
                else
                {
                    verb = new Verb(y[0], this.IsMany, this.perspective, gender, Verb.getTenseFromInt(this.tense), y[1]);
                }

                return verb.getVerb();
            });
            //==========================================================================================================
            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Infinitive", "The verb in infinitive form.", typeof(string)));
            d.Add(new MethodPackage.Parameter("Constant Tense", "The tense constant name in string form. Case sensitive.", typeof(string)));
            d.Add(new MethodPackage.Parameter("Adverb", "And adverb to slap into the verb phrase.", typeof(string)));
            addDelegate("V", "Something", d, (x, y) =>
            {
                var gender = this.HasVagina ? Verb.Gender.female : Verb.Gender.male;
                int parameteredRelativeTense = Verb.getIntFromString(y[1]);
                Verb verb = null;
                if (parameteredRelativeTense != -1)
                {
                    parameteredRelativeTense = Verb.getIntFromString("Continuous");

                }
                verb = new Verb(y[0], this.IsMany, this.perspective, gender, Verb.getTenseFromInt(parameteredRelativeTense), y[2]);
                return verb.getVerb();
            });

            #endregion

            //==========================================================================================================


            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Selection method codes", "Select a combination of K/A/ID/M/R", typeof(int)));
            d.Add(new MethodPackage.Parameter("Random Trait Group Id", "The group Id form which a random trait is selected from.", typeof(int)));
            addDelegate("RNDTRAIT", "Something", d, (x, y) => { return getRandomTrait(y[0], MethodPackage.Parameter.getParameter(y[1]).getValue()); });


            addDelegate("SP", "", null, (x, y) => { return this.getSubjectPronoun(); });

            //==========================================================================================================

            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Negative", "Anything other than zero is considered negative in value.", typeof(int)));
            addDelegate("COULD", "Used to replace stories that use the word 'could' with 'is able to'.", d, (x, y) =>
            {
                int negationParameter = MethodPackage.Parameter.getParameter(y[0]).getValue();
                var could = this.find("could");

                if (could != null && could is Trait)
                {
                    if (negationParameter == 0)
                    {
                        return could.interpret("K", this.tense);
                    }
                    else
                    {
                        return could.interpret("V", this.tense);
                    }
                }


                return "Failed to locate a 'could' trait.";
            });
            //==========================================================================================================

            d = getFreshParameterList();
            addDelegate("CAN", "Used to replace stories that use the word 'could' or 'can' with 'is able to'.", d, (x, y) =>
            {
                var could = this.find("could");

                if (could != null && could is Trait)
                {
                    return could.interpret("K", this.tense);
                }


                return "Failed to locate a 'could' trait.";
            });

            //==========================================================================================================

            d = getFreshParameterList();
            addDelegate("CANT", "Used to replace stories that use the word 'could not' or 'can not' with 'is not able to'.", d, (x, y) =>
            {
                var could = this.find("could");

                if (could != null && could is Trait)
                {
                    return could.interpret("V", this.tense);
                }


                return "Failed to locate a 'could' trait.";
            });



        }

        public override string interpret(string code, int tense)
        {
            return base.interpret(code, tense);
            string paramCode = code;
            code = code.ToUpper();
            if (paramCode.Length == 0) return "";


            // legacy
            //if (code.StartsWith("{") && code.EndsWith("}"))
            //{
            //    code = code.Remove(code.Length - 1, 1).Remove(0, 1);
            //}

            // ex: SC-(A1)
            // ex: SC-A(sdfs)
            //Regex regexCallListWithKey = new Regex(@"^(SC)\-A\(([a-z]|[A-Z]|\d)+\)$", RegexOptions.IgnoreCase);
            if (regexCallListWithKey.IsMatch(code.ToUpper()))
            {
                ListDrawString list = null;
                string theCode = code.ToUpper();

                // Always starts with SC for the time being
                if (code.StartsWith("SC")) {
                    list = this.scripts;

                    string listCode = theCode.Remove(0, 2);
                    listCode = listCode.Remove(listCode.Length - 1, 1);

                    return list.draw(listCode);
                }
            }

            Regex regexTrait = new Regex(@"^T\d+", RegexOptions.IgnoreCase);
            Verb.Gender gender = Verb.Gender.it;
            if (this.IsAnIt) gender = Verb.Gender.it;
            else if (this.HasVagina) gender = Verb.Gender.female;
            else gender = Verb.Gender.male;


            if (paramCode.StartsWith("v?("))
            {
                // if this person isn't the story's pov character and isn't first person perperspective.
                if (!this.isPov && !(this.perspective == 1))
                {
                    paramCode = paramCode.Remove(0, 3);
                    paramCode = "v(?" + paramCode;
                    string verbv = Verb.getVerb(paramCode, this.IsMany, this.perspective, this.IsAnIt, gender, tense);
                    if (!String.IsNullOrWhiteSpace(verbv)) return verbv;
                }
                else
                {
                    paramCode = paramCode.Remove(0, 3);
                    paramCode = "v(" + paramCode;
                    string verbv = Verb.getVerb(paramCode, this.IsMany, this.perspective, this.IsAnIt, gender, tense);
                    if (!String.IsNullOrWhiteSpace(verbv)) return verbv;
                }
            }
            string verb = Verb.getVerb(paramCode, this.IsMany, this.perspective, this.IsAnIt, gender, tense);
            if (!String.IsNullOrWhiteSpace(verb)) return verb;

            Regex regexGarmentSelections = new Regex(@"^G(ID|C|A|F){1,3}\d*$", RegexOptions.IgnoreCase);
            if (regexGarmentSelections.IsMatch(code))
            {
                return getRandomGarment(code);
            }
            // This is the Random trait part.
            else if (regexTrait.IsMatch(code))
            {
                char[] chars = code.ToCharArray();
                if (chars.Length > 1)
                {
                    string strGroupId = "";
                    int groupId = 0; // default group is called
                    Array.Reverse(chars);
                    int size = chars.Length - 1;
                    Array.Resize<char>(ref chars, size);
                    Array.Reverse(chars);
                    foreach (char myChar in chars)
                    {
                        int test = 0;
                        if (int.TryParse(myChar.ToString(), out test))
                            strGroupId += myChar.ToString();
                        else
                            break;
                    }

                    if (!String.IsNullOrEmpty(strGroupId))
                    {

                        code = code.Replace(strGroupId, "");
                        if (code.StartsWith("T"))
                        {
                            code = code.Remove(0, 1);
                        }
                    }
                    if (int.TryParse(strGroupId, out groupId))
                    {
                        return getRandomTrait(code, groupId);
                    }
                }

                return this.getRandomTrait(code, tense);
            }

            //Regex regexIsParentheses = new Regex(@"^\(\w+\)$",RegexOptions.IgnoreCase);
            Regex regexQuickMonikers = new Regex(@"^(\@|\+|\%|\$|\$\$|\@\@|\+\+|\%\%|\$\$\$|\@\@\@){1}.*$");
            if (regexQuickMonikers.IsMatch(code))
            {

                if (code.StartsWith("@@@"))
                {
                    if (this.perspective != 3) return this.getObjectPronouns();
                    return base.interpret(paramCode, tense);

                }

                if (code.StartsWith("$$$"))
                {
                    if (this.perspective != 3) return this.getSubjectPronoun();
                    return base.interpret(paramCode, tense);

                }




                // !@#$%^&*()_+
                if (code.StartsWith("$$")) return this.refOther(code, "$", new string[] { "~the", "as", "k" }, tense);
                if (code.StartsWith("@@")) return this.refOther(code, "@", new string[] { "da", "as", "k" }, tense);
                if (code.StartsWith("++")) return this.refOther(code, "+", new string[] { "wpa", "as", "k" }, tense);
                if (code.StartsWith("%%")) return this.refOther(code, "", new string[] { "~the", "as", "k", "~of", "wpp" }, tense);

                if (code.StartsWith("@"))
                {
                    if (this.perspective != 3) return this.getObjectPronouns();
                    return base.interpret(paramCode, tense);
                }

                if (code.StartsWith("$"))
                {
                    if (this.perspective != 3) return this.getSubjectPronoun();
                    return base.interpret(paramCode, tense);
                }

                if (code.StartsWith("+"))
                {
                    if (code.Length > 1)
                    {
                        code = paramCode.Remove(0, 1);
                        if (this.perspective != 3) return this.getPossessiveAdjectives();
                        return this.interpret("*" + code, tense);
                    }
                    else
                    {
                        if (this.perspective != 3) return this.getPossessiveAdjectives();
                        return base.interpret(code, tense);
                    }
                }

                if (code.StartsWith("%"))
                {
                    if (code.Length > 1)
                    {
                        code = paramCode.Remove(0, 1);
                        if (this.perspective != 3) return this.getPossesivePronoun();
                        return this.interpret("*" + code, tense);
                    }
                    else
                    {
                        if (this.perspective != 3) return this.getPossesivePronoun();
                        return base.interpret(code, tense);
                    }
                }





            }

            Human many = null;
            var other = this.getOther();

            switch (code)
            {
                case "FN":
                    return this.FirstName;
                case "MN":
                    return this.MiddleName;
                case "LN":
                    return this.FamilyName;
                case "PP":
                    return this.getPossesivePronoun();
                case "PPP":
                    if (this.perspective == 3)
                        return this.firstName + "'s";
                    else
                        return this.getPossesivePronoun();
                case "SP":
                    return this.getSubjectPronoun();
                case "SPP":
                    if (this.perspective == 3)
                        return this.firstName;
                    else
                        return this.getSubjectPronoun();
                case "OP":
                    return this.getObjectPronouns();
                case "OPP":
                    if (this.perspective == 3)
                        return this.firstName;
                    else
                        return this.getObjectPronouns();
                case "PAP":
                    if (this.perspective == 3)
                        return this.firstName + "'s";
                    else
                        return this.getPossessiveAdjectives();


                case "POV":
                    return this.perspective.ToString();
                case "SEXE":
                    string theSex = "";
                    if (this.IsAnIt) theSex = "thing";
                    else if (this.HasVagina) theSex = "female";
                    else theSex = "male";

                    if (this.IsMany) theSex += "s";
                    return theSex;
                case "GENDER":
                    string theGender = "";
                    if (this.IsAnIt) theGender = "thing";
                    else if (this.HasVagina) theGender = "female";
                    else theGender = "male";

                    if (this.IsMany) theGender += "s";
                    return theGender;
                case "CHILD":
                    string child = "";
                    if (this.IsAnIt) child = "thing";
                    else if (this.HasVagina) child = "girl";
                    else child = "boy";
                    if (this.IsMany) child += "s";
                    return child;
                case "ADULT":
                    string adult = "";
                    if (this.IsAnIt)
                    {
                        adult = "thing";
                        return adult;
                    }
                    else if (this.HasVagina) adult = "woman";
                    else adult = "man";
                    if (this.IsMany)
                    {
                        if (this.HasVagina) adult = "women";
                        else adult = "men";
                    }
                    return adult;

                case "WE":
                    if (other == null) return this.getSubjectPronoun();
                    if (!(other is Human)) return this.getPossessiveAdjectives() + " " + other.getName();
                    many = getMeAsMany();
                    return many.getSubjectPronoun();

                case "US":
                    if (other == null) return this.getObjectPronouns();
                    if (!(other is Human)) return this.getPossessiveAdjectives() + " " + other.getName();
                    many = getMeAsMany();
                    return many.getObjectPronouns();

                case "OUR":
                    if (other == null) return this.getPossessiveAdjectives();
                    if (!(other is Human)) return this.getPossessiveAdjectives() + " " + other.getName();
                    many = getMeAsMany();
                    return many.getPossessiveAdjectives();

                case "OURS":
                    if (other == null) return this.getPossesivePronoun();
                    if (!(other is Human)) return this.getPossessiveAdjectives() + " " + other.getName();
                    many = getMeAsMany();
                    return many.getPossesivePronoun();

                case "OURSELVES":
                    if (other == null) return this.getReflexivePronouns();
                    if (!(other is Human)) return this.getPossessiveAdjectives() + " " + other.getName();
                    many = getMeAsMany();
                    return many.getReflexivePronouns();

                case "DA": //demonstrative adjective
                    if (this.IsMany)
                        if (this.getPerspectiveAsMany() < 3)
                            return "these";
                        else
                            return "those";
                    else
                    {
                        int daPerspective = this.getPerspectiveAsMany();
                        if (daPerspective == 3)
                        {
                            return "that";
                        }
                        else if (daPerspective == 2)
                        {
                            return "that";
                        }
                        else if (daPerspective == 1)
                        {
                            return "this";
                        }

                    }
                    return "this";
                case "DACLOSE":
                    if (this.IsMany)
                        return "these";
                    else
                        return "this";
                case "DAFAR":
                    if (this.IsMany)
                        return "those";
                    else
                        return "that";
                case "AOP":  // adverb of place default point of view (subjective)
                    if (perspective == 3)
                        return "there";
                    else
                        return "here";
                case "AOPS":  // adverb of place subjective point of view
                    if (perspective == 3)
                        return "there";
                    else
                        return "here";
                case "AOPO":  // adverb of place objective point of view
                    if (perspective == 3)
                        return "here";
                    else
                        return "there";

                case "SCRIPT":
                    return this.drawFromList(this.scripts, "");
                case "SC":
                    return this.drawFromList(this.scripts, "");
                case "SC-N":
                    return this.drawFromList(this.scripts, "", linear: true);
                case "SC-A":
                    return this.scripts.getAssociated();
                case "SC-F":
                    return this.scripts.getAssociated(ListDrawString.DrawingStyle.ForcedSublist);
                case "SC-L":
                    return this.scripts.LastSelected;

                case "THEKSP":
                    if (this.perspective == 3)
                        return "the " + base.interpret("A", tense) + " " + base.interpret("K", tense);
                    else
                        return this.getSubjectPronoun();

                case "THEKOP":
                    if (this.perspective == 3)
                        return "the " + base.interpret("A", tense) + " " + base.interpret("K", tense);
                    else
                        return this.getObjectPronouns();

                case "THEKPA":
                    if (this.perspective == 3)
                        return "the " + base.interpret("A", tense) + " " + base.interpret("K", tense) + "'s";
                    else
                        return this.getPossessiveAdjectives();

                case "THEKPP":
                    if (this.perspective == 3)
                        return "the " + base.interpret("A", tense) + " " + base.interpret("K", tense) + "'s";
                    else
                        return this.getPossesivePronoun();

                case "THEKRP":
                    if (this.perspective == 3)
                        return "the " + base.interpret("A", tense) + " " + base.interpret("K", tense);
                    else
                        return this.getReflexivePronouns();

                case "DAKSP":
                    if (this.perspective == 3)
                        return this.interpret("DA", tense) + " " + base.interpret("A", tense) + " " + base.interpret("K", tense);
                    else
                        return this.getSubjectPronoun();

                case "DAKOP":
                    if (this.perspective == 3)
                        return this.interpret("DA", tense) + " " + base.interpret("A", tense) + " " + base.interpret("K", tense);
                    else
                        return this.getObjectPronouns();

                case "DAKPA":
                    if (this.perspective == 3)
                        return this.interpret("DA", tense) + " " + base.interpret("A", tense) + " " + base.interpret("K", tense) + "'s";
                    else
                        return this.getPossessiveAdjectives();

                case "DAKPP":
                    if (this.perspective == 3)
                        return this.interpret("DA", tense) + " " + base.interpret("A", tense) + " " + base.interpret("K", tense) + "'s";
                    else
                        return this.getPossesivePronoun();

                case "DAKRP":
                    if (this.perspective == 3)
                        return this.interpret("DA", tense) + " " + base.interpret("A", tense) + " " + base.interpret("K", tense);
                    else
                        return this.getReflexivePronouns();

                case "DAFARKSP":
                    if (this.perspective == 3)
                        return this.interpret("DAFAR", tense) + " " + base.interpret("A", tense) + " " + base.interpret("K", tense);
                    else
                        return this.getSubjectPronoun();

                case "DAFARKOP":
                    if (this.perspective == 3)
                        return this.interpret("DAFAR", tense) + " " + base.interpret("A", tense) + " " + base.interpret("K", tense);
                    else
                        return this.getObjectPronouns();

                case "DAFARKPA":
                    if (this.perspective == 3)
                        return this.interpret("DAFAR", tense) + " " + base.interpret("A", tense) + " " + base.interpret("K", tense) + "'s";
                    else
                        return this.getPossessiveAdjectives();

                case "DAFARKPP":
                    if (this.perspective == 3)
                        return this.interpret("DAFAR", tense) + " " + base.interpret("A", tense) + " " + base.interpret("K", tense) + "'s";
                    else
                        return this.getPossesivePronoun();

                case "DAFARKRP":
                    if (this.perspective == 3)
                        return this.interpret("DAFAR", tense) + " " + base.interpret("A", tense) + " " + base.interpret("K", tense);
                    else
                        return this.getReflexivePronouns();

                case "FSP": // stands for fact subject perspective
                    return ((this.IsAnIt) ? "that " : "who ") + this.drawWho();

                case "FOP": // stands for fact Object perspective
                    return ((this.IsAnIt) ? "that " : "whom ") + this.drawWho();
                case "ISMANY":
                    return ((this.IsMany) ? "true" : "false");
                case "CLOTH":
                    var garm = this.getLastRandomlySelectedGarment();
                    if (garm == null) return "ERR: NO CLOTH!";
                    return garm.interpret("$", tense);
                case "MYCLOTH":
                    var garm1 = this.getLastRandomlySelectedGarment();
                    if (garm1 == null) return "ERR: NO CLOTH!";
                    return this.interpret("PAP", tense) + " " + garm1.interpret("YSR", tense);
                case "?":
                    return this.getConditional(tense);

                default:
                    return base.interpret(paramCode, tense);
            }
        }

        #region useless Verb crap

        private Human getMeAsMany()
        {

            Human many = new Human();
            many.IsMany = true;
            many.perspective = getPerspectiveAsMany();

            return many;
        }

        protected override string getPossesivePronoun()
        {

            if (this.perspective == 3)
            {

                if (!this.IsMany)
                {
                    if (this.IsAnIt)
                    {
                        if (this.pronouns != null) return this.pronouns.Possessive;
                        return "its"; // not used
                    }
                    if (this.HasVagina)
                    {
                        return "hers";
                    }
                    else
                    {
                        return "his";
                    }
                }
                else
                {
                    return "theirs";
                }
            }
            else if (perspective == 2)
            {
                return "yours";
            }
            else
            {
                if (!this.IsMany)
                {
                    return "mine";
                }
                else
                {
                    return "ours";
                }
            }

        }

        protected override string getSubjectPronoun()
        {

            if (this.perspective == 3)
            {

                if (!this.IsMany)
                {
                    if (this.IsAnIt)
                    {
                        if (this.pronouns != null) return this.pronouns.Subject;
                        return "it";
                    }
                    if (this.HasVagina)
                    {
                        return "she";
                    }
                    else
                    {
                        return "he";
                    }
                }
                else
                {
                    return "they";
                }
            }
            else if (perspective == 2)
            {
                return "you";
            }
            else
            {
                if (!this.IsMany)
                {
                    return "I";
                }
                else
                {
                    return "we";
                }
            }
        }

        protected override string getObjectPronouns()
        {

            if (this.perspective == 3)
            {

                if (!this.IsMany)
                {
                    if (this.IsAnIt)
                    {
                        if (this.pronouns != null) return this.pronouns.Object;
                        return "it";
                    }
                    if (this.HasVagina)
                    {
                        return "her";
                    }
                    else
                    {
                        return "him";
                    }
                }
                else
                {
                    return "them";
                }
            }
            else if (perspective == 2)
            {
                return "you";
            }
            else
            {
                if (!this.IsMany)
                {
                    return "me";
                }
                else
                {
                    return "us";
                }
            }
        }

        protected override string getPossessiveAdjectives()
        {

            if (this.perspective == 3)
            {

                if (!this.IsMany)
                {
                    if (this.IsAnIt)
                    {
                        if (this.pronouns != null) return this.pronouns.Personal;
                        return "its";
                    }
                    if (this.HasVagina)
                    {
                        return "her";
                    }
                    else
                    {
                        return "his";
                    }
                }
                else
                {
                    return "their";
                }
            }
            else if (perspective == 2)
            {
                return "your";
            }
            else
            {
                if (!this.IsMany)
                {
                    return "my";
                }
                else
                {
                    return "our";
                }
            }
        }

        protected override string getReflexivePronouns()
        {
            if (this.perspective == 3)
            {

                if (!this.IsMany)
                {
                    if (this.IsAnIt)
                    {
                        if (this.pronouns != null) return this.pronouns.Reflexive;
                        return "itself";
                    }
                    if (this.HasVagina)
                    {
                        return "herself";
                    }
                    else
                    {
                        return "himself";
                    }
                }
                else
                {
                    return "themselves";
                }
            }
            else if (perspective == 2)
            {
                if (!this.IsMany)
                {
                    return "yourself";
                }
                else
                {
                    return "yourselves";
                }
            }
            else
            {
                if (!this.IsMany)
                {
                    return "myself";
                }
                else
                {
                    return "ourselves";
                }
            }
        }

        protected int getPerspectiveAsMany()
        {
            if (this.getOther() == null) return this.perspective;
            Human other = (this.getOther() as Human);
            int perspective = (int)((other.Perspective * 30) / this.perspective);
            //60/3=20; their, theirs
            //40/3=13; your, yours
            //20/3=6; our, ours
            //60/2=30; your, yours
            //40/2=20; your, yours
            //20/2=10; our, ours
            //60/1=60; our, ours
            //40/1=40; our, ours
            //20/1=20; our, ours
            if (this.perspective == 1 || other.Perspective == 1) return 1;
            if (this.perspective == 2 || other.Perspective == 2) return 2;
            return 3;
        }

        public override void selfRegisterAll()
        {
            base.selfRegisterAll();

            // register garments
            this.autoRegister(this.garments);

            // register traits
            this.autoRegister(this.traits);

            //
        }

        private string getConditional(int tense)
        {

            if (!this.isPov && this.perspective == 3)
            {

                Dictionary<string, ActionParser> dic = this.getDictionaryOfRegisteredObjects();
                try
                {
                    return dic["conditionals"].interpret("f", tense);

                }
                catch (Exception e)
                {

                }

                return "";
            }
            
            return "";
        }

        private string getRandomTrait(string code, int tense, int groupId = 0)
        {
            if (this.traits.Count == 0) return "";

            List<Trait> traitList = new List<Trait>();

            foreach (Trait trait in this.traits)
            {
                if (trait.IsUsed)
                {
                    if (groupId == -1)
                    {

                        traitList.Add(trait);
                    }
                    else
                    {
                        if (trait.GroupId == groupId) traitList.Add(trait);
                    }
                }
            }

            if (traitList.Count == 0) return "";

            Trait randomTrait = null;// (Trait)traitList[r.Next(traitList.Count)];
            string adj = "";
            string randomAdjective = "";
            if (code.IndexOf('R') > -1)
            {
                for (int i = 0; i < 100; i++)
                {
                    randomTrait = (Trait)traitList[r.Next(traitList.Count)];
                    if (randomTrait.Adjectives is ListDrawString)
                    {
                        randomAdjective = (randomTrait.Adjectives as ListDrawString).draw();
                        if (!String.IsNullOrWhiteSpace(randomAdjective))
                        {
                            break;
                        }
                    }
                }

                if (String.IsNullOrWhiteSpace(randomAdjective))
                {
                    return "";
                }
                else
                {
                    int x = (int)r.Next(100);
                    //experimental. Passing "the" every time for the moment. 
                    string ret = (x > 100) ? this.interpret("pa", tense) : "the";
                    ret += " " + randomAdjective + " " + randomTrait.interpret("k", tense);
                    return ret;

                }
            }
            if (code.IndexOf('M') > -1)
            {
                randomTrait = (Trait)traitList[r.Next(traitList.Count)];
                if (randomTrait.Adjectives is ListDrawString)
                {
                    randomAdjective = (randomTrait.Adjectives as ListDrawString).draw();
                }
                int x = (int)r.Next(100);
                string ret = this.interpret("pa", tense);
                ret += " " + randomAdjective + " " + randomTrait.interpret("k", tense);
                return ret.Replace("  ", " ");
            }
            randomTrait = (Trait)traitList[r.Next(traitList.Count)];
            if (code.Equals("ID"))
            {
                return randomTrait.getId();
            }
            //if (code.IndexOf('C') > -1)
            //{
            //    adj = randomTrait.Colour;
            //}

            // ensure as much as possible that all the requirements of the user is met. 
            for (int j = 0; j < 100; j++)
            {
                randomTrait = (Trait)traitList[r.Next(traitList.Count)];
                if (code.IndexOf('A') > -1 && randomTrait.Adjectives.Count == 0) continue;
                if (code.IndexOf('S') > -1 && randomTrait.States.Count == 0) continue;
                //if (code.IndexOf('K') > -1 && randomTrait.Aliases.Count == 0) continue;
                break;
            }
            // ensure at least a moniker.
            //if (code.IndexOf('K') > -1 && randomTrait.Aliases.Count == 0) return "";


            if (code.IndexOf('A') > -1)
            {
                for (int i = 0; i < 100; i++)
                {
                    if (randomTrait.Adjectives is ListDrawString)
                    {
                        randomAdjective = (randomTrait.Adjectives as ListDrawString).draw();
                        if (!String.IsNullOrWhiteSpace(randomAdjective))
                        {
                            break;
                        }
                    }
                }
                adj += " " + randomAdjective;
            }
            if (code.IndexOf('S') > -1)
            {
                for (int i = 0; i < 100; i++)
                {
                    if (randomTrait.States is ListDrawString)
                    {
                        randomAdjective = (randomTrait.States as ListDrawString).draw();
                        if (!String.IsNullOrWhiteSpace(randomAdjective))
                        {
                            break;
                        }
                    }
                }
                adj += " " + randomAdjective;
            }
            if (code.IndexOf('K') > -1)
            {
                adj += " " + randomTrait.interpret("k", tense);
            }

            return adj.Trim();
        }

        // returns -1 if no code is found or misformed.
        private int getGarmentIdFromScriptCode(string code) {

            Regex reg = new Regex(@"\d$");

            string gid = "";
            int groupId = -1;

            // Regex = "^G(ID|C|A|F){1,3}\d*$"

            // If the code is a digit, iterate all the matches and concat it to the gid string.
            // it ignores all the string characters and concats numbers regardless of where they are.
            // However, the regex that allowed the code to reach this point is formed as above and prevents funky syntax. Ex GID22
            while (reg.IsMatch(code))
            {
                gid = code.Substring(code.Length - 1, 1) + gid;
                code = code.Remove(code.Length - 1, 1);

            }


            // If the GID (a string of an integer digit) is not empty...
            if (!String.IsNullOrWhiteSpace(gid)) groupId = int.Parse(gid);

            return groupId;
        }


        protected List<T> collectListFromGroupId<T>(int groupId, List<T> biggerList) where T : Matter
        {
            List<T> list = new List<T>();
            foreach (T item in biggerList)
            {
                // Item must be marked as usable for random.
                if (item.IsUsed)
                {
                    // Secret non-implemented bypass? ;; -1 Not yet accessible via Gui.
                    if (groupId == -1)
                        list.Add(item);
                    else
                        // Add all garments, whose groupId matches the one in the first parameter passed to this function, to a list.  
                        if (item.GroupId == groupId) list.Add(item);
                }
            }


            return list;
        }


        private Garment lastRandomGarment = null;
        private Garment getLastRandomlySelectedGarment()
        {
            return this.lastRandomGarment;
        }
        private string getRandomGarment(string code, int groupId = 0)
        {
            if (this.garments.Count == 0) return "";
            //Garment g = (Garment)this.garments[r.Next(this.garments.Count)];

            List<Garment> selectedGarments = new List<Garment>();
            //Regex reg = new Regex(@"\d$");

            string gid = "";

            groupId = getGarmentIdFromScriptCode(code);



            // Regex = "^G(ID|C|A|F){1,3}\d*$"

            // If the code is a digit, iterate all the matches
            //while (reg.IsMatch(code))
            //{
            //gid = code.Substring(code.Length - 1, 1) + gid;
            //code = code.Remove(code.Length - 1, 1);

            //}


            // If the GID (a string of an integer digit) is not empty...
            //if(!String.IsNullOrWhiteSpace(gid)) groupId = int.Parse(gid);



            // In a list, collect all the garments with the groupId
            foreach (Garment garment in this.garments)
            {
                if (garment.IsUsed)
                {
                    // Secret non-implemented bypass? ;; -1 Not yet accessible via Gui.
                    if (groupId == -1)
                        selectedGarments.Add(garment);
                    else
                        // Add all garments, whose groupId matches the one in the first parameter passed to this function, to a list.  
                        if (garment.GroupId == groupId) selectedGarments.Add(garment);
                }
            }


            // if the list is empty...
            if (selectedGarments.Count == 0) return "";


            // Get a random garment
            Garment g = (Garment)selectedGarments[r.Next(selectedGarments.Count)];
            string adj = "";

            if (g == null)
            {
                // if g is null, something serious happened.
                return null;
            }

            this.lastRandomGarment = g;

            // if the code is 'ID', return the garment's id
            if (code.Equals("ID"))
            {
                return g.getId();
            }


            // If the code has 'A', return an adjective associated to the garment.
            if (code.IndexOf('A') > -1)
            {
                if (g.Adjectives.Count > 0)
                {
                    if (g.Adjectives is ListDrawString)
                    {
                        adj += " " + (g.Adjectives as ListDrawString).draw();
                    }
                    else
                        adj += " " + g.Adjectives[r.Next(g.Adjectives.Count)];

                }
            }

            // If the code has a 'C', concat an ajective to the ajective string. 
            if (code.IndexOf('C') > -1) {
                adj += " " + g.Colour;
            }


            // If the code has an 'F', concat the fabric of the garment to the ajective string. 
            if (code.IndexOf('F') > -1)
            {
                adj += " " + g.FabricType;
            }


            // Return the values. 
            return (adj + " " + g.Name).Trim();
        }

        public override Dictionary<string, string> help()
        {
            Dictionary<string, string> d = base.help();
            d.Add("FN", "Gets the first name.");
            d.Add("MN", "Gets the middle name.");
            d.Add("LN", "Gets the family name.");
            d.Add("G", "Gets a random garment.");
            d.Add("GC", "Gets a garment with the colour.");
            d.Add("GF", "Gets a garment with the fabric type.");
            d.Add("GA", "Gets a garment with an adjective.");
            d.Add("GCA", "Gets a garment with the colour and adjective.");
            d.Add("GCF", "Gets a garment with the colour and fabric.");
            d.Add("GCFA", "Gets a garment with the colour, fabric, and adjective. G must come first, but order is not important after that.");
            d.Add("PP", "Gets a personal possesive pronoun.");
            d.Add("SP", "Gets a subject pronoun.");
            d.Add("OP", "Gets an object pronoun.");
            d.Add("PA", "Gets a possessive adjective pronoun.");
            d.Add("RP", "Gets a reflexive pronoun.");
            d.Add("T", "Gets a random trait.");
            d.Add("T#", "Gets a random trait from a specific groudId number identifier. GroupId must follow the T.");
            d.Add("TC", "Gets a random trait with its colour.");
            d.Add("TA", "Gets a random trait with a random adjective.");
            d.Add("TK", "Gets a random trait's alias");
            d.Add("T#M", "Gets a random trait starting with possessive pronoun.");
            d.Add("TCAK", "Gets a random trait's alias with colour and random adjective.");
            d.Add("T2CA", "Gets a random trait's alias in groupId 2 with colour and random adjective and alias. GroupId must follow the T.");
            d.Add("CLOTH", "Gets the last garment used, and does a '$' code from it.");
            d.Add("MYCLOTH", "Gets the YSR code from the last garment selected.");



            return d;
        }

        #endregion

        public override DBbase getDBObejct(DBbase d)
        {

            DBHuman h = d as DBHuman;
            if (h == null) h = new DBHuman();

            h.familyName = this.familyName;
            h.firstName = this.firstName;
            h.middleName = this.middleName;
            h.age = this.Age;
            h.hasVagina = this.HasVagina ? 1 : 0;
            h.height = this.Height;
            h.height = this.Height;
            h.species = this.Spieces;
            h.isAnIt = this.IsAnIt ? 1 : 0;
            h.isMany = this.IsMany ? 1 : 0;
            h.is_pov = this.isPov ? 1 : 0;
            h.perspectiveId = this.perspective;
            h.scripts = String.Join("|", this.scripts.getExpandedList().ToArray());

            h.charactersId = this.charactersId;
            //if (this.getUserModifiedCharacter() != null)
            //{
            //    h.usercharactersId = this.getUserModifiedCharacter().id;
            //}

            h.hasVagina_readonly = this.hasVagina_readonly ? 1 : 0;
            h.familyName_readonly = this.familyName_readonly ? 1 : 0;
            h.firstName_readonly = this.firstName_readonly ? 1 : 0;
            h.isAnIt_readonly = this.isAnIt_readonly ? 1 : 0;
            h.isMany_readonly = this.isMany_readonly ? 1 : 0;
            h.middleName_readonly = this.middleName_readonly ? 1 : 0;
            h.perspective_readonly = this.perspective_readonly ? 1 : 0;
            h.scripts_readonly = this.scripts_readonly ? 1 : 0;

            return base.getDBObejct(h);
        }

        public override void setFromDBObject(DBbase o)
        {
            base.setFromDBObject(o);
            DBHuman h = o as DBHuman;
            this.Age = h.age;
            this.firstName = h.firstName;
            this.middleName = h.middleName;
            this.familyName = h.familyName;
            this.HasVagina = h.hasVagina == 1 ? true : false;
            this.Height = h.height;
            this.Weight = h.weight;
            this.Spieces = h.species;
            this.IsMany = h.isMany == 1 ? true : false;
            this.IsAnIt = h.isAnIt == 1 ? true : false;
            this.isPov = h.is_pov == 1 ? true : false;
            this.perspective = h.perspectiveId;
            this.charactersId = h.charactersId;
            //if (this.getUserModifiedCharacter() != null)
            //{
            //    this.getUserModifiedCharacter().charactersId = h.usercharactersId;
            //}

            this.hasVagina_readonly = h.hasVagina_readonly == 1 ? true : false;
            this.familyName_readonly = h.familyName_readonly == 1 ? true : false;
            this.firstName_readonly = h.firstName_readonly == 1 ? true : false;
            this.isAnIt_readonly = h.isAnIt_readonly == 1 ? true : false;
            this.isMany_readonly = h.isMany_readonly == 1 ? true : false;
            this.middleName_readonly = h.middleName_readonly == 1 ? true : false;
            this.perspective_readonly = h.perspective_readonly == 1 ? true : false;
            this.scripts_readonly = h.scripts_readonly == 1 ? true : false;

            ListDrawString.SetStringListFromCSV(this.scripts, h.scripts);
        }

        public override bool Equals(System.Object obj)
        {
            // If parameter is null return false.
            if (obj == null)
            {
                return false;
            }

            // If parameter cannot be cast to Point return false.
            Human p = obj as Human;
            if ((System.Object)p == null)
            {
                return false;
            }

            // check for reference equality.
            if (System.Object.ReferenceEquals(this, p)) return true;

            // Return true if the fields match:

            return
                //(this.isAnIt == p.isAnIt) &&
                //(this.IsMany == p.IsMany) &&
                //(this.middleName.Equals(p.middleName)) &&
                //(this.familyName.Equals(p.familyName)) &&
                //(this.firstName.Equals(p.firstName)) &&
                (this.getFullId().Equals(p.getFullId())) // &&
                                                         //(this.hasVagina == p.hasVagina) &&
                                                         //(this.perspective == p.perspective) &&
                                                         //(this.Age == p.Age)
                ;
        }

        private enum GarmentTypes
        {
            top_under,
            top_over,
            bottom_under,
            bottom_over,
            socks,
            shoes,
            bra,
            jacket,
            scarf,
            hat,
            eyewear,
            necklace,
            bracelet,
            ankle_bracelet,
            waist_ring,
            finger_ring,
            belt,
            ear_ring,
            purse,
            backpack


        }

        private class Connectors
        {
            public string Name = "";
            public string MaleTrait = "";
            public string FemaleTrait = "";

            public Connectors()
            {

            }

            public Connectors(string name, string maleTrait, string femaleTrait)
            {
                this.Name = name;
                this.MaleTrait = maleTrait;
                this.FemaleTrait = femaleTrait;
            }
        }

        public static Human factory(bool setDefaults, int globalPercentage, bool isFemale = true)
        {
            Human person = new Human();
            if (setDefaults) { 
                person.FirstName = Human.defaultFirstName;
                person.MiddleName = Human.defaultMiddleName;
                person.FamilyName = Human.defaultLastName;
                person.GlobalPercentage = globalPercentage;
                person.Id = Human.defaultScriptId;

                person.AddAdjective("[this.c]");
                person.AddAdjective("[this.z]");
            }
            //person.AddAlias("[this.fn]");

            string[] goodTraits = { "body", "tits", "butt", "cleavage", "curves", "eyes", "face","figure","hair","hips","legs", "lips","skin","thighs","waist"  };
            string[] traits = { "abs", "arm", "bulge", "arms", "ass cheeks", "back", "asshole", "back",   "belly button", "feet",  "finger", "fingernails", "fingers", "fingertips",  "hand", "hands", "head", "hip",  "juices", "knees",  "mouth", "nipples", "palm", "pussy",  "pussy lips",  "stomach", "sweat",  "throat", "toes", "tongue", "voice",  "pectorials", "biceps", "triceps", "thigh gap", "bikini bridge", "penis", "sweat", "throat", "bulge", "nose" };
            string[] garments = { "footwear", "gloves", "scarf", "hat", "glasses", "outfit", "suit", "pants", "shirt", "bra", "corset", "earrings", "ring", "ankle bracelet", "bracelet", "underwear", "socks", "stockings", "necklace", "waist clincher", "dildo" };

            //string[] connector = { "crotch", "crotch_arousal", "masturbation", "crotch_orgasm", "breast_caress", "breast_size", "waist_size", "hip_size" };

            string[] traitsThatArePlural = { "tits", "curves", "eyes", "hips", "legs", "lips", "thighs", "abs", "arms", "feet", "ass cheeks", "fingernails", "fingers", "fingertips", "hands", "juices", "knees", "nipples", "pussy lips", "toes", "pectorials", "biceps", "triceps" };
            string[] garmentsThatArePlural = { "gloves", "footwear", "gloves", "glasses", "pants", "earrings", "socks", "stockings" };


            Dictionary<string, GarmentTypes> garmentTypes = new Dictionary<string, GarmentTypes>();

            List<Connectors> connectors = new List<Connectors>();
            connectors.Add(new Connectors("crotch", "penis", "pussy"));
            connectors.Add(new Connectors("flamingo", "penis", "tits"));
            connectors.Add(new Connectors("waistsize", "biceps", "waist"));
            connectors.Add(new Connectors("hipsize", "shoulders", "hips"));
            connectors.Add(new Connectors("fuckhole", "asshole", "pussy"));
            connectors.Add(new Connectors("penetrator", "penis", "dildo"));
            

            foreach(string trait in traits)
            {
                string formattedString = trait.Trim().Replace(" ", "_");
                factoryAddTrait(person, formattedString, 1);
            }
            foreach (var c in connectors)
            {
                string formattedString = c.Name.Trim().Replace(" ", "_");
                //factoryAddTrait(person, formattedString, 47);
                person.addTrait(Trait.createConjunction(formattedString, "gender==male", c.MaleTrait, c.FemaleTrait));
            }

            foreach (string trait in goodTraits)
            {
                string formattedString = trait.Trim().Replace(" ", "_");
                factoryAddTrait(person, formattedString, 0);
            }

            foreach (string garment in garments)
            {
                string formattedString = garment.Trim().Replace(" ", "_");
                factoryAddGarment(person, formattedString);
            }

            foreach (string str in traitsThatArePlural)
            {
                foreach(Trait t in person.getTraitsAsTraitsList())
                {
                    if (t.Id.Equals(str))
                    {
                        t.IsMany = true;
                        t.setPronoun(Pronouns.Pronoun.They);
                    }
                }
            }

            //foreach (var connectingTrait in connectors)
            //{
            //    foreach (Trait t in person.getTraitsAsTraitsList())
            //    {
            //        if (t.Id.Equals(connectingTrait.Name))
            //        {
            //            t.AddAjective("[owner.gender==male?[owner." + connectingTrait.MaleTrait + ".A-A]:[owner." + connectingTrait.FemaleTrait + ".A-A]]");
            //            t.addAdverb("[owner.gender==male?[owner." + connectingTrait.MaleTrait + ".V-A]:[owner." + connectingTrait.FemaleTrait + ".V-A]]");
            //            t.AddAlias("[owner.gender==male?[owner." + connectingTrait.MaleTrait + ".K-A]:[owner." + connectingTrait.FemaleTrait + ".K-A]]");
            //            t.addState("[owner.gender==male?[owner." + connectingTrait.MaleTrait + ".S-A]:[owner." + connectingTrait.FemaleTrait + ".S-A]]");
            //            t.addWho("[owner.gender==male?[owner." + connectingTrait.MaleTrait + ".F-A]:[owner." + connectingTrait.FemaleTrait + ".F-A]]");
            //        }
            //    }
            //}

            foreach (string str in garmentsThatArePlural)
            {
                foreach (Garment g in person.getGarmentsAsGarmentList())
                {
                    if (g.Id.Equals(str)) 
                    {
                        g.IsMany = true;
                        g.setPronoun(Pronouns.Pronoun.They);
                    }
                }
            }

            Human.addCouldTrait(person);

            return person;
        }

        private static void addCouldTrait(Human person)
        {
            Trait could = new Trait("could");
            could.AddAlias("[owner.v(have)] the ability to");
            could.AddAlias("[owner.v(be)] able to");
            could.AddAlias("[owner.v(be)] capable to");
            could.AddAlias("[owner.v(be)] equal to the task of");
            could.AddAlias("[owner.v(have)] what it [owner.asit.v(take)] to");
            could.AddAlias("[owner.v(have)] the power to");
            could.AddAlias("[owner.v(have)] the means to");
            could.AddAlias("[owner.v(have)] the opportunity to");
            could.AddAlias("[owner.v(have)] the competency to");
            could.AddAlias("[owner.v(have)] the capability to");
            could.AddAlias("[owner.v(have)] the chance to");
            could.AddAlias("[owner.v(have)] the option to");
            could.AddAlias("[owner.v(have)] the possibility to");
            //could.AddAlias("");

            could.addAdverb("[owner.v(-have)] the ability to");
            could.addAdverb("[owner.v(-be)] able to");
            could.addAdverb("[owner.v(-be)] capable to");
            could.addAdverb("[owner.v(-be)] equal to the task of");
            could.addAdverb("[owner.v(-have)] what it [owner.asit.v(-take)] to");
            could.addAdverb("[owner.v(-have)] the power to");
            could.addAdverb("[owner.v(-have)] the means to");
            could.addAdverb("[owner.v(-have)] the competency to");
            could.addAdverb("[owner.v(-have)] the opportunity to");
            could.addAdverb("[owner.v(-have)] the capability to");
            could.addAdverb("[owner.v(-have)] the possibility to");
            could.addAdverb("[owner.v(-have)] the likeliness to");
            could.addAdverb("[owner.v(-have)] the competency to");
            //could.addAdverb("");

            could.GroupId = 53;

            person.addTrait(could);
        }

        private static void factoryAddTrait(Human person, string traitName, int groupNumber)
        {
            Trait trait = new Trait(traitName);
            trait.Id = traitName;
            trait.GroupId = groupNumber;
            //trait.Size = "";
            //trait.addState("[this.c]");
            //trait.addState("[this.z]");
            trait.AddAlias("[this.n]");


            person.addTrait(trait);
        }

        private static void factoryAddGarment(Human person, string garmentName)
        {
            Garment garment = new Garment(garmentName);
            garment.Id = garmentName;
            garment.addState("[this.c]");
            garment.addState("[this.z]");
            garment.Location = "on [this.body.my.yar]";
            garment.Size = "tight";
            garment.Colour = "white";
            garment.AddAlias("[this.n]");
            garment.addWho("midClause => , which [this.v(be).~ located.l],");
            garment.addWho("startClause => Located [this.l],");
            garment.addGarmentDescription("[owner.sp.v(wear)] [this.art.yar]");
            garment.addGarmentDescription("[owner.sp.v(wear)] [this.art.yar]");
            garment.addGarmentDescription("[owner.sp.v(wear)] [this.yar]");
            garment.addGarmentDescription("[owner.sp.v(wear)] [this.yar]");
            person.addGarment(garment);
        }

        public void merge(Human other)
        {
            merge(this, other);

            //if (other == null) return;
            //foreach (var item in other.Adjectives) this.AddAdjective(item);
            //foreach (var item in other.Adverbs) this.addAdverb(item);
            //foreach (var item in other.Aliases) this.AddAlias(item);
            //foreach (var item in other.Scripts) this.addScripts(item);
            //foreach (var item in other.States) this.addState(item);
            //foreach (var item in other.Who) this.addWho(item);

            //var list = this.getTraitsAsTraitsList();
            //foreach (var trait in other.getTraitsAsTraitsList())
            //{
            //    if (list.Contains(trait))
            //    {
            //        Trait t = list[list.IndexOf(trait)];
            //        t.combine(trait);
            //    }
            //    else
            //    {
            //        list.Add(trait);
            //    }
            //}

            //var garmentList = this.getGarmentsAsGarmentList();
            //foreach (var garment in other.getGarmentsAsGarmentList())
            //{
                
            //    if (garmentList.Contains(garment))
            //    {
            //        Garment g = garmentList[garmentList.IndexOf(garment)];
            //        g.combine(garment);
            //    }
            //    else
            //    {
            //        garmentList.Add(garment);
            //    }
            //}
            
        }

        public enum Anonymous
        {
            AsItMany,
            AsIt,
            As3rd,
            As3rdMany,
            As3rdMale,
            As3rdFemale

        }

        public static Human factory(Anonymous anonymous)
        {
            Human third = new Human();

            // set the script id multiAdjectiveNounPhrase(code, "$", "the");
            Character c = new Character(-1, anonymous.ToString().ToLower());
            c.IsImportant = false;
            third.Character = c;
            //UserCharacter uc = new UserCharacter(-1);
            //third.setUserModifiedCharacter(uc);
            anonymousUniversalSet(third);
            anonymousSetParticulars(third, anonymous);
            Human.addCouldTrait(third);

            return third;
        }

        private static void anonymousSetParticulars(Human third, Anonymous anonymous)
        {
            third.IsMany = false;
            third.IsAnIt = false;
            third.HasVagina = false;
            third.setPronoun(Pronouns.Pronoun.It);

            switch (anonymous)
            {
                case Anonymous.As3rdFemale:
                    third.HasVagina = true;
                    third.AddAlias("woman");
                    third.setPronoun(Pronouns.Pronoun.Female);
                    break;
                case Anonymous.As3rdMale:
                    third.AddAlias("man");
                    third.setPronoun(Pronouns.Pronoun.Male);
                    break;
                case Anonymous.As3rdMany:
                    third.IsMany = true;
                    third.setPronoun(Pronouns.Pronoun.They);
                    break;
                case Anonymous.AsIt:
                    third.IsAnIt = true;
                    break;
                case Anonymous.AsItMany:
                    third.IsAnIt = true;
                    third.IsMany = true;
                    third.setPronoun(Pronouns.Pronoun.They);
                    break;
                case Anonymous.As3rd:
                    third.IsAnIt = true; // to get the pronouns.
                    third.setPronoun(Pronouns.Pronoun.SingularThey);
                    break;
            }
        }

        private static void anonymousUniversalSet(Human third)
        {
            third.Perspective = 3;
            third.AddAlias("someone");
            third.AddAlias("somebody");
            third.AddAlias("person");
            third.FirstName = "someone";
        }

        // remove all "universal" traits that are hardcoded, and referencial ones.
        public void removeUniveralTraits()
        {

            this.removeTrait("conditionals");
            this.removeTrait("could");


            // remove references
            var list = getTraitsThatAreReferencial();

            foreach (var item in list)
            {
                this.removeTrait(item);
            }

        }

        private List<Trait> getTraitsThatAreReferencial()
        {
            List<Trait> list = new List<Trait>();
            foreach (var item in this.getTraitsAsTraitsList())
            {

                if (item.getId().ToLower().StartsWith("ref"))
                {
                    list.Add(item);
                }
            }

            return list;
        }

        public List<string> getReversePronounList()
        {
            List<string> list = new List<string>();
            int adjectiveCount = this.getAdjectives().Length;
            int aliasCount = this.getAliases().Length;
            int stateCount = this.getStates().Length;


            list.Add(this.getFullId() + ".FN.LN");

            // if there are aliases
            if (aliasCount > 0)
            {
                if (adjectiveCount > 0)
                {
                    if (adjectiveCount > 2) list.Add(this.getFullId() + ".A3.K");
                    if (adjectiveCount > 1) list.Add(this.getFullId() + ".A2.K");
                    list.Add(this.getFullId() + ".$.F");
                    list.Add(this.getFullId() + ".@.F");
                    list.Add(this.getFullId() + ".$");
                    list.Add(this.getFullId() + ".@");
                    list.Add(this.getFullId() + ".$$");
                    list.Add(this.getFullId() + ".@@");
                    list.Add(this.getFullId() + ".SA.K");
                }

                if (stateCount > 0)
                {
                    if (stateCount > 2) list.Add(this.getFullId() + ".S3.K");
                    if (stateCount > 1) list.Add(this.getFullId() + ".S2.K");
                    if(adjectiveCount > 0) list.Add(this.getFullId() + ".AS.K");

                }

                list.Add(this.getFullId() + ".K");

                if (adjectiveCount > 0)
                {
                    list.Add(this.getFullId() + ".++");
                    list.Add(this.getFullId() + ".+");
                    list.Add(this.getFullId() + ".%");
                    list.Add(this.getFullId() + ".%%");
                }
            }

            
            list.Add(this.getFullId() + ".SPP");
            list.Add(this.getFullId() + ".N");
            
            
            
            

            // Remove the unnessesary traits.
            this.removeUniveralTraits();

            foreach (Trait t in this.getTraitsAsTraitsList())
            {
                adjectiveCount = t.getAdjectives().Length;
                aliasCount = t.getAliases().Length;
                stateCount = t.getStates().Length;

                if (adjectiveCount > 0)
                {
                    list.Add(t.getFullId() + ".my.A3.K");
                    list.Add(t.getFullId() + ".my.A2.K");
                    list.Add(t.getFullId() + ".my.YAR");
                    list.Add(t.getFullId() + ".$");
                    list.Add(t.getFullId() + ".@");
                    list.Add(t.getFullId() + ".$$");
                    list.Add(t.getFullId() + ".@@");
                    
                }

                if (stateCount > 0)
                {
                    list.Add(t.getFullId() + ".my.S3.K");
                    list.Add(t.getFullId() + ".my.S2.K");
                    list.Add(t.getFullId() + ".my.YSR");
                    list.Add(t.getFullId() + ".my.SA.K");
                    if (adjectiveCount > 0) list.Add(t.getFullId() + ".my.AS.K");
                }

                if (adjectiveCount > 0)
                {
                    list.Add(t.getFullId() + ".++");
                    list.Add(t.getFullId() + ".+");
                    list.Add(t.getFullId() + ".%");
                    list.Add(t.getFullId() + ".%%");
                }
                
                list.Add(t.getFullId() + ".my.N");
                list.Add(t.getFullId() + ".my.K");
                
            }

            foreach (Garment t in this.getGarmentsAsGarmentList())
            {
                adjectiveCount = t.getAdjectives().Length;
                aliasCount = t.getAliases().Length;
                stateCount = t.getStates().Length;
                int garmentCount = t.getGarmentsArray().Length;

                if (adjectiveCount > 0)
                {
                    if (garmentCount > 0)
                    {
                        list.Add(t.getFullId() + ".my.A3.K.GT");
                    }

                    


                    list.Add(t.getFullId() + ".my.A3.K");
                    list.Add(t.getFullId() + ".my.A2.K");
                    list.Add(t.getFullId() + ".my.YAR");
                    list.Add(t.getFullId() + ".$");
                    list.Add(t.getFullId() + ".@");
                    list.Add(t.getFullId() + ".$$");
                    list.Add(t.getFullId() + ".@@");

                }

                if (stateCount > 0)
                {
                    list.Add(t.getFullId() + ".my.S3.K");
                    list.Add(t.getFullId() + ".my.S2.K");
                    list.Add(t.getFullId() + ".my.YSR");
                    list.Add(t.getFullId() + ".my.SA.K");
                    if (adjectiveCount > 0) list.Add(t.getFullId() + ".my.AS.K");
                }

                if (adjectiveCount > 0)
                {
                    list.Add(t.getFullId() + ".++");
                    list.Add(t.getFullId() + ".+");
                    list.Add(t.getFullId() + ".%");
                    list.Add(t.getFullId() + ".%%");
                }

                list.Add(t.getFullId() + ".my.N");
                list.Add(t.getFullId() + ".my.K");

                
            }

            return list;
        }


        public void merge(Human humanToMergeTo, Human humanToMerge)
        {
            if (humanToMergeTo == null || humanToMerge == null) return;
            base.merge(humanToMergeTo, humanToMerge);

            // do it by reference
            //merge the lists
            humanToMergeTo.addScripts(humanToMerge.Scripts.ToArray());

            foreach (Garment g in humanToMerge.garments)
            {
                humanToMergeTo.mergeGarment(g.getClone() as Garment);
            }

            foreach (Trait t in humanToMerge.traits)
            {
                humanToMergeTo.mergeTrait(t.getClone() as Trait);
            }

        }

        //else if (cmd.ToLower().Equals("asmany"))
        //{
        //    if (actor is Human)
        //    {
        //        Human thisHuman = (actor as Human).getClone() as Human;


        //        if (thisHuman.IsAnIt)
        //        {
        //            thisHuman.IsMany = !thisHuman.IsMany;
        //            actor = thisHuman;
        //        }
        //        else
        //        {
        //            Human otherHuman = null;
        //            if (String.IsNullOrWhiteSpace(thisHuman.Other)) return new KeyValuePair<ActionParser, Queue<string>>(actor, queue);
        //            ActionParser ap = (ActionParser)this.storyMoment.find(thisHuman.Other);
        //            if (ap is Human)
        //            {
        //                otherHuman = ap as Human;
        //            }
        //            else
        //                return new KeyValuePair<ActionParser, Queue<string>>(actor, queue);


        //            int perspective = (otherHuman.Perspective * 3) + (thisHuman.Perspective * 3);
        //            Human many = (actor as Human).getClone() as Human;
        //            many.IsMany = true;
        //            if (perspective == 18)
        //                many.Perspective = 3;
        //            else if (perspective < 13)
        //                many.Perspective = 1;
        //            else
        //                many.Perspective = 2;


        //            actor = many;
        //        }
        //    }
        //}
        //else if (cmd.ToLower().Equals("it") || cmd.ToLower().Equals("asit") || cmd.ToLower().Equals("asanit") || cmd.ToLower().Equals("asthing"))
        //{
        //    if (actor is Human)
        //    {
        //        Human thisHuman = (actor as Human);
        //        if (!thisHuman.IsAnIt)
        //        {
        //            Human it = new Human();
        //            it.Character = thisHuman.Character;
        //            it.IsMany = false;
        //            it.IsAnIt = true;
        //            it.Perspective = 3;
        //            actor = it;
        //        }
        //    }

        //}
        //else if (cmd.ToLower().Equals("as3rd") || cmd.ToLower().Equals("3rd"))
        //{
        //    if (actor is Human)
        //    {
        //        Human third = new Human();
        //        third.Character = (actor as Human).Character;
        //        third.IsMany = true;
        //        third.IsAnIt = false;
        //        third.HasVagina = false;
        //        third.Perspective = 3;
        //        third.AddAlias("someone");
        //        third.AddAlias("somebody");
        //        third.AddAlias("person");
        //        third.FirstName = "someone";
        //        actor = third;
        //    }

        //}
        //else if (cmd.ToLower().Equals("as3rdm") || cmd.ToLower().Equals("3rdm"))
        //{
        //    if (actor is Human)
        //    {
        //        Human third = new Human();
        //        third.Character = (actor as Human).Character;
        //        third.IsMany = false;
        //        third.IsAnIt = false;
        //        third.HasVagina = false;
        //        third.Perspective = 3;
        //        third.AddAlias("someone");
        //        third.AddAlias("somebody");
        //        third.AddAlias("person");
        //        third.AddAlias("man");
        //        third.FirstName = "someone";
        //        actor = third;
        //    }

        //}
        //else if (cmd.ToLower().Equals("as3rdf") || cmd.ToLower().Equals("3rdf"))
        //{
        //    if (actor is Human)
        //    {
        //        Human third = new Human();
        //        third.Character = (actor as Human).Character;
        //        third.IsMany = false;
        //        third.IsAnIt = false;
        //        third.HasVagina = true;
        //        third.Perspective = 3;
        //        third.AddAlias("someone");
        //        third.AddAlias("somebody");
        //        third.AddAlias("person");
        //        third.AddAlias("woman");
        //        third.FirstName = "someone";
        //        actor = third;
        //    }

        //}

    }
}
﻿using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Web;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text.RegularExpressions;
using System.Linq.Expressions;
using System.Reflection;
using StoryHelper.Classes;
using StoryHelperLibrary.Helpers;
using Newtonsoft.Json;

namespace StoryHelper.Classes
{

    public abstract class PropertySetable
    {

        protected const string regexSetProperty = "^get[a-zA-z]+\\(\\)$";
        protected const string regexGetProperty = @"^set[a-zA-z]+\((\d+|[a-zA-Z .!?_]+)\)$";
        protected readonly Regex regexSet = new Regex(regexSetProperty, RegexOptions.IgnoreCase);
        protected readonly Regex regexGet = new Regex(regexGetProperty, RegexOptions.IgnoreCase);
        

        protected string setProperty(string codeFunctionName)
        {
            if (regexSet.IsMatch(codeFunctionName))
            {
                string stringPropertyName = codeFunctionName.Remove(0, 3);
                int start = stringPropertyName.IndexOf('(');
                if (start == -1) return codeFunctionName;
                stringPropertyName = stringPropertyName.Substring(0, start);
                string stringNumber = codeFunctionName.Replace("set" + stringPropertyName + "(", "");
                stringNumber = stringNumber.Remove(stringNumber.Length - 1, 1);
                int value = 100;
                bool success = int.TryParse(stringNumber, out value);
                if (success)
                {
                    success = setPropertyValue(stringPropertyName, value);
                    if (success)
                        return "";
                    else
                        return codeFunctionName;
                }
                else
                {
                    success = setPropertyValue(stringPropertyName, stringNumber);
                    if (success)
                        return "";
                    else
                        return codeFunctionName;
                }
            }

            return codeFunctionName;
        }

        protected string getProperty(string codeFunctionName)
        {
            if (regexGet.IsMatch(codeFunctionName))
            {
                string stringPropertyName = codeFunctionName.Remove(0, 3);
                int start = stringPropertyName.IndexOf('(');
                if (start == -1) return codeFunctionName;
                stringPropertyName = stringPropertyName.Substring(0, start);
                string success = getPropertyValue(stringPropertyName);
                if (!String.IsNullOrWhiteSpace(success))
                    return success;
                else
                    return "";
            }



            return "";
        }

        protected string getPropertyValue(string propertyName)
        {
            PropertyInfo[] properties = this.GetType().GetProperties();
            foreach (PropertyInfo property in properties)
            {
                if (property.Name.Equals(propertyName))
                {
                    try
                    {
                        string value = DBProperties.GetPropertyValue<object>(this, property.Name).ToString();
                        //property.SetValue(this, Convert.ChangeType(propertyValue, property.PropertyType), null);
                        if (String.IsNullOrWhiteSpace(value)) return "";
                        return value;
                    }
                    catch (Exception ex)
                    {
                        return "";
                    }
                }
            }

            return "";
        }

        protected bool setPropertyValue(string propertyName, object propertyValue)
        {
            PropertyInfo[] properties = this.GetType().GetProperties();
            foreach (PropertyInfo property in properties)
            {
                if (property.Name.Equals(propertyName))
                {
                    try
                    {
                        property.SetValue(this, Convert.ChangeType(propertyValue, property.PropertyType), null);
                        return true;
                    }
                    catch (Exception ex)
                    {
                        return false;
                    }
                }
            }

            return false;
        }
    }

    public abstract class Commandable : PropertySetable
    {
        bool delegatesIsSet = false;
        public Commandable()
        {
            this.setDelegates();
            delegatesIsSet = true;
        }

        protected string startCommand = "[";
        protected string endCommand = "]";

        public string interpret(string[] code)
        {
            if (!this.delegatesIsSet) throw new Exception("Delegates Not Set!");
            string[] returnValues = new string[code.Length];
            int x = 0;
            foreach (string str in code)
            {
                int index = -1;
                index = str.IndexOf('.');
                if (index > -1)
                {
                    string[] cmds = str.Split(new char[] { '.' });
                    if (cmds.Length < 2)
                    {
                        returnValues[x++] = this.interpret(str);
                        continue;
                    }
                    else
                    {
                        string gather = "";
                        foreach (var cmd in cmds)
                        {
                            gather += this.interpret(cmd) + " ";
                        }
                        returnValues[x++] = gather.Trim();
                        continue;
                    }
                }
                returnValues[x++] = this.interpret(str);
            }

            return String.Join(" ", returnValues);
        }

        public virtual string interpret(string code)
        {
            if (!this.delegatesIsSet) throw new Exception("Delegates Not Set!");
            if (String.IsNullOrWhiteSpace(code)) return "";
            if (code.ToUpper().StartsWith("~")) return code.Remove(0, 1);

            // ensure that all methods are properly parsed
            if (code.IndexOf(".") > -1)
            {
                var listOfMethods = parseCommandMethods(code, ".", "(", ")");
                if (listOfMethods.Count > 1) return this.interpret(listOfMethods.ToArray());
            }

            // safely parsed methods at this point
            int parenthesesStart, parenthesesEnd;
            string methodName = code.ToUpper();
            List<string> parameters = new List<string>();
            string parameterString = findFirstCommand(code, out parenthesesStart, out parenthesesEnd, "(", ")", false);

            // malformed params or no params skips this
            if (!(parenthesesStart == -1 || parenthesesEnd == -1 || parenthesesEnd < parenthesesStart))
            {

                methodName = code.Substring(0, parenthesesStart).ToUpper().Trim();
                parameters.AddRange(parameterString.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries));
            }

            string result = "";

            // exact match method names
            try
            {
                if (functions.Keys.Contains(methodName))
                {
                    result = functions[methodName].Invoke(parameters);
                    if (!String.IsNullOrWhiteSpace(result)) return result;
                }
                else
                {
                    return code;
                }
                //result = delegates[methodName].Invoke(methodName, parameters);
            }
            catch (Exception ex)
            {
                // failed to find the method
                return ex.Message;
            }


            return "";
        }

        //private string findFirstCommand(string command, out int start, out int end, string startingCharacter, string endingCharacter, bool returnSurroundingCharacters)
        //{
        //    #region Method init
        //    start = -1;
        //    end = -1;
        //    string finalString = "";
        //    if (String.IsNullOrEmpty(command))
        //    {
        //        return "";
        //    }
        //    if (String.IsNullOrEmpty(startingCharacter))
        //    {
        //        return command;
        //    }
        //    if (String.IsNullOrEmpty(endingCharacter))
        //    {
        //        return command;
        //    }
        //    if (startingCharacter.Equals(endingCharacter)) return command;
        //    string str = command;
        //    // check if there is a command to process
        //    int characterLocation = str.IndexOf(startingCharacter);
        //    #endregion


        //    if (characterLocation == -1)
        //    {
        //        return command; ;
        //    }


        //    characterLocation = 0;
        //    int lastPos = characterLocation;
        //    int nestedLevel = 0;

        //    lastPos = characterLocation;
        //    characterLocation = str.IndexOf(startingCharacter, characterLocation);
        //    if (characterLocation == -1)
        //    {

        //        finalString = str.Substring(lastPos, str.Length - lastPos).Replace(startingCharacter, "").Replace(endingCharacter, "");
        //        return finalString;
        //    }

        //    start = characterLocation;


        //    characterLocation += startingCharacter.Length;
        //    int charEndLocation = str.IndexOf(endingCharacter, characterLocation);

        //    int dummyEndLocation = str.IndexOf(endingCharacter, characterLocation);
        //    int dummyStartLocation = str.IndexOf(startingCharacter, characterLocation);
        //    int spotIndex = 0;
        //    int skipLength = 0;

        //    nestedLevel = 1;
        //    do
        //    {
        //        if (dummyStartLocation <= dummyEndLocation && dummyStartLocation != -1)
        //        {
        //            nestedLevel++;
        //            spotIndex = dummyStartLocation;
        //            skipLength = startingCharacter.Length;
        //        }
        //        else
        //        {
        //            nestedLevel--;
        //            spotIndex = dummyEndLocation;
        //            skipLength = endingCharacter.Length;
        //        }

        //        dummyEndLocation = str.IndexOf(endingCharacter, spotIndex + skipLength);
        //        dummyStartLocation = str.IndexOf(startingCharacter, spotIndex + skipLength);
        //        if (dummyEndLocation == -1 || nestedLevel == 0) break;
        //        spotIndex = dummyEndLocation;
        //    } while (nestedLevel > 0);

        //    charEndLocation = spotIndex;
        //    end = charEndLocation;

        //    if (start > end) return str;

        //    finalString = str.Substring((start + startingCharacter.Length), end - (start + startingCharacter.Length));

        //    if (returnSurroundingCharacters)
        //    {
        //        finalString = startingCharacter + finalString + endingCharacter;
        //    }

        //    return finalString;
        //}

        protected string findFirstCommand(string command, out int start, out int end, string startingCharacter, string endingCharacter, bool returnSurroundingCharacters)
        {
            #region Method init
            start = -1;
            end = -1;
            string finalString = "";
            if (String.IsNullOrEmpty(command))
            {
                return "";
            }
            if (String.IsNullOrEmpty(startingCharacter))
            {
                return command;
            }
            if (String.IsNullOrEmpty(endingCharacter))
            {
                return command;
            }
            if (startingCharacter.Equals(endingCharacter)) return command;
            string str = command;
            // check if there is a command to process
            int characterLocation = str.IndexOf(startingCharacter);
            #endregion


            if (characterLocation == -1)
            {
                return command; ;
            }


            characterLocation = 0;
            int lastPos = characterLocation;
            int nestedLevel = 0;

            lastPos = characterLocation;
            characterLocation = str.IndexOf(startingCharacter, characterLocation);
            if (characterLocation == -1)
            {

                finalString = str.Substring(lastPos, str.Length - lastPos).Replace(startingCharacter, "").Replace(endingCharacter, "");
                return finalString;
            }

            start = characterLocation;


            characterLocation += startingCharacter.Length;
            int charEndLocation = str.IndexOf(endingCharacter, characterLocation);

            int dummyEndLocation = str.IndexOf(endingCharacter, characterLocation);
            int dummyStartLocation = str.IndexOf(startingCharacter, characterLocation);
            int spotIndex = 0;
            int skipLength = 0;

            nestedLevel = 1;
            do
            {
                if (dummyStartLocation <= dummyEndLocation && dummyStartLocation != -1)
                {
                    nestedLevel++;
                    spotIndex = dummyStartLocation;
                    skipLength = startingCharacter.Length;
                }
                else
                {
                    nestedLevel--;
                    spotIndex = dummyEndLocation;
                    skipLength = endingCharacter.Length;
                }

                dummyEndLocation = str.IndexOf(endingCharacter, spotIndex + skipLength);
                dummyStartLocation = str.IndexOf(startingCharacter, spotIndex + skipLength);
                if (dummyEndLocation == -1 || nestedLevel == 0) break;
                spotIndex = dummyEndLocation;
            } while (nestedLevel > 0);

            charEndLocation = spotIndex;
            end = charEndLocation;

            if (start > end) return str;

            finalString = str.Substring((start + startingCharacter.Length), end - (start + startingCharacter.Length));

            if (returnSurroundingCharacters)
            {
                finalString = startingCharacter + finalString + endingCharacter;
            }

            return finalString;
        }

        protected string methodParse(string command, out int start, out int end, string methodToken, string characterParameterStarter, string characterParameterEnder, int startingPoint = 0)
        {
            start = 0; end = 0;

            start = command.IndexOf(methodToken, startingPoint);
            if (start == -1) return command;
            if (characterParameterStarter == characterParameterEnder) return command;

            int carriageLocation = start;

            int nestedAmount = 0;
            while (carriageLocation < command.Length - methodToken.Length && (command.Substring(++carriageLocation, methodToken.Length) != methodToken || nestedAmount > 0))
            {
                if (carriageLocation < command.Length - characterParameterStarter.Length && command.Substring(carriageLocation, characterParameterStarter.Length) == characterParameterStarter) nestedAmount++;
                if (carriageLocation < command.Length - characterParameterEnder.Length && command.Substring(carriageLocation, characterParameterEnder.Length) == characterParameterEnder) nestedAmount--;
            }

            if (nestedAmount != 0) return command;
            end = carriageLocation;
            if (carriageLocation - (start + methodToken.Length) < 0) return command.Substring(start + methodToken.Length);
            return command.Substring(start + methodToken.Length, carriageLocation - (start + methodToken.Length));
        }

        protected List<string> parseParameters(string strParameters, string parameterToken, string stringCharacter)
        {
            var parameters = strParameters.Split(new string[] { parameterToken }, StringSplitOptions.None);
            bool isString = false;
            string tempString = "";
            for (int x = parameters.Length - 1; x >= 0; x--)
            {
                if (!isString)
                {
                    if (parameters[x].Trim().EndsWith(stringCharacter) && !parameters[x].Trim().StartsWith(stringCharacter))
                    {
                        isString = true;
                        tempString = parameters[x];
                        parameters[x] = "";
                    }
                }
                else
                {
                    if (parameters[x].Trim().StartsWith(stringCharacter))
                    {
                        parameters[x] += parameterToken + tempString;
                        tempString = "";
                        isString = false;
                    }
                    else
                    {
                        tempString = parameters[x] + parameterToken + tempString;
                    }
                }
            }

            if (isString)
            {
                parameters[0] = tempString;
            }

            List<string> p = new List<string>();
            foreach (string str in parameters)
            {
                if (!String.IsNullOrWhiteSpace(str))
                {
                    p.Add(str);
                }
            }

            return p;

        }

        public List<string> parseCommandMethods(string command, string methodToken, string characterParameterStarter, string characterParameterEnder, int startingPoint = 0)
        {
            int start = 0; int end = 0;
            List<string> list = new List<string>();

            start = command.IndexOf(methodToken, startingPoint);
            if (start == -1 || characterParameterStarter == characterParameterEnder)
            {
                list.Add(command);
                return list;
            }

            if (start > 0) list.Add(command.Substring(0, start));

            int carriageLocation = start;

            while (carriageLocation < command.Length - methodToken.Length)
            {
                string method = methodParse(command, out start, out end, methodToken, characterParameterStarter, characterParameterEnder, carriageLocation);
                if (!String.IsNullOrWhiteSpace(method)) list.Add(method);
                carriageLocation = end;
            }

            return list;
        }

        #region Method Delegate Structure Stuff
        public class MethodPackage
        {
            public string MethodName { get; set; }
            public string Description { get; set; }
            public List<Parameter> ParameterDescriptions = new List<Parameter>();
            public delegate string Method(string methodName, List<string> parameters);
            public Dictionary<string, Method> methods = new Dictionary<string, Method>();
            public void Add(MethodPackage package)
            {
                // overridding behavior.
                for (int x = package.methods.Count - 1; x > -1; x--)
                {
                    bool found = false;
                    for (int y = this.methods.Count - 1; y > -1; y--)
                    {
                        if (package.methods.ElementAt(x).Key.Equals(this.methods.ElementAt(y).Key))
                        {
                            this.methods[this.methods.ElementAt(y).Key] = package.methods.ElementAt(x).Value;
                            found = true;
                            break;
                        }
                    }
                    if(!found) this.methods.Add(package.methods.ElementAt(x).Key, package.methods.ElementAt(x).Value);
                }
                
            }
            public MethodPackage(string methodName, List<Parameter> parameterDescriptions, string description, Method method)
            {
                this.MethodName = methodName;
                this.Description = description;
                this.ParameterDescriptions = parameterDescriptions;
                this.methods.Add(this.getSignature(parameterDescriptions), method);
            }
            private string getSignature(List<Parameter> parameterDescriptions)
            {
                string final = this.MethodName;
                if (parameterDescriptions == null) return final;
                foreach (var p in parameterDescriptions)
                {
                    final += "|" + p.ToString();
                }
                return final;
            }
            private string getSignature(List<string> parameters)
            {
                string final = this.MethodName;
                if (parameters == null) return final;
                foreach (var p in parameters)
                {
                    final += "|" + Parameter.getParameterTypeName(p);
                }
                return final;
            }
            private string getSignature()
            {
                return this.getSignature(this.ParameterDescriptions);
            }
            public string Invoke(List<string> parameters)
            {
                string key = getSignature(parameters);
                try
                {
                    if (methods.ContainsKey(key))
                    {
                        return methods[key].Invoke(this.MethodName, parameters);
                    }
                    return "Error: No method " + key;
                }
                catch (Exception ex)
                {
                    return "Error: No method " + key;
                }
            }
            public override bool Equals(object obj)
            {
                if (obj == null) return false;
                if(!obj.GetType().Equals(typeof(MethodPackage))) return false;
                return (obj as MethodPackage).getSignature().Equals(this.getSignature());
            }
            public override string ToString()
            {
                string final = this.MethodName;
                bool hasParams = this.ParameterDescriptions.Count > 0;
                if (hasParams) final += "(";
                foreach (var para in this.ParameterDescriptions)
                {
                    final += para.ToString() + " " + para.Name.Replace(" ", "") + ", " ;
                }
                if (hasParams) final = final.Substring(0, final.Length - 2);
                return final + (hasParams?")":"");
            }
            public class Parameter : IComparable 
            {
                public string Name { get; set; }
                public string Description { get; set; }
                private Type ParameterType { get; set; }
                private object Value { get; set; }
                public Parameter(string name, string description, object value)
                {
                    this.Name = name;
                    this.Description = description;
                    if (value == null) throw new Exception("Parameter value cannot be null.");
                    this.ParameterType = value.GetType();
                    this.Value = value;
                }

                private Parameter(string name, string description)
                {
                    this.Name = name;
                    this.Description = description;
                }

                public Parameter(string name, string description, Type type): this(name, description)
                {
                    if (type.Equals(typeof(string)) || type.Equals(typeof(int)) || type.Equals(typeof(double)))
                    {
                        this.ParameterType = type;
                    }
                    else
                    {
                        throw new Exception("Parameter type is not allowed.");
                    }
                }

                public Parameter(string name, string description, string value):this(name, description)
                {
                    this.setValue(value);
                }

                public static Parameter getParameter(string value)
                {
                    Parameter p = new Parameter("", "", value);
                    return p;
                }

                public static Type parseParameter(string parameter, out object parsed)
                {
                    parsed = null;
                    if (String.IsNullOrWhiteSpace(parameter))
                    {
                        parsed = parameter;
                        return typeof(string);
                    }
                    int number = -1;
                    if (int.TryParse(parameter, out number))
                    {
                        parsed = number;
                        return typeof(int);
                    }

                    double number2 = -1;
                    if (double.TryParse(parameter, out number2))
                    {
                        parsed = number2;
                        return typeof(double);
                    }

                    parsed = parameter;
                    return typeof(string);
                    
                }

                public static Type getParameterType(string value)
                {
                    if (String.IsNullOrWhiteSpace(value))
                    {
                        return typeof(string);
                    }
                    int number = -1;
                    if (int.TryParse(value, out number))
                    {
                        return typeof(int);
                    }

                    double number2 = -1;
                    if (double.TryParse(value, out number2))
                    {
                        return typeof(double);
                    }

                    return typeof(string);
                }

                public static string getParameterTypeName(string value)
                {
                    if (String.IsNullOrWhiteSpace(value))
                    {
                        return "string";
                    }
                    int number = -1;
                    if (int.TryParse(value, out number))
                    {
                        return "int";
                    }

                    double number2 = -1;
                    if (double.TryParse(value, out number2))
                    {
                        return "double";
                    }

                    return "string";
                }

                public Type getType()
                {
                    return this.ParameterType;
                }

                public void setValue(string value)
                {
                    if (String.IsNullOrWhiteSpace(value))
                    {
                        this.Value = "";
                        this.ParameterType = typeof(string);
                        return;
                    }
                    int number = -1;
                    if (int.TryParse(value, out number))
                    {
                        this.ParameterType = typeof(int);
                        this.Value = number;
                        return;
                    }

                    double number2 = -1;
                    if (double.TryParse(value, out number2))
                    {
                        this.ParameterType = typeof(double);
                        this.Value = number2;
                        return;
                    }

                    this.ParameterType = typeof(string);
                    this.Value = value;
                }

                public dynamic getValue()
                {
                    return Convert.ChangeType(this.Value, this.ParameterType);
                }

                public int CompareTo(object obj)
                {
                    if (obj == null)
                        return 1;
                    if (!(obj is Parameter))
                        return -1;
                    if ((obj as Parameter).Equals(this))
                        return 0;
                    return this.Name.CompareTo(((Parameter)obj).Name);
                }

                public override bool Equals(object obj)
                {
                    if(obj.GetType().Equals(this.GetType()))
                    {
                        return (obj as Parameter).ParameterType.Equals(this.ParameterType);
                    }
                    if (this.ParameterType.Equals(typeof(string)))
                    {
                        return true;
                    }
                    return obj.GetType().Equals(this.ParameterType);

                    //if(!isSame) return false;
                    //isSame &= (obj as Parameter).Name.Equals(this.Name);
                    //isSame &= (obj as Parameter).ParameterType.Equals(this.ParameterType);

                }

                public override string ToString()
                {
                    if(this.ParameterType.Equals(typeof(string)))
                    {
                        return "string";
                    }
                    if (this.ParameterType.Equals(typeof(int)))
                    {
                        return "int";
                    }
                    if (this.ParameterType.Equals(typeof(double)))
                    {
                        return "double";
                    }

                    return "string";
                }
            }
        }

        public Dictionary<string, MethodPackage> functions = new Dictionary<string, MethodPackage>();

        public void addMethod(string methodName, MethodPackage methodPackage)
        {
            try
            {
                if (functions.ContainsKey(methodName))
                {
                    functions[methodName].Add(methodPackage);
                }
                else
                {
                    functions.Add(methodName, methodPackage);
                }
            }
            catch (Exception ex)
            {

            }
        }
        public void addDelegate(string methodName, string description, List<MethodPackage.Parameter> parameters, MethodPackage.Method deleg)
        {
            if (parameters == null) parameters = new List<MethodPackage.Parameter>();
            if (deleg == null)
            {
                deleg = delegate(string functionName, List<string> para) { return ""; };
            }
            if (String.IsNullOrWhiteSpace(description)) description = "";
            if (String.IsNullOrWhiteSpace(methodName)) methodName = "anonymous";
            addMethod(methodName, new MethodPackage(methodName, parameters, description, deleg));
        }

        protected List<MethodPackage.Parameter> getFreshParameterList()
        {
            return new List<MethodPackage.Parameter>();
        }

        
        abstract protected void setDelegates();


        #endregion

    }

    /// <summary>
    /// 
    /// </summary>
    [Serializable()]
    [JsonConverter(typeof(PropertyNameMatchingConverter))]
    public class Matter : Commandable, JSerializable<ActionParser>, IComparable, ActionParser, Registrable<ActionParser>, Registrar<ActionParser>, DBActionable, StoryHelperLibrary.Interfaces.Mergable<Matter>
    {

        //protected readonly Regex regexIsVerb = new Regex(@"^(verb\(\-?(to be\s{1}|be\s{1}|to\s{1})?\w{1,}(\,|\;|\.|\:){1}\s*(0|1){0,1}\d{1}\)|v\(\-?(to be\s{1}|be\s{1}|to\s{1})?\w{1,}(\,|\;|\.|\:){1}\s*(0|1){0,1}\d{1}\))$", RegexOptions.IgnoreCase);
        //protected readonly Regex regexIsVerbWithAdverb = new Regex(@"^(verb\(\-?(to be\s{1}|be\s{1}|to\s{1})?\w{1,}(\,|\;|\.|\:){1}\s*(0|1){0,1}\d{1}(\,|\;|\.|\:){1}\s*\w{1,}\)|v\(\-?(to be\s{1}|be\s{1}|to\s{1})?\w{1,}(\,|\;|\.|\:){1}\s*(0|1){0,1}\d{1}(\,|\;|\.|\:){1}\s*\w{1,}\))$", RegexOptions.IgnoreCase);

        //public int tense = 1;

        public Matter() 
        {
            //setDelegates();
        }

        

        protected readonly Regex quickMonikers = new Regex(@"^(\@|\+|\%|\$|\$\$|\@\@|\+\+|\%\%){1}.*$");
        protected readonly Regex regexCallListWithKey = new Regex(@"^(A|S|F|V|SC|K)\(\w+(\.\w+)*\)$", RegexOptions.IgnoreCase);
        protected readonly Regex regexIsVerbToAdverb = new Regex(@"^verbToAdverb\(\w{1,}\)$", RegexOptions.IgnoreCase);
        protected readonly Regex regexIsAdverb = new Regex(@"^adverb\(\w+\)$", RegexOptions.IgnoreCase);
        protected readonly Regex regexIsNumberToText = new Regex(@"^numberToText\([0-9]+\)$", RegexOptions.IgnoreCase);

        protected const string postIndefinateArticleCode = "ART-AFTER-";
        protected const string multipleAdjectivesFinalizer = ", and ";
        protected const string justANDseparator = " and ";
        protected const string multipleAdjectivesSeperator = ", ";
        protected const string commandSeperator = ".";
        protected const string indefinateArticleCode = "ART";
        

        protected Random r = new Random();

        public bool colour_readonly { get; set; }
        public bool size_readonly { get; set; }
        public bool weight_readonly { get; set; }
        public bool name_readonly { get; set; }
        public bool other_readonly { get; set; }
        public bool isMany_readonly { get; set; }
        public bool adjectives_readonly { get; set; }
        public bool aliases_readonly { get; set; }
        public bool adverbs_readonly { get; set; }
        public bool states_readonly { get; set; }
        public bool who_readonly { get; set; }

        private bool isMany = false;
        public bool IsMany
        {
            get { return isMany; }
            set { isMany = value; }
        }
        
        public Pronouns pronouns = new Pronouns(Pronouns.Pronoun.It);

        public int dbID = -1;
        public int userId = -1;

        

        private bool isUsed = true;
        private int groupId = 0;
        public int GroupId
        {
            get { return groupId; }
            set { groupId = value; }
        }
        public bool IsUsed
        {
            get { return isUsed; }
            set { isUsed = value; }
        }

        private Registrar<ActionParser> owner = null;
        internal Registrar<ActionParser> Owner
        {
            get { return owner; }
            set { owner = value; }
        }

        private int globalPercentage = 100;
        public int GlobalPercentage
        {
            get { return globalPercentage; }
            set
            {
                if (value < 0) globalPercentage = 0;
                else if (value > 100) globalPercentage = 100;
                else globalPercentage = value;
            }
        }

        public void setOwner(Registrar<ActionParser> owner)
        {
            if (owner == null) return;
            this.Owner = owner;
        }

        public Registrar<ActionParser> getOwner()
        {
            return this.owner;
        }

        public Matter(string name):this()
        {
            this.Name = name;

        }

        public Matter(string name, string id)
            : this(name)
        {
            this.Id = id;
        }

        private string other = "";

        public string Other
        {
            get { return other; }
            set { other = value; }
        }

        private string id = "";
        public string Id
        {
            get { return id.ToLower(); }
            set
            {
                if (!String.IsNullOrEmpty(value))
                {
                    if (value.Length < 40)
                        id = value.ToLower();
                    //this.addMatterToRegistry(this.id, this);
                }
            }
        }

        public string getId()
        {
            if (!String.IsNullOrEmpty(this.id))
                return this.id.ToLower();
            else
                return this.Name.ToLower();
        }

        public void setId(string id)
        {
            this.Id = id;
        }

        #region states
        private ListDrawString states = new ListDrawString(100);
        public List<string> States
        {
            get
            {
                this.states.replenish();
                return this.states;
            }
            set
            {

                states = new ListDrawString(statePercentage, value);
            }
        }
        public void addState(string state)
        {
            addStringToList(this.states, state);
        }
        public void addState(string[] states)
        {
            addStringsToList(this.states, states);
        }
        public string[] getStates()
        {
            return getList(this.states);
        }
        public int statePercentage = 100;

        public int StatePercentage
        {
            get
            {
                return statePercentage * this.globalPercentage / 100;
            }
            set
            {
                if (value < 0) statePercentage = 0;
                else if (value > 100) statePercentage = 100;
                else statePercentage = value;

                this.states.DrawRate = statePercentage * this.globalPercentage / 100;
            }
        }
        #endregion

        #region adverbs
        private ListDrawString adverbs = new ListDrawString(100);
        public List<string> Adverbs
        {
            get
            {
                //List<string> x = new List<string>();

                //foreach (string s in aliases)
                //{
                //    x.Add(s);
                //}
                //return x;
                this.adverbs.replenish();
                return this.adverbs;
            }
            set
            {

                adverbs = new ListDrawString(adverbsPercentage, value);
            }
        }
        public void addAdverb(string adverb)
        {
            addStringToList(this.adverbs, adverb);
        }
        public void addAdverb(string[] adverbs)
        {
            addStringsToList(this.adverbs, adverbs);
        }
        public string[] getAdverbs()
        {
            return getList(this.adverbs);
        }
        public int adverbsPercentage = 100;

        public int AdverbsPercentage
        {
            get
            {
                return adverbsPercentage * this.globalPercentage / 100;
            }
            set
            {
                if (value < 0) adverbsPercentage = 0;
                else if (value > 100) adverbsPercentage = 100;
                else adverbsPercentage = value;
                this.adverbs.DrawRate = adverbsPercentage * this.globalPercentage / 100;
            }
        }
        #endregion

        #region Who
        private ListDrawString who = new ListDrawString(100);
        public List<string> Who
        {
            get
            {
                //List<string> x = new List<string>();

                //foreach (string s in aliases)
                //{
                //    x.Add(s);
                //}
                //return x;
                this.who.replenish();
                return this.who;
            }
            set
            {

                adverbs = new ListDrawString(whoPercentage, value);
            }
        }
        public void addWho(string who)
        {
            addStringToList(this.who, who);
        }
        public void addWho(string[] who)
        {
            addStringsToList(this.who, who);
        }
        public string[] getWho()
        {
            return getList(this.who);
        }
        public int whoPercentage = 100;

        public int WhoPercentage
        {
            get
            {
                return whoPercentage * this.globalPercentage / 100;
            }
            set
            {
                if (value < 0) whoPercentage = 0;
                else if (value > 100) whoPercentage = 100;
                else whoPercentage = value;

                this.who.DrawRate = whoPercentage * this.globalPercentage / 100;
            }
        }
        #endregion

        #region alias
        private ListDrawString aliases = new ListDrawString(100);
        public List<string> Aliases
        {
            get
            {
                this.aliases.replenish();
                return this.aliases;
            }
            set
            {

                aliases = new ListDrawString(aliasPercentage, value);
            }
        }
        public void AddAlias(string alias)
        {
            addStringToList(this.aliases, alias);
        }
        public void AddAlias(string[] aliases)
        {
            addStringsToList(this.aliases, aliases);
        }
        public string[] getAliases()
        {
            return getList(this.aliases);
        }
        public int aliasPercentage = 100;

        public int AliasPercentage
        {
            get
            {
                return aliasPercentage * this.globalPercentage / 100;
            }
            set
            {
                if (value < 0) aliasPercentage = 0;
                else if (value > 100) aliasPercentage = 100;
                else aliasPercentage = value;

                this.aliases.DrawRate = aliasPercentage * this.globalPercentage / 100;
            }
        }
        #endregion

        #region adjectives
        private ListDrawString adjectives = new ListDrawString(100);
        public List<String> Adjectives
        {
            get
            {
                this.adjectives.replenish();
                return this.adjectives;
            }
            set { this.adjectives = new ListDrawString(adjectivesPercentage, value); }
        }
        public void AddAdjective(string adj)
        {
            addStringToList(this.adjectives, adj);
        }
        public void AddAdjective(string[] adjs)
        {
            addStringsToList(this.adjectives, adjs);
        }
        public string[] getAdjectives()
        {
            return getList(this.adjectives);
        }
        public int adjectivesPercentage = 100;

        public int AdjectivesPercentage
        {
            get
            {

                return adjectivesPercentage * this.globalPercentage / 100;
            }
            set
            {
                if (value < 0) adjectivesPercentage = 0;
                else if (value > 100) adjectivesPercentage = 100;
                else adjectivesPercentage = value;

                this.adjectives.DrawRate = adjectivesPercentage * this.globalPercentage / 100;
            }
        }
        #endregion

        private string name = "";

        public string Name
        {
            get
            {
                return name;
            }
            set
            {
                if (String.IsNullOrEmpty(value.Trim())) return;
                name = value.Replace("_", " ");
            }
        }

        private string colour = "";

        public string Colour
        {
            get
            {
                return colour;

            }
            set
            {
                //if (String.IsNullOrEmpty(value.Trim())) return;
                colour = value.Trim();
            }
        }




        private string size = "";
        public string Size
        {
            get
            {
                return size;
            }
            set
            {
                size = value;
            }
        }


        private int weight = 0;

        public int Weight
        {
            get
            {
                return this.weight;
            }
            set
            {
                this.weight = value;
            }
        }

        protected Dictionary<string, ActionParser> registry = new Dictionary<string, ActionParser>();
        private Dictionary<string, WordGroup> words = new Dictionary<string, WordGroup>();

        private Registrable<ActionParser> otherMatter = null;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="other"></param>
        public void setOther(Registrable<ActionParser> other)
        {
            if (other != null)
                this.otherMatter = other;
        }

        public Registrable<ActionParser> getOther()
        {
            return this.otherMatter;
        }

        protected string[] getList(IList<string> list)
        {
            if (list is ListDrawString)
            {
                return (list as ListDrawString).getExpandedList().ToArray();
            }
            return list.ToArray();
            
        }

        protected void addStringToList(IList<string> list, string str)
        {
            if (String.IsNullOrEmpty(str.Trim())) return;


            // Let the ListDrawString Object do the validations
            if (list is ListDrawString) (list as ListDrawString).Add(str);
            else
            {
                if (!list.Contains(str)) list.Add(str);
            }

            //if (!list.Contains(str))
            //{
            //    if (list is ListDrawString) (list as ListDrawString).Add(str);
            //    else list.Add(str);
            //}
            //else if (str.Contains("=>"))
            //{
            //    if (list is ListDrawString) (list as ListDrawString).Add(str);
            //}
        }

        public void addStringsToList(IList<string> list, string[] strs)
        {
            if (list is ListDrawString) (list as ListDrawString).AddRange(strs);
            else
            {
                if (strs != null)
                {
                    foreach (string str in strs)
                    {

                        if (String.IsNullOrEmpty(str.Trim())) continue;
                        bool found = false;


                        foreach (string listString in list)
                        {
                            if (listString.Trim().ToLower().Equals(str.Trim().ToLower()))
                            {
                                found = true; break;
                            }
                        }
                        if (!found)
                        {
                            list.Add(str);
                        }
                    }
                }
            }
        }

        public string getOwnerId()
        {
            Registrar<ActionParser> owner = this.getOwner();
            if (owner == null) return this.getId();

            if (owner is Matter)
            {
                return (owner as Matter).getFullId();
            }

            return this.getId();
        }

        public string getOwnerName()
        {
            Registrar<ActionParser> owner = this.getOwner();

            if (owner is Matter && !owner.Equals(this))
            {
                return (owner as Matter).getOwnerName();
            }

            return this.name;
        }

        public void setPronoun(Pronouns.Pronoun pronoun)
        {
            this.pronouns = new Pronouns(pronoun);
        }

        public void setPronoun(string pronoun)
        {
            if (String.IsNullOrWhiteSpace(pronoun)) return;
            try
            {
                var pronounEnum = Pronouns.getPronounEnumFromString(pronoun);
                this.setPronoun(pronounEnum);
            }
            catch (Exception ex)
            {

            }
        }

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("classType", this.GetType().Name);
            if (!String.IsNullOrEmpty(this.id)) info.AddValue("Id", this.Id);
            if (!String.IsNullOrEmpty(this.Name)) info.AddValue("Name", this.Name);
            if (!String.IsNullOrEmpty(this.Colour)) info.AddValue("Colour", this.Colour);
            if (!String.IsNullOrEmpty(this.Size)) info.AddValue("Size", this.Size);
            if (!String.IsNullOrEmpty(this.other)) info.AddValue("Other", this.other);
            if (this.Weight > 0) info.AddValue("Weight", this.Weight);
            if (this.adjectives.Count > 0) info.AddValue("Adjectives", this.Adjectives);
            if (this.aliases.Count > 0) info.AddValue("Aliases", this.Aliases);
            if (this.states.Count > 0) info.AddValue("States", this.States);
            if (this.adverbs.Count > 0) info.AddValue("Adverbs", this.Adverbs);
            if (this.who.Count > 0) info.AddValue("Who", this.Who);
            if (this.whoPercentage > 0) info.AddValue("WhoPercentage", this.whoPercentage);
            if (this.statePercentage > 0) info.AddValue("StatePercentage", this.statePercentage);
            if (this.adjectivesPercentage > 0) info.AddValue("AdjectivesPercentage", this.adjectivesPercentage);
            if (this.adverbsPercentage > 0) info.AddValue("AdverbsPercentage", this.adverbsPercentage);
            if (this.aliasPercentage > 0) info.AddValue("AliasPercentage", this.aliasPercentage);
            if (this.GlobalPercentage > 0) info.AddValue("GlobalPercentage", this.GlobalPercentage);
            info.AddValue("IsUsed", this.IsUsed);
            info.AddValue("GroupId", this.GroupId);
            info.AddValue("IsMany", this.isMany);
            info.AddValue("Pronoun", this.pronouns.selectedPronoun.ToString());
        }

        //Deserialization constructor.
        public Matter(SerializationInfo info, StreamingContext ctxt)
        {
            //Get the values from info and assign them to the appropriate properties
            try
            {
                this.Id = (string)info.GetValue("Id", typeof(string));
            }
            catch (Exception)
            { }
            try
            {
                this.Name = (string)info.GetValue("Name", typeof(string));
            }
            catch (Exception)
            { }
            try
            {
                this.Colour = (string)info.GetValue("Colour", typeof(string));
            }
            catch (Exception)
            { }
            try
            {
                this.Size = (string)info.GetValue("Size", typeof(string));
            }
            catch (Exception)
            { }
            try
            {
                this.other = (string)info.GetValue("Other", typeof(string));
            }
            catch (Exception)
            { }
            try
            {
                this.Weight = (int)info.GetValue("Weight", typeof(int));
            }
            catch (Exception)
            { }
            try
            {
                this.IsUsed = (bool)info.GetValue("IsUsed", typeof(bool));
            }
            catch (Exception)
            { }
            try
            {
                this.GroupId = (int)info.GetValue("GroupId", typeof(int));
            }
            catch (Exception)
            { }

            try
            {
                this.isMany = (bool)info.GetValue("IsMany", typeof(bool));
            }
            catch (Exception)
            { }
            try
            {

                List<string> x = (List<string>)info.GetValue("Adjectives", typeof(IList<string>));
                foreach (string str in x)
                {
                    this.AddAdjective(str);
                }

            }
            catch (Exception) { }
            try
            {
                List<string> x = (List<string>)info.GetValue("Aliases", typeof(IList<string>));
                foreach (string str in x)
                {
                    this.AddAlias(str);
                }

            }
            catch (Exception) { }
            try
            {
                List<string> x = (List<string>)info.GetValue("States", typeof(IList<string>));
                foreach (string str in x)
                {
                    this.addState(str);
                }

            }
            catch (Exception) { }
            try
            {
                List<string> x = (List<string>)info.GetValue("Adverbs", typeof(IList<string>));
                foreach (string str in x)
                {
                    this.addAdverb(str);
                }

            }
            catch (Exception) { }
            try
            {
                List<string> x = (List<string>)info.GetValue("Who", typeof(IList<string>));
                foreach (string str in x)
                {
                    this.addWho(str);
                }

            }
            catch (Exception) { }
            try
            {
                this.AliasPercentage = (int)info.GetValue("AliasPercentage", typeof(int));
            }
            catch (Exception)
            { }
            try
            {
                this.AdverbsPercentage = (int)info.GetValue("AdverbsPercentage", typeof(int));
            }
            catch (Exception)
            { }
            try
            {
                this.AdjectivesPercentage = (int)info.GetValue("AdjectivesPercentage", typeof(int));
            }
            catch (Exception)
            { }
            try
            {
                this.StatePercentage = (int)info.GetValue("StatePercentage", typeof(int));
            }
            catch (Exception)
            { }
            try
            {
                this.WhoPercentage = (int)info.GetValue("WhoPercentage", typeof(int));
            }
            catch (Exception)
            { }
            try
            {
                this.GlobalPercentage = (int)info.GetValue("GlobalPercentage", typeof(int));
            }
            catch (Exception)
            { }
            try
            {
                this.isMany_readonly = (bool)info.GetValue("isMany_readonly", typeof(bool));
            }
            catch (Exception)
            { }
            try
            {
                string pronoun = (string)info.GetValue("Pronoun", typeof(string));
                this.setPronoun(pronoun);
            }
            catch (Exception)
            {
            }
            //try
            //{
            //    Dictionary<string, WordGroup> x = (Dictionary<string, WordGroup>)info.GetValue("Aliases", typeof(IDictionary<string, WordGroup>));
            //    this.WordGroups = x;

            //}
            //catch (Exception) { }
        }

        //public override bool Equals(Object obj)
        //{
        //    Matter matterObj = obj as Matter;
        //    if (matterObj == null)
        //        return false;
        //    else
        //        return this.Id.Equals(matterObj.Id) && this.Name.Equals(matterObj.Name);
        //}

        //public bool setProperty<T>(Expression<Func<T>> property)
        //{
        //    var propertyInfo = ((MemberExpression)property.Body).Member as PropertyInfo;
        //    if (propertyInfo == null)
        //    {
        //        throw new ArgumentException("The lambda expression 'property' should point to a valid Property");
        //    }
        //}

        protected string drawMoi(string code, string failsafe, int tense)
        {
            ListDrawString listPrepositions = new ListDrawString(100, new string[] { "~the", "da" });
            if (!(this is Human)) listPrepositions.Add("wpa");
            ListDrawString listDescribers = new ListDrawString(100, new string[] { "as", "a", "sa" });
            ListDrawString listMonikers = new ListDrawString(100, new string[] { "k-a" });
            if (!(this is Human)) listMonikers.Add(",~of,wpp");
            List<string> moiList = new List<string>();
            moiList.Add(listPrepositions.draw());
            moiList.Add(listDescribers.draw());
            if (!moiList[0].Equals("wpa")) moiList.Add(listMonikers.draw());
            else moiList.Add("k");
            return this.refOther(code, failsafe, moiList.ToArray(), tense);
        }

        protected string drawMon(string code, string failsafe, int tense)
        {
            ListDrawString listPrepositions = new ListDrawString(100, new string[] { "wpa", "~the" });
            ListDrawString listDescribers = new ListDrawString(100, new string[] { "as", "a", "sa" });
            //ListDrawString listMonikers = new ListDrawString(100, new string[] { "k-a", "k-a.~of.wpp" });
            List<string> moiList = new List<string>();
            moiList.Add(listPrepositions.draw());
            moiList.Add(listDescribers.draw());
            if (!moiList[0].Equals("wpa")) moiList.Add("k.~of.wpp");
            else moiList.Add("k");
            return this.refOther(code, failsafe, moiList.ToArray(), tense);
        }

        /// <summary>
        /// Finds actor
        /// </summary>
        /// <param name="code">If the code is larger than 2 characters, for some reason the code will remove 2 characters.</param>
        /// <param name="failsafe">The failsafe code to send back to the user.</param>
        /// <param name="action">An array of actions the found actor will do.</param>
        /// <returns></returns>
        protected string refOther(string code, string failsafe, string[] action, int tense)
        {
            Regex regexIsParentheses = new Regex(@"^\(\w+\)$", RegexOptions.IgnoreCase);
            string referenceId = "";
            // no idea why
            if (code.Length > 2) code = code.Remove(0, 2);

            if (regexIsParentheses.IsMatch(code))
            {
                // remove the parentheses
                string actor = code.Remove(0, 1);
                referenceId = actor.Remove(actor.Length - 1, 1);

            }
            else
            {
                referenceId = "ref" + this.Id;
            }
            return referenceMeByOther(referenceId, failsafe, action, tense);
        }

        protected string referenceMeByOther(string referenceId, string failsafe, string[] action, int tense)
        {
            var o = this.getOther() as Human;
            if (o == null) return this.interpret(failsafe, tense);

            foreach (var x in o.registry.Where(y => y.Key.ToUpper().Trim() == referenceId.ToUpper().Trim()))
            {
                return x.Value.interpret(action, tense);
            }

            return this.interpret(failsafe, tense);
        }

        /// <summary>
        /// Draws from two ListDrawStrings, and then checks if the listFirst string is found in the listSecond string drawn. 
        /// If so, it trys again, to a maximum of 10 trys, after which, it returns what ever it last drawn. 
        /// </summary>
        /// <param name="listFirst"></param>
        /// <param name="listSecond"></param>
        /// <returns></returns>
        protected string drawNoConflict(ListDrawString listFirst, ListDrawString listSecond, int tense)
        {
            string adjective = this.interpret(listFirst.draw(), tense);
            string alias = this.interpret(listSecond.draw(), tense);
            bool isConflicting = true;
            int ctr = 0; // prevent infinite loops.

            while (ctr < 10 && isConflicting && listFirst.Count >= 1 && listSecond.Count >= 1)
            {
                adjective = this.interpret(listFirst.draw(), tense);
                if (!adjective.Trim().ToLower().Contains(alias.Trim().ToLower())) isConflicting = false;
                ctr++;
            }



            return adjective + " " + alias;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="picked"></param>
        /// <param name="list">The list of words to draw from</param>
        /// <param name="defaultAliasString"></param>
        /// <returns></returns>
        protected string drawNoConflict(string picked, ListDrawString list, int tense, string defaultAliasString = "")
        {
            //string defaultString = (this is Human) ? "TYPE" : "N";
            //return drawFromList(this.aliases, this.interpret(defaultString), this.AliasPercentage);

            string alias = defaultAliasString;
            bool isConflicting = true;
            int ctr = 0; // prevent infinite loops.
            string interpreted = "";

            // Add the failsafe to the list
            if (list.Count == 0) return picked + " " + alias;

            // If the list only has one possibility, which includes empty lists passed as parameter.
            if (list.Count == 1)
            {
                interpreted = this.interpret(picked, tense);
                alias = list.draw();
                // ensure that the list contains the preselected string code
                if (interpreted.Trim().ToLower().Contains(alias.Trim().ToLower())) return alias;
                return interpreted + " " + alias;
            }


            while (ctr < 10 && isConflicting)
            {
                alias = list.draw();
                interpreted = this.interpret(picked, tense);
                // ensure that the list contains the preselected string code
                if (!interpreted.Trim().ToLower().Contains(alias.Trim().ToLower())) isConflicting = false;
                ctr++;
            }

            // If more than 10 cycles occur, give up and send the failsafe by itself.
            if (ctr >= 10 && isConflicting) return alias;
            return picked + " " + alias;
        }

        protected string getIndefinateArticle(string code)
        {
            if (this.isMany) return "some " + code;

            foreach (string str in new string[] { "a", "e", "i", "o", "u" })
            {
                if (code.StartsWith(str)) return "an " + code;
            }
            return "a " + code;
        }

        protected string getIndefinateArticle(string alias, string adjectives)
        {
            string article = "a";
            if (String.IsNullOrEmpty(alias)) return "";

            if (!String.IsNullOrWhiteSpace(adjectives))
            {
                foreach (string str in new string[] { "a", "e", "i", "o", "u" })
                {
                    if (adjectives.StartsWith(str))  article = "an";
                }
            }
            else
            {

                foreach (string str in new string[] { "a", "e", "i", "o", "u" })
                {
                    if (alias.StartsWith(str)) article = "an";
                }
            }
            if (this.IsMany) article = "some";
            return article + " " + adjectives + " " + alias;
        }

        //protected string getAdverbAdjective(ListDrawString list)
        //{
        //    string theAdjective = this.drawFromList(list, "", this.AdjectivesPercentage);
        //    if (String.IsNullOrWhiteSpace(theAdjective)) return "";
        //    string theAdverb = list.getAssociated();
        //    return theAdverb + " " + theAdjective;
        //}

        protected string evaluateProbability(string word, int probability)
        {
            int value = r.Next(100);
            if (value > probability) return "";
            return word;
        }

        protected bool willDraw(int probability = 100)
        {
            int value = r.Next(100);
            if (value >= probability) return false;
            return true;
        }

        protected string drawWho()
        {
            return this.drawFromList(this.who, "");
        }

        protected string drawFromList(ListDrawString list, string defaultString, int probability = 100, bool linear = false)
        {
            //int value = r.Next(100);
            //if (value >= probability) return defaultString;

            if (list.ListCount() > 0)
            {

                if (!linear) return list.getAssociated(ListDrawString.DrawingStyle.Sublist);
                else
                {

                    string str = list.drawLinear();
                    // We rely on the fact that drawing from the list automatically sets LastSelected
                    string associated = list.getAssociated(ListDrawString.DrawingStyle.LastSublist);
                    // if there is no associated, return the key
                    if (String.IsNullOrWhiteSpace(associated))
                    {
                        return str;
                    }
                    else return associated;
                }
            }
            else
                return defaultString;
        }

        public string interpret(string[] code, int tense)
        {
            string[] returnValues = new string[code.Length];
            int x = 0;
            foreach (string str in code)
            {
                int index = -1;
                index = str.IndexOf('.');
                if (index > -1)
                {
                    string[] cmds = str.Split(new char[] { '.' });
                    if (cmds.Length < 2)
                    {
                        returnValues[x++] = this.interpret(str, tense);
                        continue;
                    }
                    else
                    {
                        string gather = "";
                        foreach (var cmd in cmds)
                        {
                            gather += this.interpret(cmd, tense) + " ";
                        }
                        returnValues[x++] = gather.Trim();
                        continue;
                    }
                }
                returnValues[x++] = this.interpret(str, tense);
            }

            return String.Join(" ", returnValues);
        }

        protected string chainedAdjectives(int amount, string seperator, string ender = "")
        {

            return chainedDraws(amount, seperator, this.adjectives, ender);
        }

        protected string chainedDraws(int amount, string seperator, ListDrawString list, string ender = "")
        {
            string[] strs = list.draw(amount);
            if (strs.Length == 0) return "";

            if (strs.Length > 2 && ender.Length > 0)
            {
                // pop the last element
                string finalString = strs[strs.Length - 1];
                List<string> strings = new List<string>(strs);
                strings.RemoveAt(strs.Length - 1);
                strs = strings.ToArray();
                return String.Join(seperator, strs) + ender + finalString;
            }

            return String.Join(seperator, strs);
        }

        protected List<string> copyList(IList<string> list)
        {
            return new List<string>(list.ToArray<string>());
        }

        public virtual ActionParser deepCopy()
        {
            Matter m = new Matter(this.name, this.id);
            m = copy(m);
            return m as ActionParser;
        }

        protected virtual Matter copy(Matter m)
        {
            Console.WriteLine(m.Name + " = Matter accessed");
            m.name = this.name;
            m.id = this.id;
            m.colour = this.colour;
            m.aliases = new ListDrawString(this.aliasPercentage, this.copyList(this.aliases));
            m.adjectives = new ListDrawString(this.adjectivesPercentage, this.copyList(this.adjectives));
            m.states = new ListDrawString(this.statePercentage, this.copyList(this.states));
            m.adverbs = new ListDrawString(this.adverbsPercentage, this.copyList(this.adverbs));
            m.who = new ListDrawString(this.whoPercentage, this.copyList(this.who));
            m.owner = this.owner;
            m.size = this.size;
            m.weight = this.weight;
            m.other = this.other;
            m.AliasPercentage = this.aliasPercentage;
            m.AdverbsPercentage = this.adverbsPercentage;
            m.AdjectivesPercentage = this.adjectivesPercentage;
            m.StatePercentage = this.statePercentage;
            m.WhoPercentage = this.whoPercentage;
            m.groupId = this.groupId;
            m.isUsed = this.isUsed;
            m.isMany = this.isMany;



            foreach (KeyValuePair<string, WordGroup> kp in this.words)
            {
                WordGroup w = new WordGroup(kp.Key);
                w.Words = this.copyList(kp.Value.Words);
                m.words.Add(kp.Key, w);
            }

            return m;
        }

        public string getName()
        {
            return this.Name;
        }
        #region NumberShit
        protected string getNumberInWordForm(int number)
        {

            char[] ageChar = number.ToString().ToCharArray();
            int[] age = new int[ageChar.Length];

            for (int x = 0; x < ageChar.Length; x++)
            {
                age[x] = int.Parse(ageChar[x].ToString());
            }

            switch (ageChar.Length)
            {
                case 0:
                    return "zero";
                case 1:
                    return this.getSingleDigit(number);
                case 2:
                    return this.getSecondsDigit(age[0], age[1]);
                case 3:
                    return this.getThreeDigit(age[0], age[1], age[2]);
                case 4:
                    return getFourDigit(age);
                case 5:
                    return getFiveDigit(age);
                case 6:
                    return getSixDigit(age);
                case 7:
                    return getSevenDigits(age);
                case 8:
                    return getEightDigits(age);
                case 9:
                    return getNineDigits(age);
            }

            return "zero";

        }

        private string getSingleDigit(int value)
        {

            switch (value)
            {
                case 1:
                    return "one";
                case 2:
                    return "two";
                case 3:
                    return "three";
                case 4:
                    return "four";
                case 5:
                    return "five";
                case 6:
                    return "six";
                case 7:
                    return "seven";
                case 8:
                    return "eight";
                case 9:
                    return "nine";
                default:
                    return "";
            }

        }

        private string getTeensDigit(int value)
        {

            switch (value)
            {
                case 1:
                    return "eleven";
                case 2:
                    return "twelve";
                case 3:
                    return "thirteen";
                case 4:
                    return "fourteen";
                case 5:
                    return "fifteen";
                case 6:
                    return "sixteen";
                case 7:
                    return "seventeen";
                case 8:
                    return "eighteen";
                case 9:
                    return "ninteen";
                default:
                    return "ten";
            }

        }

        private string getSecondsDigit(int second, int firstPlaceDigit)
        {
            switch (second)
            {
                case 1:
                    return getTeensDigit(firstPlaceDigit);
                case 2:
                    return "twenty " + getSingleDigit(firstPlaceDigit);
                case 3:
                    return "thirty " + getSingleDigit(firstPlaceDigit);
                case 4:
                    return "fourty " + getSingleDigit(firstPlaceDigit);
                case 5:
                    return "fifty " + getSingleDigit(firstPlaceDigit);
                case 6:
                    return "sixty " + getSingleDigit(firstPlaceDigit);
                case 7:
                    return "seventy " + getSingleDigit(firstPlaceDigit);
                case 8:
                    return "eighty " + getSingleDigit(firstPlaceDigit);
                case 9:
                    return "ninety " + getSingleDigit(firstPlaceDigit);
                default:
                    return getSingleDigit(firstPlaceDigit);
            }
        }

        private string getThreeDigit(int hundredth, int tenth, int first)
        {
            return (((hundredth != 0) ? getSingleDigit(hundredth) + " hundred " : "") + getSecondsDigit(tenth, first)).Trim();
        }

        private string getFourDigit(int[] age)
        {
            return (((age[age.Length - 4] != 0) ? getSingleDigit(age[age.Length - 4]) + " thousand " : "") + getThreeDigit(age[age.Length - 3], age[age.Length - 2], age[age.Length - 1])).Trim();
        }

        private string getFiveDigit(int[] age)
        {
            return ((age[age.Length - 5] != 0) ? getSecondsDigit(age[age.Length - 5], age[age.Length - 4]) : getSingleDigit(age[age.Length - 4])) + " thousand " + getThreeDigit(age[age.Length - 3], age[age.Length - 2], age[age.Length - 1]).Trim();
        }

        private string getSixDigit(int[] age)
        {
            return ((age[age.Length - 6] != 0) ? getThreeDigit(age[age.Length - 6], age[age.Length - 5], age[age.Length - 4]) : getSecondsDigit(age[age.Length - 5], age[age.Length - 4])) + " thousand " + getThreeDigit(age[age.Length - 3], age[age.Length - 2], age[age.Length - 1]).Trim();
        }

        private string getSevenDigits(int[] age)
        {
            return ((age[age.Length - 7] != 0) ? getSingleDigit(age[age.Length - 7]) + " million " : "") + getSixDigit(age).Trim();
        }

        private string getEightDigits(int[] age)
        {
            return ((age[age.Length - 8] != 0) ? getSecondsDigit(age[age.Length - 8], age[age.Length - 7]) : getSingleDigit(age[age.Length - 7])) + " million " + getSixDigit(age).Trim();
        }

        private string getNineDigits(int[] age)
        {
            return ((age[age.Length - 9] != 0) ? getThreeDigit(age[age.Length - 9], age[age.Length - 8], age[age.Length - 7]) : getSecondsDigit(age[age.Length - 8], age[age.Length - 7])) + " million " + getSixDigit(age).Trim();
        }

        #endregion

        #region LegacyVerbShit
        protected string getVerbOddityPresent()
        {
            if (!this.IsMany)
                return "s";
            return "";
        }

        protected string getVerbOddityPresentContinous()
        {
            if (!this.IsMany)
            {
                return "is";
            }
            else
            {
                return "are";
            }
        }

        protected string getVerbOddityPresentPerfect()
        {
            if (!this.IsMany)
            {
                return "has";
            }
            else
            {
                return "have";
            }

        }

        protected string getVerbOddityPresentPerfectContinuous()
        {
            if (!this.IsMany)
            {
                return "has";
            }
            else
            {
                return "have";
            }

        }

        protected string getVerbOddityPastContinuous()
        {
            if (!this.IsMany)
            {
                return "was";
            }
            else
            {
                return "were";
            }

        }
        #endregion

        #region Pronouns
        protected virtual string getPossesivePronoun()
        {
            return this.pronouns.Possessive;

            //if (!this.IsMany)
            //{
            //    return "its"; // not used

            //}
            //else
            //{
            //    return "theirs";
            //}


        }

        protected virtual string getSubjectPronoun()
        {
            return this.pronouns.Subject;

            //if (!this.IsMany)
            //{
            //    return "it";
            //}
            //else
            //{
            //    return "they";
            //}

        }

        protected virtual string getObjectPronouns()
        {
            return this.pronouns.Object;
            //if (!this.IsMany)
            //{
            //    return "it";
            //}
            //else
            //{
            //    return "them";
            //}
        }

        protected virtual string getPossessiveAdjectives()
        {
            return this.pronouns.Personal;
            //if (!this.IsMany)
            //{
            //    return "its";
            //}
            //else
            //{
            //    return "their";
            //}
        }

        protected virtual string getReflexivePronouns()
        {
            return this.pronouns.Reflexive;
            //if (!this.IsMany)
            //{
            //    return "itself";
            //}
            //else
            //{
            //    return "themselves";
            //}
        }
        #endregion

        public virtual ActionParser getClone()
        {
            DBMatter dbMatter = new DBMatter();
            dbMatter = this.getDBObejct(dbMatter) as DBMatter;
            Matter m = new Matter();
            m.setFromDBObject(dbMatter);
            return m;
        }

        public string getJson()
        {
            string muhString = Newtonsoft.Json.JsonConvert.SerializeObject(this);
            return muhString;
        }

        //public virtual ActionParser getClone()
        //{
        //    return this.deepCopy();
        //    //return (ActionParser)Newtonsoft.Json.JsonConvert.DeserializeObject<Matter>(this.getJson());
        //}

        protected void autoRegister(List<Registrable<ActionParser>> list)
        {
            foreach (Registrable<ActionParser> ap in list)
            {
                string name = ap.getName();
                string id = ap.getId();

                if (String.IsNullOrEmpty(id))
                {
                    ap.setId(name);
                    id = ap.getId();
                }

                try
                {
                    this.register(id, (ActionParser)ap, this.registry);
                }
                catch (Exception)
                {

                    this.registry.Remove(id);
                    try
                    {
                        this.register(id, (ActionParser)ap, this.registry);
                    }
                    catch (Exception)
                    {

                        Console.WriteLine("Unable to register " + id + " into the register of " + this.getName() + "'s registery.");
                    }

                    // already in the registry...
                    //throw;
                }
            }
        }

        public virtual void selfRegisterAll()
        {
            this.registry.Clear();
            // register words
            foreach (KeyValuePair<string, WordGroup> kp in this.words)
            {
                this.register(kp.Key, kp.Value, this.registry);
            }
        }
        
        public void analyseSettings(Settings settings)
        {
            this.startCommand = settings.startCommand;
            this.endCommand = settings.endCommand;
        }
        //====================================================================================================================================================================

        public void addToActionList(Registrable<ActionParser> a, List<Registrable<ActionParser>> list)
        {
            list.Add(a);
            if (!String.IsNullOrEmpty(((Registrable<ActionParser>)a).getId())) this.register(a.getId(), (ActionParser)a, this.getDictionaryOfRegisteredObjects());
        }

        public void addToActionList(List<Registrable<ActionParser>> listToAdd, List<Registrable<ActionParser>> list)
        {
            foreach (Registrable<ActionParser> a in listToAdd)
            {
                this.addToActionList(a, list);
            }
        }

        public ActionParser removeActionParser(int index, List<ActionParser> list)
        {
            ActionParser g = list[index];
            list.Remove(g);
            return g;
        }

        public bool isInRegistry<T>(string id, out T registeredObject) where T: ActionParser
        {
            registeredObject = (T)((Registrar<ActionParser>)this).getFromRegistry(id, this.registry);
            return (registeredObject == null) ? false : true;
        }

        public void register(string id, ActionParser item, Dictionary<string, ActionParser> registry)
        {
            if (!String.IsNullOrEmpty(id) && item != null)
            {
                try
                {
                    registry.Add(id, (ActionParser)item);
                    if (item is Registrable<ActionParser>)
                    {
                        (item as Registrable<ActionParser>).setOwner(this);
                    }
                }
                catch (Exception)
                {
                    try
                    {
                        this.registry.Remove(id);
                        registry.Add(id, (ActionParser)item);
                        if (item is Registrable<ActionParser>)
                        {
                            (item as Registrable<ActionParser>).setOwner(this);
                        }
                    }
                    catch (Exception)
                    {
                        Console.WriteLine("A problem occured when registering " + item.getId() + ".");
                    }
                }
            }
        }

        ActionParser Registrar<ActionParser>.getFromRegistry(string id, Dictionary<string, ActionParser> registry)
        {
            ActionParser m = null;

            try
            {
                m = (ActionParser)registry[id];
            }
            catch (Exception)
            {
            }
            if (m != null)
            {
                return m;
            }

            return null;
        }

        public void register(List<ActionParser> items, Dictionary<string, ActionParser> registry)
        {
            foreach (ActionParser m in items)
            {
                this.register(m.getId(), m, registry);
            }
        }

        Dictionary<string, ActionParser> Registrar<ActionParser>.Registry
        {
            get
            {
                this.selfRegisterAll();
                return this.registry;
            }
            set
            {
                this.registry = value;
            }
        }

        public Dictionary<string, ActionParser> getDictionaryOfRegisteredObjects()
        {
            this.selfRegisterAll();
            return this.registry;
        }

        public ActionParser find(string id)
        {
            var dic = this.getDictionaryOfRegisteredObjects();
            ActionParser foundName = null;

            try
            {
                if (dic[id].getId().ToLower() == id.ToLower())
                {
                    //worked
                    foundName = dic[id];
                    return foundName;
                }
            }
            catch (Exception)
            {
                
            }
            return null;
        }

        public static T ObjectFromJson<T>(string json) where T : Matter
        {
            try
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<T>(json);
            }
            catch (Exception)
            {

                return null;
            }
        }

        public string getFullId()
        {
            string id = "";
            if (this.owner != null && this.owner is Matter)
            {
                id = (this.owner as Matter).getFullId() + ".";
            }

            return (id + this.getId()).ToLower();
        }

        public override string ToString()
        {
            if (this.Name.Trim().ToLower().Equals(this.getId().Trim().ToLower()))
                return this.Name;
            return this.Name + " (" + this.getId() + ")";
        }

        public virtual DBbase getDBObejct(DBbase o)
        {
            DBMatter d = o as DBMatter;
            if (d == null) d = new DBMatter();

            d.id = this.dbID;
            //d.scriptId = this.getId();
            d.userId = this.userId;
            d.name = this.getName();
            d.pronoun = this.pronouns.selectedPronoun.ToString();
            d.adjectives = String.Join("|", this.adjectives.getExpandedList().ToArray());
            d.aliases = String.Join("|", this.aliases.getExpandedList().ToArray());
            d.states = String.Join("|", this.states.getExpandedList().ToArray());
            d.adverbs = String.Join("|", this.adverbs.getExpandedList().ToArray());
            d.who = String.Join("|", this.who.getExpandedList().ToArray());
            d.colour = this.colour;
            d.size = this.size;
            d.weight = this.weight;
            d.other = this.other;
            d.statesPercentage = this.statePercentage;
            d.whoPercentage = this.whoPercentage;
            d.adverbsPercentage = this.adverbsPercentage;
            d.adjectivesPercentage = this.adjectivesPercentage;
            d.aliasPercentage = this.aliasPercentage;
            d.globalPercentage = this.GlobalPercentage;
            d.groupId = this.groupId;
            //d.isMany = this.isMany;
            d.isMany = this.isMany ? 1 : 0;
            d.isUsed = this.isUsed ? 1 : 0;
            d.adjectives_readonly = this.adjectives_readonly ? 1 : 0;
            d.adverbs_readonly = this.adverbs_readonly ? 1 : 0;
            d.aliases_readonly = this.aliases_readonly ? 1 : 0;
            d.colour_readonly = this.colour_readonly ? 1 : 0;
            d.isMany_readonly = this.isMany_readonly ? 1 : 0;
            //d.name_readonly = this.name_readonly ? 1 : 0;
            d.other_readonly = this.other_readonly ? 1 : 0;
            d.size_readonly = this.size_readonly ? 1 : 0;
            d.states_readonly = this.states_readonly ? 1 : 0;
            d.weight_readonly = this.weight_readonly ? 1 : 0;
            d.who_readonly = this.who_readonly ? 1 : 0;

            return d as DBbase;
        }

        public virtual void setFromDBObject(DBbase o)
        {
            DBMatter d = o as DBMatter;
            if (d == null) d = new DBMatter();



            this.setPronoun(d.pronoun);
            this.weight = d.weight;
            this.size = d.size;
            this.name = d.name;
            //this.id = d.scriptId;
            this.colour = d.colour;
            this.other = d.other;
            this.statePercentage = d.statesPercentage;
            this.whoPercentage = d.whoPercentage;
            this.adverbsPercentage = d.adverbsPercentage;
            this.adjectivesPercentage = d.adjectivesPercentage;
            this.aliasPercentage = d.aliasPercentage;
            this.GlobalPercentage = d.globalPercentage;
            this.groupId = d.groupId;
            this.dbID = d.id;
            this.userId = d.userId;

            this.isMany = d.isMany == 1 ? true : false;
            this.isUsed = d.isUsed == 1 ? true : false;
            this.adjectives_readonly = d.adjectives_readonly == 1 ? true : false;
            this.adverbs_readonly = d.adverbs_readonly == 1 ? true : false;
            this.aliases_readonly = d.aliases_readonly == 1 ? true : false;
            this.colour_readonly = d.colour_readonly == 1 ? true : false;
            this.isMany_readonly = d.isMany_readonly == 1 ? true : false;
            //this.name_readonly = d.name_readonly == 1 ? true : false;
            this.other_readonly = d.other_readonly == 1 ? true : false;
            this.size_readonly = d.size_readonly == 1 ? true : false;
            this.states_readonly = d.states_readonly == 1 ? true : false;
            this.weight_readonly = d.weight_readonly == 1 ? true : false;
            this.who_readonly = d.who_readonly == 1 ? true : false;

            ListDrawString.SetStringListFromCSV(this.aliases, d.aliases);
            ListDrawString.SetStringListFromCSV(this.adjectives, d.adjectives);
            ListDrawString.SetStringListFromCSV(this.states, d.states);
            ListDrawString.SetStringListFromCSV(this.adverbs, d.adverbs);
            ListDrawString.SetStringListFromCSV(this.who, d.who);
        }

        

        public override bool Equals(System.Object obj)
        {
            // If parameter is null return false.
            if (obj == null)
            {
                return false;
            }

            // If parameter cannot be cast to Point return false.
            Matter p = obj as Matter;
            if ((System.Object)p == null)
            {
                return false;
            }

            // check for reference equality.
            if (System.Object.ReferenceEquals(this, p)) return true;

            // Return true if the fields match:

            return
                (this.getFullId().Equals(p.getFullId()));// &&
                //(this.name.Equals(p.name));
        }

        public virtual int CompareTo(object obj)
        {
            if (obj == null)
                return 1;
            if (!(obj is Matter))
                return -1;
            if ((obj as Matter).Equals(this))
                return 0;
            return this.getId().CompareTo(((Matter)obj).getId());
        }

        public void setId(long id)
        {
            this.dbID = (int)id;
        }

        public enum ListCode
        {
            Adjective,
            State,
            Adverb,
            AdjectiveAndState,
            AdjectiveAndAdverb,
            StateAndAdverb,
            AdjectiveStateAdverb
        }

        protected ListDrawString getDescribingList(string code)
        {
            switch (code.ToUpper())
            {
                case "M":
                    return getDescribingList(ListCode.AdjectiveAndState);
                case "A":
                    return getDescribingList(ListCode.Adjective);
                case "V":
                    return getDescribingList(ListCode.Adverb);
                case "S":
                    return getDescribingList(ListCode.State);
                case "AS":
                    return getDescribingList(ListCode.AdjectiveAndState);
                case "SA":
                    return getDescribingList(ListCode.AdjectiveAndState);
                case "SAV":
                    return getDescribingList(ListCode.AdjectiveStateAdverb);
                case "VS":
                    return getDescribingList(ListCode.StateAndAdverb);
                case "SV":
                    return getDescribingList(ListCode.StateAndAdverb);
                case "AV":
                    return getDescribingList(ListCode.AdjectiveAndAdverb);
                case "VA":
                    return getDescribingList(ListCode.AdjectiveAndAdverb);
            }

            return getDescribingList(ListCode.Adjective);
        }

        protected ListDrawString getDescribingList(ListCode listCode)
        {
            ListDrawString list = new ListDrawString(100);
            switch (listCode)
            {
                case ListCode.Adjective:
                    this.addStringsToList(list, this.Adjectives.ToArray());
                    return list;
                case ListCode.AdjectiveAndAdverb:
                    this.addStringsToList(list, this.Adjectives.ToArray());
                    this.addStringsToList(list, this.Adverbs.ToArray());
                    return list;
                case ListCode.AdjectiveAndState:
                    this.addStringsToList(list, this.Adjectives.ToArray());
                    this.addStringsToList(list, this.States.ToArray());
                    return list;
                case ListCode.AdjectiveStateAdverb:
                    this.addStringsToList(list, this.Adjectives.ToArray());
                    this.addStringsToList(list, this.States.ToArray());
                    this.addStringsToList(list, this.Adverbs.ToArray());
                    return list;
                case ListCode.Adverb:
                    this.addStringsToList(list, this.Adverbs.ToArray());
                    return list;
                case ListCode.State:
                    this.addStringsToList(list, this.States.ToArray());
                    return list;
                case ListCode.StateAndAdverb:
                    this.addStringsToList(list, this.States.ToArray());
                    this.addStringsToList(list, this.Adverbs.ToArray());
                    return list;


            }

            return list;
        }

        // must have started with $,@,%, or +. Those symbols must have been parsed out before as well. 
        protected string multiAdjectiveNounPhrase(string code, string failsafeCode, string article, int tense, ListDrawString list)
        {
            if (String.IsNullOrWhiteSpace(code)) return this.getSubjectPronoun();
            while(code.Length > 0 && (
                code[0] == '$' ||
                code[0] == '@' ||
                code[0] == '%' ||
                code[0] == '+'
                    ) 
                )
            {
                code = code.Remove(0, 1);
                
            }

            int hasStateCode = code.ToUpper().IndexOf('S');
            int hasMixCode = code.ToUpper().IndexOf('M');

            if (hasStateCode > -1)
            {
                code = code.Replace("s", "").Replace("S", "");
            }
            if (hasMixCode > -1)
            {
                code = code.Replace("m", "").Replace("M", "");
            }


            ListDrawString mixedList = new ListDrawString(100);
            if (hasMixCode > -1)
            {
                this.addStringsToList(mixedList, this.Adjectives.ToArray());
                this.addStringsToList(mixedList, this.States.ToArray());
            }
            else
            {
                if (hasStateCode > -1)
                {
                    mixedList = this.states;
                }
                else
                {
                    mixedList = this.adjectives;
                }
            }

            if (hasStateCode > -1)
            {
                code = code.Replace("m", "").Replace("M", "");
            }

            int number = -1;
            string adjectives = "";
            if (int.TryParse(code, out number))
            {
                if (number > 0)
                {
                    adjectives = this.chainedDraws(number, Matter.multipleAdjectivesSeperator, mixedList, Matter.multipleAdjectivesFinalizer);
                }
            }


            // no idea what this code is - not a number 
            if (String.IsNullOrWhiteSpace(adjectives))
            {
                return this.interpret(failsafeCode, tense);
            }

            bool isHuman = (this is Human);
            string interpretedFailsafe;

            if (isHuman)
            {
                interpretedFailsafe = this.interpret("TYPE", tense);
            }
            else
            {
                interpretedFailsafe = this.interpret("N", tense);
            }


            string chosen = this.drawNoConflict(adjectives, list, tense, interpretedFailsafe);
            return article + " " + chosen;
        }

        

        public string getArticle(string code, int tense)
        {
            if (code.ToUpper().StartsWith(postIndefinateArticleCode))
            {
                code = code.Remove(0, 10);
                return this.getIndefinateArticle(code);
            }

            if (code.ToUpper().Equals(indefinateArticleCode))
            {
                string adjectivesAsString = this.interpret(this.chainedDraws(1, multipleAdjectivesSeperator, this.states, multipleAdjectivesFinalizer), tense);
                string selectedMoniker = this.interpret("k", tense);
                return this.startCommand + this.getFullId() + "." + postIndefinateArticleCode + adjectivesAsString + " " + selectedMoniker + this.endCommand;
            }


            if (code.ToUpper().StartsWith(indefinateArticleCode))
            {
                if (code.Length > indefinateArticleCode.Length)
                {
                    code = code.Remove(0, indefinateArticleCode.Length);
                    if ((this is Human) && (this as Human).Perspective != 3) return this.getSubjectPronoun();
                    return this.startCommand + this.getFullId() + "." + postIndefinateArticleCode + multiAdjectiveNounPhrase(code, "$", "", tense, this.aliases).Trim() + this.endCommand;


                    //code = code.Remove(0, indefinateArticleCode.Length);
                    //return this.interpret("*" + code);
                }
                else
                {
                    if (willDraw(this.AliasPercentage))
                    {

                        string adjectivesAsString = this.interpret(this.chainedDraws(1, multipleAdjectivesSeperator, this.states, multipleAdjectivesFinalizer), tense);
                        string selectedMoniker = this.interpret("k", tense);
                        return this.startCommand + this.getFullId() + "." + postIndefinateArticleCode + adjectivesAsString + " " + selectedMoniker + this.endCommand;

                        //string output = "the " + this.interpret("yar");
                        //if (output.Length > 4) return output; else return this.interpret("sp");
                    }
                    else
                    {
                        if (this is Human) return this.interpret("sp", tense);
                        return "the " + this.interpret("k", tense);
                    }
                }
            }

            return "";
        }

        

        //protected string methodParse(string command, out int start, out int end, string methodToken, string characterParameterStarter, string characterParameterEnder, int startingPoint = 0)
        //{
        //    start = 0; end = 0;

        //    start = command.IndexOf(methodToken, startingPoint);
        //    if (start == -1) return command;
        //    if (characterParameterStarter == characterParameterEnder) return command;

        //    int carriageLocation = start;

        //    int nestedAmount = 0;
        //    while (carriageLocation < command.Length - methodToken.Length && (command.Substring(++carriageLocation, methodToken.Length) != methodToken || nestedAmount > 0))
        //    {
        //        if (carriageLocation < command.Length - characterParameterStarter.Length && command.Substring(carriageLocation, characterParameterStarter.Length) == characterParameterStarter) nestedAmount++;
        //        if (carriageLocation < command.Length - characterParameterEnder.Length && command.Substring(carriageLocation, characterParameterEnder.Length) == characterParameterEnder) nestedAmount--;
        //    }

        //    if (nestedAmount != 0) return command;
        //    end = carriageLocation;
        //    if (carriageLocation - (start + methodToken.Length) < 0) return command.Substring(start + methodToken.Length);
        //    return command.Substring(start + methodToken.Length, carriageLocation - (start + methodToken.Length));
        //}

        //protected List<string> parseCommandMethods(string command, string methodToken, string characterParameterStarter, string characterParameterEnder, int startingPoint = 0)
        //{
        //    int start = 0; int end = 0;
        //    List<string> list = new List<string>();

        //    start = command.IndexOf(methodToken, startingPoint);
        //    if (start == -1 || characterParameterStarter == characterParameterEnder)
        //    {
        //        list.Add(command);
        //        return list;
        //    }

        //    list.Add(command.Substring(0, start));

        //    int carriageLocation = start;

        //    while (carriageLocation < command.Length - methodToken.Length)
        //    {
        //        string method = methodParse(command, out start, out end, methodToken, characterParameterStarter, characterParameterEnder, carriageLocation);
        //        if (!String.IsNullOrWhiteSpace(method)) list.Add(method);
        //        carriageLocation = end;
        //    }

        //    return list;
        //}

        #region Method Delegate Stuff
        //public class MethodPackage
        //{
        //    public string MethodName { get; set; }
        //    public string Description { get; set; }
        //    public List<Parameter> ParameterDescriptions = new List<Parameter>();
        //    public delegate string Method(string methodName, List<string> parameters);
        //    public Dictionary<string, Method> methods = new Dictionary<string, Method>();
        //    public void Add(MethodPackage package)
        //    {
        //        // overridding behavior.
        //        for (int x = package.methods.Count - 1; x > -1; x--)
        //        {
        //            bool found = false;
        //            for (int y = this.methods.Count - 1; y > -1; y--)
        //            {
        //                if (package.methods.ElementAt(x).Key.Equals(this.methods.ElementAt(y).Key))
        //                {
        //                    this.methods[this.methods.ElementAt(y).Key] = package.methods.ElementAt(x).Value;
        //                    found = true;
        //                    break;
        //                }
        //            }
        //            if(!found) this.methods.Add(package.methods.ElementAt(x).Key, package.methods.ElementAt(x).Value);
        //        }
                
        //    }
        //    public MethodPackage(string methodName, List<Parameter> parameterDescriptions, string description, Method method)
        //    {
        //        this.MethodName = methodName;
        //        this.Description = description;
        //        this.ParameterDescriptions = parameterDescriptions;
        //        this.methods.Add(this.getSignature(parameterDescriptions), method);
        //    }
        //    private string getSignature(List<Parameter> parameterDescriptions)
        //    {
        //        string final = this.MethodName;
        //        if (parameterDescriptions == null) return final;
        //        foreach (var p in parameterDescriptions)
        //        {
        //            final += "|" + p.ToString();
        //        }
        //        return final;
        //    }
        //    private string getSignature(List<string> parameters)
        //    {
        //        string final = this.MethodName;
        //        if (parameters == null) return final;
        //        foreach (var p in parameters)
        //        {
        //            final += "|" + Parameter.getParameterTypeName(p);
        //        }
        //        return final;
        //    }
        //    private string getSignature()
        //    {
        //        return this.getSignature(this.ParameterDescriptions);
        //    }
        //    public string Invoke(List<string> parameters)
        //    {
        //        try
        //        {

        //            string key = getSignature(parameters);
        //            if (methods.ContainsKey(key))
        //            {
        //                return methods[key].Invoke(this.MethodName, parameters);
        //            }
        //            return "Error: No method " + key;
        //        }
        //        catch (Exception ex)
        //        {
        //            throw ex;
        //        }
        //    }
        //    public override bool Equals(object obj)
        //    {
        //        if (obj == null) return false;
        //        if(!obj.GetType().Equals(typeof(MethodPackage))) return false;
        //        return (obj as MethodPackage).getSignature().Equals(this.getSignature());
        //    }

        //    public class Parameter : IComparable 
        //    {
        //        public string Name { get; set; }
        //        public string Description { get; set; }
        //        private Type ParameterType { get; set; }
        //        private object Value { get; set; }
        //        public Parameter(string name, string description, object value)
        //        {
        //            this.Name = name;
        //            this.Description = description;
        //            if (value == null) throw new Exception("Parameter value cannot be null.");
        //            this.ParameterType = value.GetType();
        //            this.Value = value;
        //        }

        //        private Parameter(string name, string description)
        //        {
        //            this.Name = name;
        //            this.Description = description;
        //        }

        //        public Parameter(string name, string description, Type type): this(name, description)
        //        {
        //            if (type.Equals(typeof(string)) || type.Equals(typeof(int)) || type.Equals(typeof(double)))
        //            {
        //                this.ParameterType = type;
        //            }
        //            else
        //            {
        //                throw new Exception("Parameter type is not allowed.");
        //            }
        //        }

        //        public Parameter(string name, string description, string value):this(name, description)
        //        {
        //            this.setValue(value);
        //        }

        //        public static Parameter getParameter(string value)
        //        {
        //            Parameter p = new Parameter("", "", value);
        //            return p;
        //        }

        //        public static Type parseParameter(string parameter, out object parsed)
        //        {
        //            parsed = null;
        //            if (String.IsNullOrWhiteSpace(parameter))
        //            {
        //                parsed = parameter;
        //                return typeof(string);
        //            }
        //            int number = -1;
        //            if (int.TryParse(parameter, out number))
        //            {
        //                parsed = number;
        //                return typeof(int);
        //            }

        //            double number2 = -1;
        //            if (double.TryParse(parameter, out number2))
        //            {
        //                parsed = number2;
        //                return typeof(double);
        //            }

        //            parsed = parameter;
        //            return typeof(string);
                    
        //        }

        //        public static Type getParameterType(string value)
        //        {
        //            if (String.IsNullOrWhiteSpace(value))
        //            {
        //                return typeof(string);
        //            }
        //            int number = -1;
        //            if (int.TryParse(value, out number))
        //            {
        //                return typeof(int);
        //            }

        //            double number2 = -1;
        //            if (double.TryParse(value, out number2))
        //            {
        //                return typeof(double);
        //            }

        //            return typeof(string);
        //        }

        //        public static string getParameterTypeName(string value)
        //        {
        //            if (String.IsNullOrWhiteSpace(value))
        //            {
        //                return "string";
        //            }
        //            int number = -1;
        //            if (int.TryParse(value, out number))
        //            {
        //                return "int";
        //            }

        //            double number2 = -1;
        //            if (double.TryParse(value, out number2))
        //            {
        //                return "double";
        //            }

        //            return "string";
        //        }

        //        public void setValue(string value)
        //        {
        //            if (String.IsNullOrWhiteSpace(value))
        //            {
        //                this.Value = "";
        //                this.ParameterType = typeof(string);
        //                return;
        //            }
        //            int number = -1;
        //            if (int.TryParse(value, out number))
        //            {
        //                this.ParameterType = typeof(int);
        //                this.Value = number;
        //                return;
        //            }

        //            double number2 = -1;
        //            if (double.TryParse(value, out number2))
        //            {
        //                this.ParameterType = typeof(double);
        //                this.Value = number2;
        //                return;
        //            }

        //            this.ParameterType = typeof(string);
        //            this.Value = value;
        //        }

        //        //public object getValue()
        //        //{
        //        //    if (this.Value.GetType().Equals(this.ParameterType))
        //        //    {
        //        //        return Value;
        //        //    }
        //        //    else throw new Exception("Incorrect Type");
        //        //}

        //        public dynamic getValue()
        //        {
        //            return Convert.ChangeType(this.Value, this.ParameterType);
        //        }

        //        public int CompareTo(object obj)
        //        {
        //            if (obj == null)
        //                return 1;
        //            if (!(obj is Parameter))
        //                return -1;
        //            if ((obj as Parameter).Equals(this))
        //                return 0;
        //            return this.Name.CompareTo(((Parameter)obj).Name);
        //        }

        //        public override bool Equals(object obj)
        //        {
        //            if(obj.GetType().Equals(this.GetType()))
        //            {
        //                return (obj as Parameter).ParameterType.Equals(this.ParameterType);
        //            }
        //            if (this.ParameterType.Equals(typeof(string)))
        //            {
        //                return true;
        //            }
        //            return obj.GetType().Equals(this.ParameterType);

        //            //if(!isSame) return false;
        //            //isSame &= (obj as Parameter).Name.Equals(this.Name);
        //            //isSame &= (obj as Parameter).ParameterType.Equals(this.ParameterType);

        //        }

        //        public override string ToString()
        //        {
        //            if(this.ParameterType.Equals(typeof(string)))
        //            {
        //                return "string";
        //            }
        //            if (this.ParameterType.Equals(typeof(int)))
        //            {
        //                return "int";
        //            }
        //            if (this.ParameterType.Equals(typeof(double)))
        //            {
        //                return "double";
        //            }

        //            return "string";
        //        }
        //    }
        //}

        //public Dictionary<string, MethodPackage> functions = new Dictionary<string, MethodPackage>();

        //public void addMethod(string methodName, MethodPackage methodPackage)
        //{
        //    try
        //    {
        //        if (functions.ContainsKey(methodName))
        //        {
        //            functions[methodName].Add(methodPackage);
        //        }
        //        else
        //        {
        //            functions.Add(methodName, methodPackage);
        //        }
        //    }
        //    catch (Exception ex)
        //    {

        //    }
        //}
        //public void addDelegate(string methodName, string description, List<MethodPackage.Parameter> parameters, MethodPackage.Method deleg)
        //{
        //    if (parameters == null) parameters = new List<MethodPackage.Parameter>();
        //    if (deleg == null)
        //    {
        //        deleg = delegate(string functionName, List<string> para) { return ""; };
        //    }
        //    if (String.IsNullOrWhiteSpace(description)) description = "";
        //    if (String.IsNullOrWhiteSpace(methodName)) methodName = "anonymous";
        //    addMethod(methodName, new MethodPackage(methodName, parameters, description, deleg));
        //}

        //protected List<MethodPackage.Parameter> getFreshParameterDictionary()
        //{
        //    return new List<MethodPackage.Parameter>();
        //}

        //protected int tense = 2;
        protected override void setDelegates()
        {
            MethodPackage.Method method = delegate(string methodName, List<string> parameters)
            {
                return "";
            };
            var parametres = getFreshParameterList();
            string description = "";


            addDelegate("N", "Returns the Name", null, (x, y) => { return this.Name; });
            addDelegate("ID", "Returns this object's ID", null, (x, y) => { return this.getFullId(); });
            addDelegate("C", "Returns the Size", null, (x, y) => { return this.Colour; });
            addDelegate("Z", "Returns the Size", null, (x, y) => { return this.Size; });
            description = "Draws multiple adjectives.";
            addDelegate("A5", description, null, (x, y) => { return this.chainedAdjectives(5, justANDseparator); });
            addDelegate("A2", description, null, (x, y) => { return this.chainedAdjectives(2, justANDseparator); });
            addDelegate("A3", description, null, (x, y) => { return this.chainedAdjectives(3, justANDseparator); });
            addDelegate("A4", description, null, (x, y) => { return this.chainedAdjectives(4, justANDseparator); });
            addDelegate("S2", "", null, (x, y) => { return this.chainedDraws(2, justANDseparator, this.states, Matter.multipleAdjectivesFinalizer); });
            addDelegate("SA", "Returns a state if there is one. If not, it returns an adjective, else an empty string.", null, (x, y) =>
            {
                string state = this.drawFromList(this.states, "", this.StatePercentage);
                string adj = this.chainedAdjectives(1, "");
                if (String.IsNullOrWhiteSpace(state))
                {
                    if (String.IsNullOrWhiteSpace(adj)) return "";
                    return adj;
                }
                if (String.IsNullOrWhiteSpace(adj)) return state;
                return state + Matter.justANDseparator + this.chainedAdjectives(1, "");
            });
            addDelegate("AS", "Either a state or adjective is returned. The adjective has a 70% chance over state. If one is empty, the other is returned.", null, (x, y) =>
            {
                string state1 = this.drawFromList(this.states, "", this.StatePercentage);
                string adjective1 = this.chainedAdjectives(1, "");
                if (String.IsNullOrWhiteSpace(state1)) return adjective1;
                if (String.IsNullOrWhiteSpace(adjective1)) return state1;
                int ran = this.r.Next(0, 10);
                return ((ran < 7) ? adjective1 : state1);
            });
            addDelegate("MOI", "Depending on what is set as 'other', this command returns a determiner phrase that describes the current object how they see it. MOI requires that other has a Trait which follows the following syntax for its script ID: ref", null, (x, y) => { return drawMoi("XX", "$", tense); });
            addDelegate("TOI", "Depending on what is set as 'other', this command returns a determiner phrase that describes the current object how they see it. TOI requires that other has a Trait which follows the following syntax for its script ID: ref", null, (x, y) => { return drawMoi("XX", "@", tense); });
            addDelegate("MON", "Depending on what is set as 'other', this command returns a possessive determiner phrase that describes the current object how they see it and own it. MON requires that other has a Trait which follows the following syntax for its script ID: ref", null, (x, y) => { return drawMon("XX", "+", tense); });
            addDelegate("Y", "Draws 'no conflict' from bother adjectives and monikers.", null, (x, y) => { string eitherOr = (this.r.Next(0, 100) > 50) ? "A-A" : "S-A"; return this.drawNoConflict(this.interpret(eitherOr, tense), this.aliases, tense, this.aliasFailSafe()); });
            addDelegate("YAR", "Does a command 'A-A' and draws from the moniker list. If no moniker exists, the command substitutes that with the 'TYPE' command for Humans, and 'N' command for objects.", null,
                (x, y) =>
                {
                    return this.drawNoConflict(this.doDrawFromListString("ADJECTIVES", "A"), this.aliases, tense, this.aliasFailSafe()); ;
                    return this.drawNoConflict(this.interpret("A-A", tense), this.aliases, tense, this.aliasFailSafe());
                });
            addDelegate("YSR", "Does a command 'S-A' and draws from the moniker list. If no moniker exists, the command substitutes that with the 'TYPE' command for Humans, and 'N' command for objects.", null,
                (x, y) =>
                {
                    return this.drawNoConflict(this.doDrawFromListString("STATES", "A"), this.aliases, tense, this.aliasFailSafe());
                    return this.drawNoConflict(this.interpret("S-A", tense), this.aliases, tense, this.aliasFailSafe());
                });
            addDelegate("W", "Gets the weight in digit form.", null, (x, y) => { return this.Weight.ToString(); });
            addDelegate("W-W", "Gets the weight in word form.", null, (x, y) => { return this.getNumberInWordForm(this.Weight); });
            addDelegate("W-WH", "Gets the weight in word form with hyphens.", null, (x, y) => { return this.getNumberInWordForm(this.Weight).Replace(' ', '-'); });
            addDelegate("OTHER", "Returns the script ID of the object specified in the 'other' textbox.", null, (x, y) => { return this.other; });
            addDelegate("F-C", "Returns the list item with surrounding commas. Intended to act like a mid-sentence preposition. e.g. [man.$.f-c.verb(attacked)]", null, (x, y) => { return evaluateProbability(", " + this.who.getAssociated() + ", ", this.WhoPercentage); });
            
            description = "Draws from list a random string.";
            addDelegate("F", description, null, (x, y) => { return this.who.draw(); });
            addDelegate("S", description, null, (x, y) => { return this.states.draw(); });
            addDelegate("V", description, null, (x, y) => { return this.adverbs.draw(); });
            addDelegate("A", description, null, (x, y) => { return this.adjectives.draw(); });
            addDelegate("K", description, null, (x, y) => { string monikerFound = this.aliases.draw(); if (String.IsNullOrWhiteSpace(monikerFound)) return this.aliasFailSafe(); return monikerFound; });
            
            description = "Draws from the list defined by the list chosen in a way defined by operation.";
            parametres = getFreshParameterList();
            parametres.Add(new MethodPackage.Parameter("Array of Strings", "The main list to draw from.", typeof(string)));
            parametres.Add(new MethodPackage.Parameter("Operation", "The Operation to be executed on the list.\nLinear,Last,Key,Value,Forced,Both", typeof(string)));
            addDelegate("DRAW", description, parametres, (x, y) => {return this.doDrawFromListString(MethodPackage.Parameter.getParameter(y[0]).getValue(), MethodPackage.Parameter.getParameter(y[1]).getValue());});

            description = "Noun Phrase. Draws from the alias list defined by the list chosen in a way defined by operation parameter";
            parametres = getFreshParameterList();
            parametres.Add(new MethodPackage.Parameter("Operation", "The Operation to be executed on the list.\nLinear,Last,Key,Value,Forced,Both", typeof(string)));
            parametres.Add(new MethodPackage.Parameter("Count", "The Amount to draw from a describing list, either Adj, Adv, states.", typeof(int)));
            parametres.Add(new MethodPackage.Parameter("Mode", "Certain modes behave differently. M,A,V,S,AS,SA,VA,AV,VS,SV,SAV", typeof(string)));
            parametres.Add(new MethodPackage.Parameter("Article", "Indefinet article code to use., This,That,The,A,My,None", typeof(string)));
            addDelegate("NP", description, parametres, (x, y) => 
            {
                string param1 = MethodPackage.Parameter.getParameter(y[0]).getValue();
                int param2 = MethodPackage.Parameter.getParameter(y[1]).getValue();
                string param3 = MethodPackage.Parameter.getParameter(y[2]).getValue();
                string param4 = MethodPackage.Parameter.getParameter(y[3]).getValue();

                string adjectives = this.chainedDraws(
                    param2,
                    Matter.multipleAdjectivesSeperator,
                    getDescribingList(param3.Trim()),
                    Matter.multipleAdjectivesFinalizer
                );

                    

                string alias = this.doDrawFromListString("Aliases", param1);

                string article = "";
                switch (param4.ToUpper().Trim())
                {
                    case "A":
                        article = this.getIndefinateArticle("");
                        break;
                    case "THE":
                        article = "the";
                        break;
                    case "THIS":
                        article = (this.isMany) ? "these" : "this";
                        break;
                    case "THAT":
                        article = (this.isMany) ? "those" : "that";
                        break;
                    case "MY":
                        if(this.Owner != null && this.Owner is Human)
                        {
                            article = (this.Owner as Human).getPossessiveAdjectives();
                        }
                        else article = this.getPossessiveAdjectives();
                        break;
                    case "NONE":
                        article = "";
                        break;
                }

                return article + " " + adjectives + " " + alias;

            });

            //string adjectives = this.chainedDraws(
            //            MethodPackage.Parameter.getParameter(y[0]).getValue(),
            //            Matter.multipleAdjectivesSeperator,
            //            getDescribingList(MethodPackage.Parameter.getParameter(y[1]).getValue()),
            //            Matter.multipleAdjectivesFinalizer
            //            );
            //if (int.TryParse(methodName, out methodNumber))
            //{
            //    if (methodNumber < 3)
            //        return this.chainedAdjectives(methodNumber, ", ");
            //    else
            //        return this.chainedAdjectives(methodNumber, ", ", ", and ");


            #region Legacy List Function
            description = "Gets the next associative value int the list";
            addDelegate("F-S", description, null, (x, y) => { return this.drawFromList(this.who, "", this.WhoPercentage, true); });
            addDelegate("S-S", description, null, (x, y) => { return this.drawFromList(this.states, "", this.StatePercentage, true); });
            addDelegate("V-S", description, null, (x, y) => { return this.drawFromList(this.adverbs, "", this.AdverbsPercentage, true); });
            addDelegate("A-S", description, null, (x, y) => { return this.drawFromList(this.adjectives, "", this.AdjectivesPercentage, true); });
            addDelegate("K-S", description, null, (x, y) => { return this.drawFromList(this.aliases, "", this.AliasPercentage, true); });
            
            description = "Gets the associative value for a random key";
            addDelegate("F-A", description, null, (x, y) => { return evaluateProbability(this.who.getAssociated(), this.WhoPercentage); });
            addDelegate("S-A", description, null, (x, y) => { return evaluateProbability(this.states.getAssociated(), this.StatePercentage); });
            addDelegate("V-A", description, null, (x, y) => { return evaluateProbability(this.adverbs.getAssociated(), this.AdverbsPercentage); });
            addDelegate("A-A", description, null, (x, y) => { return evaluateProbability(this.adjectives.getAssociated(), this.AdjectivesPercentage); });
            addDelegate("K-A", description, null, (x, y) => { return this.aliases.getAssociated(); });
            
            description = "Draws only from items that have associative values, and returns only the associative value.";
            addDelegate("F-F", description, null, (x, y) => { return evaluateProbability(this.who.getAssociated(ListDrawString.DrawingStyle.ForcedSublist), this.WhoPercentage); });
            addDelegate("S-F", description, null, (x, y) => { return evaluateProbability(this.states.getAssociated(ListDrawString.DrawingStyle.ForcedSublist), this.StatePercentage); });
            addDelegate("V-F", description, null, (x, y) => { return evaluateProbability(this.adverbs.getAssociated(ListDrawString.DrawingStyle.ForcedSublist), this.AdverbsPercentage); });
            addDelegate("A-F", description, null, (x, y) => { return evaluateProbability(this.adjectives.getAssociated(ListDrawString.DrawingStyle.ForcedSublist), this.AdjectivesPercentage); });
            addDelegate("K-F", description, null, (x, y) => { return this.aliases.getAssociated(ListDrawString.DrawingStyle.ForcedSublist); });
            
            description = "Returns the last selected item fromt the list.";
            addDelegate("F-L", description, null, (x, y) => { return this.who.LastSelected; });
            addDelegate("S-L", description, null, (x, y) => { return this.states.LastSelected; });
            addDelegate("V-L", description, null, (x, y) => { return this.adverbs.LastSelected; });
            addDelegate("A-L", description, null, (x, y) => { return this.adjectives.LastSelected; });
            addDelegate("K-L", description, null, (x, y) => { return this.aliases.LastSelected; });
            
            description = "Draws only from items that have associative values and returns both key and value like so: {key}{space}{value}";
            addDelegate("F-R", description, null, (x, y) => { return this.who.getAssociated(ListDrawString.DrawingStyle.ForcedBoth); });
            addDelegate("S-R", description, null, (x, y) => { return this.states.getAssociated(ListDrawString.DrawingStyle.ForcedBoth); });
            addDelegate("V-R", description, null, (x, y) => { return this.adverbs.getAssociated(ListDrawString.DrawingStyle.ForcedBoth); });
            addDelegate("K-R", description, null, (x, y) => { return this.aliases.getAssociated(ListDrawString.DrawingStyle.ForcedBoth); });
            addDelegate("A-R", description, null, (x, y) => { return this.adjectives.getAssociated(ListDrawString.DrawingStyle.ForcedBoth); });
            

            #endregion

            parametres = getFreshParameterList();
            addDelegate("EMPTY", "Returns an empty string.", null, (x, y) => { return ""; });
            addDelegate("VIDE", "French for empty. Acts the same as the EMPTY command.", null, (x, y) => { return ""; });
            addDelegate("ISMANY", "Returns either 'true' or 'false' as a string.", null, (x, y) => { return ((this.IsMany) ? "true" : "false"); });
            addDelegate("PA", "Gets the possessive adjective/determinator.", null, (x, y) => { return this.getPossessiveAdjectives(); });
            addDelegate("RP", "Gets the reflextive pronoun.", null, (x, y) => { return this.getReflexivePronouns(); });
            addDelegate("DA", "Demonstrative adjective. The pronoun giving is contingient on the pov and if the object is considered as many objects.", null, (x, y) => { return (this.isMany) ? "these" : "this"; });
            addDelegate("DAFAR", "Demonstrative adjective. Those or that.", null, (x, y) => { return (this.isMany) ? "those" : "that"; });
            addDelegate("DACLOSE", "Demonstrative adjective. This or these", null, (x, y) => { return (this.isMany) ? "these" : "this"; });
            addDelegate("G", "Returns the group ID digit.", null, (x, y) => { return this.GroupId.ToString(); });
            addDelegate("AOP", "Adverb of place", null, (x, y) => { return "that " + this.drawWho(); });
            addDelegate("FF", "Returns 'that' with a draw from the fact list.", null, (x, y) => { return "there"; });
            addDelegate("FSP", "Returns 'that' with a draw from the fact list.", null, (x, y) => { return "who " + this.drawWho(); });
            addDelegate("FOP", "Returns 'that' with a draw from the fact list.", null, (x, y) => { return "that " + this.drawWho(); });
            addDelegate("POV", "Returns an integer that represents the point of view of the character.", null, (x, y) => { return "3"; });

            addDelegate("PP", "", null, (x, y) => { return this.getPossesivePronoun(); });
            addDelegate("PPP", "", null, (x, y) => {
                if (this.Name.EndsWith("s")) return this.Name + "'";
                return this.Name + "'s"; 
            });
            addDelegate("SP", "", null, (x, y) => { return this.getSubjectPronoun(); });
            addDelegate("SPP", "", null, (x, y) => { return this.Name; });
            addDelegate("OP", "", null, (x, y) => { return this.getObjectPronouns(); });
            addDelegate("OPP", "", null, (x, y) => { return this.Name; });
            addDelegate("PAP", "", null, (x, y) => {
                if (this.Name.EndsWith("s")) return this.Name + "'";
                return this.Name + "'s"; 
            });

            //==========================================================================================================
            method = (methodName, parameters) =>
            {
                // Remove the W and pass the code along to the owner object
                if (this.Owner != null && this.Owner is Matter)
                    return (this.Owner as Matter).interpret(methodName.Remove(0, 1), tense);
                return this.interpret(methodName.Remove(0, 1), tense);
            };
            parametres = getFreshParameterList();
            addDelegate("WSP", "Returns the parent's SP code.", parametres, method);
            addDelegate("WOP", "Returns the parent's OP code.", parametres, method);
            addDelegate("WPA", "Returns the parent's PA code.", parametres, method);
            addDelegate("WPP", "Returns the parent's PP code.", parametres, method);
            addDelegate("WRP", "Returns the parent's RP code.", parametres, method);
            addDelegate("WSPP", "Returns the parent's SPP code.", parametres, method);
            addDelegate("WOPP", "Returns the parent's OPP code.", parametres, method);
            addDelegate("WPAP", "Returns the parent's PAP code.", parametres, method);
            addDelegate("WPPP", "Returns the parent's PPP code.", parametres, method);
            addDelegate("WRPP", "Returns the parent's RPP code.", parametres, method);
            //==========================================================================================================
            parametres = getFreshParameterList();
            parametres.Add(new MethodPackage.Parameter("key", "The key needed to match the list with.", typeof(string)));
            description = "Gets the associated item given the key supplied.";
            addDelegate("S", description, parametres, (x, y) => { return this.states.fetch(y[0]);});
            addDelegate("K", description, parametres, (x, y) => { return this.aliases.fetch(y[0]); });
            addDelegate("V", description, parametres, (x, y) => { return this.adverbs.fetch(y[0]); });
            addDelegate("F", description, parametres, (x, y) => { return this.who.fetch(y[0]); });
            addDelegate("A", description, parametres, (x, y) => { return this.adjectives.fetch(y[0]); });
            //==========================================================================================================
            parametres = getFreshParameterList();
            parametres.Add(new MethodPackage.Parameter("Whole Number", "The whole number to convert to text.", typeof(int)));
            addDelegate("NUMBERTOTEXT", "Converts a number in text form.", parametres, (methodName, parameters) =>
            {
                var para = MethodPackage.Parameter.getParameter(parameters[0]);
                return this.getNumberInWordForm((int)para.getValue());
            });
            //==========================================================================================================
            parametres = getFreshParameterList();
            parametres.Add(new MethodPackage.Parameter("Adjective", "The adjective to convert to adverb", typeof(string)));
            addDelegate("ADVERB", "Converts most adjectives to adverbs. Simply adds -ly to word. Useful to use on existing list of adjectives.", parametres, (x, y) => { return Adverb.adjectiveToAdverb(y[0]); });
            //==========================================================================================================
            parametres = getFreshParameterList();
            parametres.Add(new MethodPackage.Parameter("verb", "The verb to convert to an adverb, in infinitive form.", typeof(string)));
            addDelegate("verbToAdverb".ToUpper(), "Converts most verbs to adverbs. Useful with a list of predefined verbs to apply to.", parametres, (x, y) => { return Adverb.adjectiveToAdverb(y[0]); });

            //==========================================================================================================
            addDelegate("ART", "Gets a noun phrase starting with an indefinate article.", getFreshParameterList(), delegate(string methodName, List<string> parameters)
            {
                ListDrawString list = new ListDrawString(this.adjectives.DrawRate);
                list.AddRange(this.states);
                list.AddRange(this.adjectives);
                // has to be interpreted to ensure that whatever the list spits out is not a code to be interpreted. 
                string adjectivesAsString = this.interpret(this.chainedDraws(1, multipleAdjectivesSeperator, list, multipleAdjectivesFinalizer), this.tense);
                string selectedMoniker = this.interpret("k", this.tense);
                return this.getIndefinateArticle(selectedMoniker, adjectivesAsString);
            });
            //==========================================================================================================

            #region $@+%
            //==========================================================================================================
            addDelegate("@", "Objective noun phrase if the character is in the third person. Else returns a standard objective pronoun. (I, you)", null, (x, y) =>
            {
                if (willDraw(this.AliasPercentage))
                {
                    string da = "the";
                    string yar = this.interpret("yar", tense);
                    if (!String.IsNullOrWhiteSpace(yar)) return da + " " + yar; else return this.interpret("op", tense);
                }
                else
                {
                    return "the " + this.interpret("k-a", tense);
                }
            });
            //==========================================================================================================
            parametres = getFreshParameterList(); parametres.Add(new MethodPackage.Parameter("Adjective Count", "The amount of adjectives to be drawn.", typeof(int)));
            addDelegate("@", "Objective noun phrase if the character is in the third person. Else returns a standard objective pronoun. (I, you)", parametres, (x, y) =>
            {
                if (willDraw(this.AliasPercentage))
                {
                    string da = "the";
                    string adjectives = this.chainedDraws(MethodPackage.Parameter.getParameter(y[0]).getValue(), Matter.multipleAdjectivesSeperator, getDescribingList(ListCode.Adjective), Matter.multipleAdjectivesFinalizer);
                    string moniker =  this.interpret("k-a", tense);
                    if (!String.IsNullOrWhiteSpace(adjectives)) return da + " " + adjectives + " " + moniker; else return this.interpret("op", tense);
                }
                else
                {
                    return "the " + this.interpret("k-a", tense);
                }
            });
            //==========================================================================================================
            parametres = getFreshParameterList();
            parametres.Add(new MethodPackage.Parameter("Adjective Count", "The amount of adjectives to be drawn.", typeof(int)));
            parametres.Add(new MethodPackage.Parameter("Mode", "Lists to use. M,A,V,S,AS,SA,VA,AV,VS,SV,SAV", typeof(string)));
            addDelegate("@", "Objective noun phrase if the character is in the third person. Else returns a standard objective pronoun. (I, you)", parametres, (x, y) =>
            {
                if (willDraw(this.AliasPercentage))
                {
                    string da = "the";
                    string adjectives = this.chainedDraws(
                        MethodPackage.Parameter.getParameter(y[0]).getValue(),
                        Matter.multipleAdjectivesSeperator,
                        getDescribingList(MethodPackage.Parameter.getParameter(y[1]).getValue()),
                        Matter.multipleAdjectivesFinalizer
                        );
                    string moniker = this.interpret("k-a", tense);
                    if (!String.IsNullOrWhiteSpace(adjectives) && !String.IsNullOrWhiteSpace(moniker)) return da + " " + adjectives + " " + moniker; else return this.interpret("op", tense);
                }
                else
                {
                    return this.interpret("@", tense);
                }
            });
            //==========================================================================================================
            addDelegate("$", "Subjective noun phrase if the character is in the third person. Else returns a standard subjective pronoun. (I, you)", null, (x, y) =>
            {
                if (willDraw(this.AliasPercentage))
                {
                    string da = "the"; //this.interpret("da", tense);
                    string yar = this.interpret("yar", tense);
                    if (!String.IsNullOrWhiteSpace(yar)) return da + " " + yar; else return this.interpret("sp", tense);
                    //if (!String.IsNullOrWhiteSpace(yar))
                    //{
                    //    if (yar.EndsWith("s")) return "the " + yar + "'";
                    //    return "the " + yar + "'s";
                    //}
                    //else return this.interpret("sp", tense);
                }
                else
                {
                    return "the " + this.interpret("k-a", tense);
                }
            });
            //==========================================================================================================
            parametres = getFreshParameterList(); parametres.Add(new MethodPackage.Parameter("Adjective Count", "The amount of adjectives to be drawn.", typeof(int)));
            addDelegate("$", "Subjective noun phrase if the character is in the third person. Else returns a standard subjective pronoun. (I, you)", parametres, (x, y) =>
            {
                if (willDraw(this.AliasPercentage))
                {
                    string da = "the";
                    string adjectives = this.chainedDraws(MethodPackage.Parameter.getParameter(y[0]).getValue(), Matter.multipleAdjectivesSeperator, getDescribingList(ListCode.Adjective), Matter.multipleAdjectivesFinalizer);
                    string moniker = this.interpret("k-a", tense);
                    if (!String.IsNullOrWhiteSpace(adjectives)) return da + " " + adjectives + " " + moniker; else return this.interpret("sp", tense);
                }
                else
                {
                    return "the " + this.interpret("k-a", tense);
                }
            });
            //==========================================================================================================
            addDelegate("+", "Possessive noun phrase if the character is in the third person. Returns standard possesive adjective otherwise. (my, your)", null, (x, y) =>
            {
                if (willDraw(this.AliasPercentage))
                {
                    string yar = this.interpret("yar", tense);
                    if (!String.IsNullOrWhiteSpace(yar))
                    {
                        if (yar.EndsWith("s")) return "the " + yar + "'";
                        return "the " + yar + "'s";
                    }
                    else return this.interpret("pa", tense);
                }
                else
                {
                    string moniker = this.interpret("k-a", tense); moniker += (moniker.EndsWith("s")) ? "'" : "'s";
                    return "the " + moniker;
                    //return "the " + this.interpret("k-a", tense) + "'s";
                }
            });
            //==========================================================================================================
            parametres = getFreshParameterList(); parametres.Add(new MethodPackage.Parameter("Adjective Count", "The amount of adjectives to be drawn.", typeof(int)));
            addDelegate("+", "Possessive noun phrase if the character is in the third person. Returns standard possesive adjective otherwise. (my, your)", parametres, (x, y) =>
            {
                if (willDraw(this.AliasPercentage))
                {
                    string da = "the";
                    string adjectives = this.chainedDraws(MethodPackage.Parameter.getParameter(y[0]).getValue(), Matter.multipleAdjectivesSeperator, getDescribingList(ListCode.Adjective), Matter.multipleAdjectivesFinalizer);
                    string moniker = this.interpret("k-a", tense); moniker += (moniker.EndsWith("s")) ? "'" : "'s";
                    if (!String.IsNullOrWhiteSpace(adjectives)) return da + " " + adjectives + " " + moniker; else return this.interpret("pa", tense);
                }
                else
                {
                    string moniker = this.interpret("k-a", tense); moniker += (moniker.EndsWith("s")) ? "'" : "'s";
                    return "the " + moniker;
                    //return "the " + this.interpret("k-a", tense) + "'s";
                }
            });
            //==========================================================================================================
            addDelegate("%", "Possessive noun phrase if the character is in the third person. Returns standard possesive pronoun otherwise. (mine, yours)", null, (x, y) =>
            {
                if (willDraw(this.AliasPercentage))
                {
                    string yar = this.interpret("yar", tense);
                    if (!String.IsNullOrWhiteSpace(yar))
                    {
                        if (yar.EndsWith("s")) return "the " + yar + "'";
                        return "the " + yar + "'s";
                    }
                    else return this.interpret("pp", tense);
                }
                else
                {
                    string moniker = this.interpret("k-a", tense); moniker += (moniker.EndsWith("s")) ? "'" : "'s";
                    return "the " + moniker;
                    //return "the " + this.interpret("k-a", tense) + "'s";
                }
            });
            //==========================================================================================================
            parametres = getFreshParameterList(); parametres.Add(new MethodPackage.Parameter("Adjective Count", "The amount of adjectives to be drawn.", typeof(int)));
            addDelegate("%", "Possessive noun phrase if the character is in the third person. Returns standard possesive pronoun otherwise. (mine, yours)", parametres, (x, y) =>
            {
                if (willDraw(this.AliasPercentage))
                {
                    string da = "the";
                    string adjectives = this.chainedDraws(MethodPackage.Parameter.getParameter(y[0]).getValue(), Matter.multipleAdjectivesSeperator, getDescribingList(ListCode.Adjective), Matter.multipleAdjectivesFinalizer);
                    string moniker = this.interpret("k-a", tense); moniker += (moniker.EndsWith("s")) ? "'" : "'s";
                    if (!String.IsNullOrWhiteSpace(adjectives)) return da + " " + adjectives + " " + moniker; else return this.interpret("pp", tense);
                }
                else
                {
                    string moniker = this.interpret("k-a", tense); moniker += (moniker.EndsWith("s")) ? "'" : "'s";
                    return "the " + moniker;
                    //return "the " + this.interpret("k-a", tense) + "'s";
                }

            });
            //==========================================================================================================
            addDelegate("$$$", "returns a 'the' noun phrase, but failsafes using SPP and ensures that adjectives do not contain the noun within them. E.g. Godlike god", null, (x, y) => { return tripleDollarSign(); });
            //==========================================================================================================
            parametres = getFreshParameterList(); parametres.Add(new MethodPackage.Parameter("Adjective Count", "The amount of adjectives to be drawn.", typeof(int)));
            addDelegate("$$$", "Something", parametres, (x, y) => { return tripleDollarSign(MethodPackage.Parameter.getParameter(y[0]).getValue()); });
            //==========================================================================================================
            addDelegate("@@@", "Something", null, (x, y) => { return tripleAtSign(); });
            //==========================================================================================================
            parametres = getFreshParameterList(); parametres.Add(new MethodPackage.Parameter("Adjective Count", "The amount of adjectives to be drawn.", typeof(int)));
            addDelegate("@@@", "Something", parametres, (x, y) => { return tripleAtSign(MethodPackage.Parameter.getParameter(y[0]).getValue()); });
            //==========================================================================================================
            addDelegate("$$", "Something", null, (x, y) => { return referenceMeByOther("ref" + this.Id, "$", new string[] { "~the", "as", "k" }, tense); });
            addDelegate("@@", "Something", null, (x, y) => { return referenceMeByOther("ref" + this.Id, "@", new string[] { "da", "as", "k" }, tense); });
            addDelegate("++", "Something", null, (x, y) => { return referenceMeByOther("ref" + this.Id, "+", new string[] { "wpa", "as", "k" }, tense); });
            addDelegate("%%", "Something", null, (x, y) => { return referenceMeByOther("ref" + this.Id, "%", new string[] { "~the", "as", "k", "~of", "wpp" }, tense); });

            #endregion

            
            #region $@+% With Mode
            
            //==========================================================================================================
            parametres = getFreshParameterList();
            parametres.Add(new MethodPackage.Parameter("Adjective Count", "The amount of adjectives to be drawn.", typeof(int)));
            parametres.Add(new MethodPackage.Parameter("Mode", "Lists to use. M,A,V,S,AS,SA,VA,AV,VS,SV,SAV", typeof(string)));
            addDelegate("$", "Subjective noun phrase if the character is in the third person. Else returns a standard subjective pronoun. (I, you)", parametres, (x, y) =>
            {
                if (willDraw(this.AliasPercentage))
                {
                    string da = "the";
                    string adjectives = this.chainedDraws(
                        MethodPackage.Parameter.getParameter(y[0]).getValue(),
                        Matter.multipleAdjectivesSeperator,
                        getDescribingList(MethodPackage.Parameter.getParameter(y[1]).getValue()),
                        Matter.multipleAdjectivesFinalizer
                        );
                    string moniker = this.interpret("k-a", tense);
                    if (!String.IsNullOrWhiteSpace(adjectives) && !String.IsNullOrWhiteSpace(moniker)) return da + " " + adjectives + " " + moniker; else return this.interpret("sp", tense);
                }
                else
                {
                    return this.interpret("$", tense);
                }
            });
            //==========================================================================================================
            parametres = getFreshParameterList();
            parametres.Add(new MethodPackage.Parameter("Adjective Count", "The amount of adjectives to be drawn.", typeof(int)));
            parametres.Add(new MethodPackage.Parameter("Mode", "Lists to use. M,A,V,S,AS,SA,VA,AV,VS,SV,SAV", typeof(string)));
            addDelegate("+", "Possessive noun phrase if the character is in the third person. Returns standard possesive adjective otherwise. (my, your)", parametres, (x, y) =>
            {
                if (willDraw(this.AliasPercentage))
                {
                    string da = "the";
                    string adjectives = this.chainedDraws(
                        MethodPackage.Parameter.getParameter(y[0]).getValue(),
                        Matter.multipleAdjectivesSeperator,
                        getDescribingList(MethodPackage.Parameter.getParameter(y[1]).getValue()),
                        Matter.multipleAdjectivesFinalizer
                        );
                    string moniker = this.interpret("k-a", tense); moniker += (moniker.EndsWith("s")) ? "'" : "'s";
                    if (!String.IsNullOrWhiteSpace(adjectives) && !String.IsNullOrWhiteSpace(moniker)) return da + " " + adjectives + " " + moniker; else return this.interpret("pa", tense);
                }
                else
                {
                    string moniker = this.interpret("k-a", tense); moniker += (moniker.EndsWith("s")) ? "'" : "'s";
                    return "the " + moniker;
                    //return "the " + this.interpret("k-a", tense) + "'s";
                }
            });
            //==========================================================================================================
            parametres = getFreshParameterList();
            parametres.Add(new MethodPackage.Parameter("Adjective Count", "The amount of adjectives to be drawn.", typeof(int)));
            parametres.Add(new MethodPackage.Parameter("Mode", "Lists to use. M,A,V,S,AS,SA,VA,AV,VS,SV,SAV", typeof(string)));
            addDelegate("%", "Possessive noun phrase if the character is in the third person. Returns standard possesive pronoun otherwise. (mine, yours)", parametres, (x, y) =>
            {
                if (willDraw(this.AliasPercentage))
                {
                    string da = "the";
                    string adjectives = this.chainedDraws(
                        MethodPackage.Parameter.getParameter(y[0]).getValue(),
                        Matter.multipleAdjectivesSeperator,
                        getDescribingList(MethodPackage.Parameter.getParameter(y[1]).getValue()),
                        Matter.multipleAdjectivesFinalizer
                        );
                    string moniker = this.interpret("k-a", tense); moniker += (moniker.EndsWith("s")) ? "'" : "'s";
                    if (!String.IsNullOrWhiteSpace(adjectives) && !String.IsNullOrWhiteSpace(moniker)) return da + " " + adjectives + " " + moniker; else return this.interpret("pp", tense);
                }
                else
                {
                    string moniker = this.interpret("k-a", tense); moniker += (moniker.EndsWith("s")) ? "'" : "'s";
                    return "the " + moniker;
                    //return "the " + this.interpret("k-a", tense) + "'s";
                }

            });
            #endregion

            #region Verb Methods
            parametres = getFreshParameterList();
            parametres.Add(new MethodPackage.Parameter("Infinitive", "The verb in infinitive form.", typeof(string)));

            addDelegate("V", "Verbs", parametres, (x, y) =>
            {
                var relativeTense = Verb.getTenseFromInt(this.tense);
                var verb = new Verb(y[0], this.isMany, 3, Classes.Verb.Gender.it, relativeTense);
                return verb.getVerb();
            });

            parametres = getFreshParameterList();
            parametres.Add(new MethodPackage.Parameter("Infinitive", "The verb in infinitive form.", typeof(string)));
            parametres.Add(new MethodPackage.Parameter("Relative tense", "Values accepted are -1, 0, 1, 2", typeof(int)));
            addDelegate("V", "Verbs", parametres, (x, y) =>
            {
                int secondParameter = MethodPackage.Parameter.getParameter(y[1]).getValue();
                if (secondParameter < -1 || secondParameter > 2) secondParameter = 0;
                var relativeTense = Verb.getTenseFromInt(this.tense + secondParameter);
                //var relativeTense = Verb.getTenseFromInt(this.tense + MethodPackage.Parameter.getParameter(y[1]).getValue());
                var verb = new Verb(y[0], this.isMany, 3, Classes.Verb.Gender.it, relativeTense);
                return verb.getVerb();
            });

            parametres = getFreshParameterList();
            parametres.Add(new MethodPackage.Parameter("Infinitive", "The verb in infinitive form.", typeof(string)));
            parametres.Add(new MethodPackage.Parameter("Relative tense", "Values accepted are -1, 0, 1, 2", typeof(int)));
            parametres.Add(new MethodPackage.Parameter("Adverb", "And adverb to slap into the verb phrase.", typeof(string)));
            addDelegate("V", "Verbs", parametres, (x, y) =>
            {
                int secondParameter = MethodPackage.Parameter.getParameter(y[1]).getValue();
                if (secondParameter < -1 || secondParameter > 2) secondParameter = 0;
                var relativeTense = Verb.getTenseFromInt(this.tense + secondParameter);
                //var relativeTense = Verb.getTenseFromInt(this.tense + MethodPackage.Parameter.getParameter(y[1]).getValue());
                var verb = new Verb(y[0], this.isMany, 3, Classes.Verb.Gender.it, relativeTense, y[2]);
                return verb.getVerb();
            });
            parametres = getFreshParameterList();
            parametres.Add(new MethodPackage.Parameter("Infinitive", "The verb in infinitive form.", typeof(string)));
            parametres.Add(new MethodPackage.Parameter("Adverb", "And adverb to slap into the verb phrase.", typeof(string)));
            addDelegate("V", "Verbs", parametres, (x, y) =>
            {
                int parameteredRelativeTense = Verb.getIntFromString(y[1]);
                Verb verb = null;
                if (parameteredRelativeTense != -1)
                {
                    verb = new Verb(y[0], this.isMany, 3, Classes.Verb.Gender.it, Verb.getTenseFromInt(parameteredRelativeTense));
                }
                else
                {
                    verb = new Verb(y[0], this.isMany, 3, Classes.Verb.Gender.it, Verb.getTenseFromInt(this.tense), y[1]);
                }
                
                return verb.getVerb();
            });

            parametres = getFreshParameterList();
            parametres.Add(new MethodPackage.Parameter("Infinitive", "The verb in infinitive form.", typeof(string)));
            parametres.Add(new MethodPackage.Parameter("Constant Tense", "The tense constant name in string form. Case sensitive.", typeof(string)));
            parametres.Add(new MethodPackage.Parameter("Adverb", "And adverb to slap into the verb phrase.", typeof(string)));
            addDelegate("V", "Verbs", parametres, (x, y) =>
            {
                int parameteredRelativeTense = Verb.getIntFromString(y[1]);
                Verb verb = null;
                if (parameteredRelativeTense != -1)
                {
                    parameteredRelativeTense = Verb.getIntFromString("Continuous");
                    
                }
                verb = new Verb(y[0], this.isMany, 3, Classes.Verb.Gender.it, Verb.getTenseFromInt(parameteredRelativeTense), y[2]);
                return verb.getVerb();
            });

            #endregion




        }

        protected string doDrawFromListString(string list, string operation)
        {
            ListDrawString listToDrawFrom = null;
            int percentage = 100;

            switch (list.ToUpper())
            {
                case "FACT":
                    listToDrawFrom = this.who;
                    percentage = this.WhoPercentage;
                    break;
                case "FACTS":
                    listToDrawFrom = this.who;
                    percentage = this.WhoPercentage;
                    break;
                case "F":
                    listToDrawFrom = this.who;
                    percentage = this.WhoPercentage;
                    break;
                case "A":
                    listToDrawFrom = this.adjectives;
                    percentage = this.AdjectivesPercentage;
                    break;
                case "ADJ":
                    listToDrawFrom = this.adjectives;
                    percentage = this.AdjectivesPercentage;
                    break;
                case "ADJECTIVES":
                    listToDrawFrom = this.adjectives;
                    percentage = this.AdjectivesPercentage;
                    break;
                case "ADJECTIVE":
                    listToDrawFrom = this.adjectives;
                    percentage = this.AdjectivesPercentage;
                    break;
                case "V":
                    listToDrawFrom = this.adverbs;
                    percentage = this.AdverbsPercentage;
                    break;
                case "ADV":
                    listToDrawFrom = this.adverbs;
                    percentage = this.AdverbsPercentage;
                    break;
                case "ADVERB":
                    listToDrawFrom = this.adverbs;
                    percentage = this.AdverbsPercentage;
                    break;
                case "ADVERBS":
                    listToDrawFrom = this.adverbs;
                    percentage = this.AdverbsPercentage;
                    break;
                case "STATE":
                    listToDrawFrom = this.states;
                    percentage = this.StatePercentage;
                    break;
                case "STATES":
                    listToDrawFrom = this.states;
                    percentage = this.StatePercentage;
                    break;
                case "S":
                    listToDrawFrom = this.states;
                    percentage = this.StatePercentage;
                    break;
                case "ALIAS":
                    listToDrawFrom = this.aliases;
                    percentage = this.AliasPercentage;
                    break;
                case "ALIASES":
                    listToDrawFrom = this.aliases;
                    percentage = this.AliasPercentage;
                    break;
                case "K":
                    listToDrawFrom = this.aliases;
                    percentage = this.AliasPercentage;
                    break;
            }


            switch (operation.ToUpper())
            {
                case "S":
                    return this.drawFromList(listToDrawFrom, "", percentage, true);
                case "SEQUENCIALLY":
                    return this.drawFromList(listToDrawFrom, "", percentage, true);
                case "LINEAR":
                    return this.drawFromList(listToDrawFrom, "", percentage, true);
                case "LINEARLY":
                    return this.drawFromList(listToDrawFrom, "", percentage, true);
                case "L":
                    return listToDrawFrom.LastSelected;
                case "LAST":
                    return listToDrawFrom.LastSelected;
                case "PREVIOUS":
                    return listToDrawFrom.LastSelected;
                case "V":
                    return evaluateProbability(listToDrawFrom.getAssociated(), percentage);
                case "VALUE":
                    return evaluateProbability(listToDrawFrom.getAssociated(), percentage);
                case "F":
                    return evaluateProbability(listToDrawFrom.getAssociated(ListDrawString.DrawingStyle.ForcedSublist), percentage);
                case "FORCED":
                    return evaluateProbability(listToDrawFrom.getAssociated(ListDrawString.DrawingStyle.ForcedSublist), percentage);
                case "B":
                    return listToDrawFrom.getAssociated(ListDrawString.DrawingStyle.ForcedBoth);
                case "BOTH":
                    return listToDrawFrom.getAssociated(ListDrawString.DrawingStyle.ForcedBoth);
                case "K":
                    return listToDrawFrom.draw();
                case "KEY":
                    return listToDrawFrom.draw();

            }

            return evaluateProbability(listToDrawFrom.getAssociated(), percentage);
        }

        #endregion

        protected int tense = 2;
        protected virtual string tripleDollarSign(int adjectiveCount = 1)
        {
            // Default to always drawing at least one adjective
            if (adjectiveCount < 0) adjectiveCount = 1;
            string adjectives = this.chainedDraws(adjectiveCount, Matter.multipleAdjectivesSeperator, this.adjectives, Matter.multipleAdjectivesFinalizer);

            // Lazily send the $ code instead of just pumping out the strings
            if (String.IsNullOrWhiteSpace(adjectives)) return this.interpret("$", tense);
            // Set the failsafe code
            string interpretedFailsafe = this.interpret("SPP", tense);
            // return the noun phrase
            return "the " + this.drawNoConflict(adjectives, this.aliases, tense, interpretedFailsafe); 
        }

        protected virtual string tripleAtSign(int adjectiveCount = 1)
        {
            if (adjectiveCount < 0) adjectiveCount = 1;
            string adjectives = this.chainedDraws(adjectiveCount, Matter.multipleAdjectivesSeperator, this.adjectives, Matter.multipleAdjectivesFinalizer);
            if (String.IsNullOrWhiteSpace(adjectives)) return this.interpret("@", tense);
            string interpretedFailsafe = this.interpret("OPP", tense);
            return "the " + this.drawNoConflict(adjectives, this.aliases, tense, interpretedFailsafe);
        }

        private string getDemonstrativeAdjective()
        {
            if (this.getOwner() != null)
            {
                var owner = this.getOwner();
                if (owner is Human)
                {
                    var humanOwner = owner as Human;
                    if (humanOwner.Perspective == 3 && humanOwner.isPov)
                    {
                        if (this.isMany)
                            return "these";
                        else
                            return "this";
                    }
                    else
                    {
                        if (this.isMany)
                            return "those";
                        else
                            return "that";
                    }
                }
            }
            if (this.isMany)
                return "these";
            else
                return "this";
        }

        public virtual string interpret(string code, int tense)
        {
            if (String.IsNullOrWhiteSpace(code)) return "";
            if (code.ToUpper().StartsWith("~")) return code.Remove(0, 1);

            // If the code isn't stripped before entering this method, then the code variable was passed by an already interpreted code which gave this code to be reinterpreted.
            if (code.StartsWith(this.startCommand) && code.EndsWith(this.endCommand))
            {
                return code;
                //code = code.Remove(0, this.startCommand.Length);
                //code = code.Substring(0, code.Length - this.endCommand.Length);
            }
            
            // ensure that all methods are properly parsed
            if (code.IndexOf(".") > -1)
            {
                var listOfMethods = parseCommandMethods(code, ".", "(", ")");
                if (listOfMethods.Count > 1) return this.interpret(listOfMethods.ToArray(), tense);
            }

            // set the tense of the object to ensure up-to-date results on verbs
            this.tense = tense;

            // safely parsed methods at this point
            int parenthesesStart, parenthesesEnd;
            string methodName = code.ToUpper();
            List<string> parameters = new List<string>();
            string parameterString = findFirstCommand(code, out parenthesesStart, out parenthesesEnd, "(", ")", false);

            // malformed params or no params skips this
            if (!(parenthesesStart == -1 || parenthesesEnd == -1 || parenthesesEnd < parenthesesStart))
            {
                
                methodName = code.Substring(0, parenthesesStart).ToUpper().Trim();
                parameters.AddRange(parameterString.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries));
            }

            string result = "";

            // If the matter contains a number as a method name, then apply the default random draw and draw the amount the number indicates
            int methodNumber = -1;
            if (int.TryParse(methodName, out methodNumber))
            {
                if (methodNumber < 3)
                    return this.chainedAdjectives(methodNumber, ", ");
                else
                    return this.chainedAdjectives(methodNumber, ", ", ", and ");
                //evaluateProbability(this.words.getAssociated(ListDrawString.DrawingStyle.Sublist), 100);
            }

            // exact match method names
            try
            {
                if (functions.Keys.Contains(methodName))
                {
                    result = functions[methodName].Invoke(parameters);
                    if (!String.IsNullOrWhiteSpace(result)) return result;
                }
                else
                {
                    return code;
                }
                //result = delegates[methodName].Invoke(methodName, parameters);
            }
            catch (Exception ex)
            {
                // failed to find the method
                return ex.Message;
            }


            return "";

            // ======================================================================Legacy=======================================================================

            //if (code.StartsWith("{") && code.EndsWith("}"))
            //{
            //    code = code.Remove(code.Length - 1, 1).Remove(0, 1);
            //}

            if (String.IsNullOrWhiteSpace(code)) return String.Empty;


            if (code.ToUpper().StartsWith("*"))
            {
                code = code.Remove(0, 1);
                string[] split = code.Split(',');
                string finalstring = "";
                foreach (string str in split)
                {
                    finalstring += this.interpret(str, tense) + " ";
                }
                return finalstring.Trim();
            }

            // Advance list calls having associative arrays
            if (regexCallListWithKey.IsMatch(code.ToUpper()))
            {
                ListDrawString list = null;
                string theCode = code.ToUpper();
                //if (code.StartsWith("SC")) list = this.scripts;
                if (theCode.StartsWith("A")) list = this.adjectives;
                if (theCode.StartsWith("S")) list = this.states;
                if (theCode.StartsWith("K")) list = this.aliases;
                if (theCode.StartsWith("F")) list = this.who;
                if (theCode.StartsWith("V")) list = this.adverbs;

                string listCode = theCode.Remove(0, 1);
                listCode = listCode.Remove(listCode.Length - 1, 1);

                return list.fetch(listCode, new string[]{"."});

            }

            // Number to text
            if (regexIsNumberToText.IsMatch(code))
            {
                string numberAsString = code.Remove(0, 13);
                numberAsString = numberAsString.Remove(numberAsString.Length - 1, 1);

                int number = -1;
                int.TryParse(numberAsString, out number);

                if (number == -1) return numberAsString;

                return this.getNumberInWordForm(number);
            }

            if (regexIsAdverb.IsMatch(code))
            {
                string adverb = code.Remove(0, 7);
                adverb = adverb.Remove(adverb.Length - 1, 1);

                return Adverb.adjectiveToAdverb(adverb);
            }

            if (regexIsVerbToAdverb.IsMatch(code))
            {
                string adverb = code.Remove(0, 13);
                adverb = adverb.Remove(adverb.Length - 1, 1);

                return Adverb.verbToAdverb(adverb);
            }

            string resultSetProperty = setProperty(code);
            if (String.IsNullOrWhiteSpace(resultSetProperty)) return "";

            string resultGetProperty = getProperty(code);
            if (!String.IsNullOrWhiteSpace(resultGetProperty)) return resultGetProperty;


            Verb.Gender gender = Verb.Gender.it;
            string verb = Verb.getVerb(code, false, 3, true, gender, tense);
            if (!String.IsNullOrWhiteSpace(verb)) return verb;


            int adjectiveCount = 0;

            if (code.ToUpper().StartsWith("~"))
                return code.Remove(0, 1);

            if (code.ToUpper().StartsWith("*"))
            {
                code = code.Remove(0, 1);
                string[] split = code.Split(',');
                string finalstring = "";
                foreach (string str in split)
                {
                    finalstring += this.interpret(str, tense) + " ";
                }
                return finalstring.Trim();
            }

            string resultArticle = getArticle(code, tense);
            if (!String.IsNullOrWhiteSpace(resultArticle)) return resultArticle;


            // if the code is a number
            if (int.TryParse(code, out adjectiveCount))
            {
                if (adjectiveCount < 3)
                    return this.chainedAdjectives(adjectiveCount, ", ");
                else
                    return this.chainedAdjectives(adjectiveCount, ", ", ", and ");
            }

            //Regex quickMonikers = new Regex(@"^(\@|\+|\%|\$|\$\$|\@\@|\+\+|\%\%){1}.*$");
            if (quickMonikers.IsMatch(code))
            {


                if (code.StartsWith("@@@") || code.StartsWith("$$$"))
                {
                    if (willDraw(this.AliasPercentage))
                    {

                        code = methodName;
                        if (code.Length > 3) code = methodName.Remove(0, 3);
                        return multiAdjectiveNounPhrase(code, methodName[0].ToString(), "the", tense, this.aliases); 
                    }
                    else return this.interpret(methodName[0].ToString(), tense);

                }


                // !@#$%^&*()_+
                if (code.StartsWith("$$")) return this.refOther(code, "$", new string[] { "~the", "as", "k" }, tense);
                if (code.StartsWith("@@")) return this.refOther(code, "@", new string[] { "da", "as", "k" }, tense);
                if (code.StartsWith("++")) return this.refOther(code, "+", new string[] { "wpa", "as", "k" }, tense);
                if (code.StartsWith("%%")) return this.refOther(code, "%", new string[] { "~the", "as", "k", "~of", "wpp" }, tense);

                if (code.StartsWith("@"))
                {
                    if (code.Length > 1)
                    {
                        code = methodName.Remove(0, 1);
                        return multiAdjectiveNounPhrase(code, "@", "the", tense, this.aliases);
                        //return this.interpret("*" + code); // Star (*) functionality is located in Matter. It replaces commas with spaces: A runtime command... 
                    }
                    else
                    {
                        if (willDraw(this.AliasPercentage))
                        {
                            string output = this.interpret("*da,yar", tense);
                            if (output.Length > this.interpret("da", tense).Length) return output; else return this.interpret("op", tense);
                        }
                        else
                        {
                            if (this is Human) return this.interpret("op", tense);
                            return this.interpret("*da,k", tense);
                        }
                    }
                }

                if (code.StartsWith("$"))
                {
                    if (code.Length > 1)
                    {
                        code = methodName.Remove(0, 1);
                        return multiAdjectiveNounPhrase(code, "$", "the", tense, this.aliases);
                        //return this.interpret("*" + code);
                    }
                    else
                    {
                        if (willDraw(this.AliasPercentage))
                        {
                            string output = "the " + this.interpret("yar", tense);
                            if (output.Length > 4) return output; else return this.interpret("sp", tense);
                        }
                        else
                        {
                            if (this is Human) return this.interpret("sp", tense);
                            return "the " + this.interpret("k", tense);
                        }
                    }
                }

                if (code.StartsWith("+"))
                {
                    if (code.Length > 1)
                    {
                        code = methodName.Remove(0, 1);
                        return this.interpret("*" + code, tense);
                    }
                    else
                    {
                        if (willDraw(this.AliasPercentage))
                        {
                            string output = "the " + this.interpret("yar", tense) + "'s";
                            if (output.Length > 6) return output; else return this.interpret("pa", tense);
                        }
                        else
                        {
                            if (this is Human) return this.interpret("pa", tense) + this.interpret("k-a", tense) + "'s";
                            return "the " + this.interpret("k-a", tense) + "'s";
                        }
                    }
                }

                if (code.StartsWith("%"))
                {
                    if (code.Length > 1)
                    {
                        code = methodName.Remove(0, 1);
                        return this.interpret("*" + code, tense);
                    }
                    else
                    {
                        if (willDraw(this.AliasPercentage))
                        {
                            string output = "the " + this.interpret("yar", tense) + "'s";
                            if (output.Length > 6) return output; else return this.interpret("pp", tense);
                        }
                        else
                        {
                            if (this is Human) return this.interpret("pp", tense);
                            return "the " + this.interpret("k", tense) + "'s";
                        }
                    }
                }
            }


            // Chained words. Use single digit to 
            // ex: A1 
            if ((new Regex(@"^(S|A|K|F|V)\d$", RegexOptions.IgnoreCase)).IsMatch(code.ToUpper()))
            {
                string codeUpper = code.ToUpper();
                ListDrawString list = null;
                switch (codeUpper.Substring(0, 1))
                {
                    case "S":
                        list = this.states;
                        break;
                    case "A":
                        list = this.adjectives;
                        break;
                    case "V":
                        list = this.adverbs;
                        break;
                    case "F":
                        list = this.who;
                        break;
                    case "K":
                        list = this.aliases;
                        break;
                }

                if (list == null) return "";
                int amount = 0;
                codeUpper = codeUpper.Remove(0, 1);
                if (int.TryParse(codeUpper, out amount))
                {
                    if (amount < 2) return list.draw();
                    return this.chainedDraws(amount, ", ", list, ", and ");
                }
                else return list.draw();

            }

            switch (code.ToUpper())
            {
                case "N":
                    return this.Name;
                case "ID":
                    return this.getFullId();
                case "C":
                    return this.Colour;
                case "Z":
                    return this.Size;
                case "A":
                    return this.adjectives.draw();
                //return this.drawFromList(this.adjectives, "", this.AdjectivesPercentage);// this.chainedAdjectives(1, ""); // + " " + getAliasName();
                case "A-N":
                    return this.drawFromList(this.adjectives, "", this.AdjectivesPercentage, true);// this.chainedAdjectives(1, ""); // + " " + getAliasName();
                case "A-A": // gets an associated value if one exists. Otherwise, the key is selected
                    return evaluateProbability(this.adjectives.getAssociated(ListDrawString.DrawingStyle.Sublist), this.AdjectivesPercentage);
                case "A-F": // forces an associated value. If list contains none, an empty string is returned.
                    return evaluateProbability(this.adjectives.getAssociated(ListDrawString.DrawingStyle.ForcedSublist), this.AdjectivesPercentage);
                case "A-L": // gets the last adjectinve selected.
                    return this.adjectives.LastSelected;
                case "A-R":
                    return this.adjectives.getAssociated(ListDrawString.DrawingStyle.ForcedBoth);
                //return getAdverbAdjective(this.adjectives);
                case "A2":
                    return this.chainedAdjectives(2, justANDseparator); // + " " + getAliasName();
                case "A3":
                    return this.chainedAdjectives(3, justANDseparator); // + " " + getAliasName();
                case "A4":
                    return this.chainedAdjectives(4, justANDseparator);
                case "S2":
                    return this.chainedDraws(2, justANDseparator, this.states, Matter.multipleAdjectivesFinalizer);
                case "SA":
                    string state = this.drawFromList(this.states, "", this.StatePercentage);
                    string adj = this.chainedAdjectives(1, "");
                    if (String.IsNullOrWhiteSpace(state))
                    {
                        if (String.IsNullOrWhiteSpace(adj)) return "";
                        return adj;
                    }
                    if (String.IsNullOrWhiteSpace(adj)) return state;
                    return state + Matter.justANDseparator + this.chainedAdjectives(1, "");
                case "AS":
                    string state1 = this.drawFromList(this.states, "", this.StatePercentage);
                    string adjective1 = this.chainedAdjectives(1, "");
                    if (String.IsNullOrWhiteSpace(state1)) return adjective1;
                    if (String.IsNullOrWhiteSpace(adjective1)) return state1;
                    int ran = this.r.Next(0, 10);
                    return ((ran < 7) ? adjective1 : state1);
                case "MOI":
                    return drawMoi("XX", "$", tense);
                case "TOI":
                    return drawMoi("XX", "@", tense);
                case "MON":
                    return drawMon("XX", "+", tense);
                case "K":
                    //string defaultString = (this is Human) ? "TYPE" : "N";
                    string monikerFound = this.aliases.draw();
                    if (String.IsNullOrWhiteSpace(monikerFound)) return this.aliasFailSafe();
                    return monikerFound;
                //return drawFromList(this.aliases, this.interpret(defaultString), this.AliasPercentage);
                case "K-N":
                    return drawFromList(this.aliases, this.interpret(this.aliasFailSafe(), tense), this.AliasPercentage, true);
                case "K-A":
                    return drawFromList(this.aliases, this.interpret(this.aliasFailSafe(), tense), this.AliasPercentage);
                case "K-F":
                    return evaluateProbability(this.aliases.getAssociated(ListDrawString.DrawingStyle.ForcedSublist), this.AliasPercentage);
                case "K-L":
                    return this.aliases.LastSelected;
                case "K-R":
                    return this.aliases.getAssociated(ListDrawString.DrawingStyle.ForcedBoth);
                //return getAdverbAdjective(this.aliases);
                case "Y":
                    string eitherOr = (this.r.Next(0, 100) > 50) ? "A-A" : "S-A";
                    return this.drawNoConflict(this.interpret(eitherOr, tense), this.aliases, tense, this.aliasFailSafe());
                case "YAR":
                    return this.drawNoConflict(this.interpret("A-A", tense), this.aliases, tense, this.aliasFailSafe());
                case "YSR":
                    return this.drawNoConflict(this.interpret("S-A", tense), this.aliases, tense, this.aliasFailSafe());
                case "W":
                    return this.Weight.ToString();
                case "W-W":
                    return this.getNumberInWordForm(this.Weight);
                case "W-WH":
                    return this.getNumberInWordForm(this.Weight).Replace(' ', '-');
                case "OTHER":
                    return this.other;
                case "S":
                    string state2 = this.states.draw();  // this.drawFromList(this.states, "", this.StatePercentage);
                    if (String.IsNullOrWhiteSpace(state2)) return this.chainedAdjectives(1, "");
                    return state2;
                case "S-N":
                    string state3 = this.drawFromList(this.states, "", this.StatePercentage, true);
                    if (String.IsNullOrWhiteSpace(state3)) return this.chainedAdjectives(1, "");
                    return state3;
                case "S-A":
                    return evaluateProbability(this.states.getAssociated(), this.StatePercentage);
                case "S-F":
                    return evaluateProbability(this.states.getAssociated(ListDrawString.DrawingStyle.ForcedSublist), this.StatePercentage);
                case "S-L":
                    return this.states.LastSelected;
                case "S-R":
                    return this.states.getAssociated(ListDrawString.DrawingStyle.ForcedBoth);
                //return getAdverbAdjective(this.states);
                case "V":
                    return this.drawFromList(this.adverbs, "", this.AdverbsPercentage);
                case "V-N":
                    return this.drawFromList(this.adverbs, "", this.AdverbsPercentage, true);
                case "V-A":
                    return evaluateProbability(this.adverbs.getAssociated(), this.AdverbsPercentage);
                case "V-F":
                    return evaluateProbability(this.adverbs.getAssociated(ListDrawString.DrawingStyle.ForcedSublist), this.AdverbsPercentage);
                case "V-L":
                    return this.adverbs.LastSelected;
                case "V-R":
                    return this.adverbs.getAssociated(ListDrawString.DrawingStyle.ForcedBoth);
                //return getAdverbAdjective(this.adverbs);
                case "F": // stands for fact subject perspective
                    return this.who.draw();
                //return this.drawFromList(this.who, "", this.WhoPercentage);
                case "F-N": // stands for fact subject perspective
                    return this.drawFromList(this.who, "", this.WhoPercentage, true);
                case "F-C": // stands for fact subject perspective
                    return ", " + this.drawFromList(this.who, "", this.WhoPercentage) + ", ";
                case "F-A":
                    return evaluateProbability(this.who.getAssociated(), this.WhoPercentage);
                case "F-F":
                    return evaluateProbability(this.who.getAssociated(ListDrawString.DrawingStyle.ForcedSublist), this.WhoPercentage);
                case "F-L":
                    return this.who.LastSelected;
                case "F-R":
                    return this.who.getAssociated(ListDrawString.DrawingStyle.ForcedBoth);
                //return getAdverbAdjective(this.who);
                case "EMPTY":
                    return "";
                case "VIDE":
                    return "";
                case "ISMANY":
                    return ((this.IsMany) ? "true" : "false");
                case "PA":
                    return this.getPossessiveAdjectives();
                case "RP":
                    return this.getReflexivePronouns();
                case "DA": //demonstrative adjective
                    if (this.getOwner() != null)
                    {
                        var owner = this.getOwner();
                        if (owner is Human)
                        {
                            var humanOwner = owner as Human;
                            if (humanOwner.Perspective == 3 && humanOwner.isPov)
                            {
                                if (this.isMany)
                                    return "these";
                                else
                                    return "this";
                            }
                            else
                            {
                                if (this.isMany)
                                    return "those";
                                else
                                    return "that";
                            }
                        }
                    }
                    if (this.isMany)
                        return "these";
                    else
                        return "this";

                case "DAFAR":
                    if (this.isMany)
                        return "those";
                    else
                        return "that";
                case "DACLOSE":
                    if (this.isMany)
                        return "these";
                    else
                        return "this";
                case "G":
                    return this.GroupId.ToString();
                case "AOP":  // adverb of place
                    return "there";
                case "FF":
                    return "that " + this.drawWho();

                case "FSP": // stands for fact subject perspective
                    return "that " + this.drawWho();

                case "FOP": // stands for fact Object perspective
                    return "that " + this.drawWho();
                case "POV":
                    return "3";
                case "WSP":
                    if (this.Owner != null && this.Owner is Matter)
                        return (this.Owner as Matter).interpret(code.Remove(0, 1), tense);
                    return this.interpret(code.Remove(0, 1), tense);
                case "WOP":
                    if (this.Owner != null && this.Owner is Matter)
                        return (this.Owner as Matter).interpret(code.Remove(0, 1), tense);
                    return this.interpret(code.Remove(0, 1), tense);
                case "WPA":
                    if (this.Owner != null && this.Owner is Matter)
                        return (this.Owner as Matter).interpret(code.Remove(0, 1), tense);
                    return this.interpret(code.Remove(0, 1), tense);

                case "WPP":
                    if (this.Owner != null && this.Owner is Matter)
                        return (this.Owner as Matter).interpret(code.Remove(0, 1), tense);
                    return this.interpret(code.Remove(0, 1), tense);
                case "WRP":
                    if (this.Owner != null && this.Owner is Matter)
                        return (this.Owner as Matter).interpret(code.Remove(0, 1), tense);
                    return this.interpret(code.Remove(0, 1), tense);

                case "WSPP":
                    if (this.Owner != null && this.Owner is Matter)
                        return (this.Owner as Matter).interpret(code.Remove(0, 1), tense);
                    return this.interpret(code.Remove(0, 1), tense);
                case "WOPP":
                    if (this.Owner != null && this.Owner is Matter)
                        return (this.Owner as Matter).interpret(code.Remove(0, 1), tense);
                    return this.interpret(code.Remove(0, 1), tense);
                case "WPAP":
                    if (this.Owner != null && this.Owner is Matter)
                        return (this.Owner as Matter).interpret(code.Remove(0, 1), tense);
                    return this.interpret(code.Remove(0, 1), tense);
                case "WPPP":
                    if (this.Owner != null && this.Owner is Matter)
                        return (this.Owner as Matter).interpret(code.Remove(0, 1), tense);
                    return this.interpret(code.Remove(0, 1), tense);
                case "WRPP":
                    if (this.Owner != null && this.Owner is Matter)
                        return (this.Owner as Matter).interpret(code.Remove(0, 1), tense);
                    return this.interpret(code.Remove(0, 1), tense);



                default:
                    return code;
            }


        }

        private string aliasFailSafe()
        {
            if (this is Human)
            {
                return this.interpret("TYPE", 2);
            }
            else
            {
                return this.interpret("N", 2);
            }
        }

        public virtual Dictionary<string, string> help()
        {
            Dictionary<string, string> d = new Dictionary<string, string>();
            d.Add("N", "Returns the Name");
            d.Add("C", "Returns the Colour");
            d.Add("Z", "Returns the Size");
            d.Add("A", "Returns a random adjective.");
            d.Add("3", "Returns random 3 adjectives. Any number above 0 can be used. Comma seperated.");
            d.Add("K", "Returns a random alias");
            d.Add("ID", "Returns this object's ID");
            d.Add("K", "Returns a moniker. If none is found, the name is returned.");
            d.Add("S", "Returns a State adjective.");
            d.Add("V", "Returns an adverb.");
            d.Add("F", "Returns a factual preposition about the object.");
            d.Add("$", "Returns a noun phrase as the subject. 'The' + adjective + moniker.");
            d.Add("numberToText(number)", "Returns a string representation of the number passed.");
            d.Add("adverb(verb)", "Converts an adjectives to an adverb.");
            d.Add("verbToAdverb(verb)", "Converts a verb to an adverb.");
            d.Add("~", "Whatever follows this character is returned with no processing done.");
            d.Add("*", "Converts following commas into periods.");
            d.Add(indefinateArticleCode, "Uses an indefinate article, an adjectives, and a moniker.");
            d.Add("POV", "Returns an integer that represents the point of view of the character.");
            d.Add("DA", "Demonstrative adjective. The pronoun giving is contingient on the pov and if the object is considered as many objects.");
            d.Add("DACLOSE", "This or these");
            d.Add("DAFAR", "Those or that");
            d.Add("OTHER", "Returns the script ID of the object specified in the 'other' textbox.");


            string[] listCodes = { "V", "F", "A", "K", "S" };
            string[] listNames = { "adverbs", "preposition phrases", "subjective adjectives", "moniker", "objective adjectives" };

            for (int x = 0; x < listCodes.Length; x++)
            {
                d.Add(listCodes[x] + "-A(string)", "Calls the value of an associative array in the " + listNames[x] + " list using the string as the key.");
                d.Add(listCodes[x] + "+Digit", "Draws from " + listNames[x] + " a number of times specified by the digit.");
                d.Add(listCodes[x] + "-N", "Draws from the list linearly for the " + listNames[x] + " list, or in other words, in order the list was gathered.");
                d.Add(listCodes[x] + "-A", "Gets the associative value for a random key in the " + listNames[x] + " list. Otherwise it just returns the key. Adverbs to adjectives were in mind, I think.");
                d.Add(listCodes[x] + "-F", "Forces an associative array value to be drawn for the " + listNames[x] + " list. If none is found, an empty string is returned.");
                d.Add(listCodes[x] + "-L", "Returns the last selected key in the " + listNames[x] + " list.");
                d.Add(listCodes[x] + "-R", "Forced Both logic for the " + listNames[x] + " list. I need to reexamine this.");
            }

            d.Add("F-C", "Acts like a simple 'F' command, but adds leading and trailing commas. 'This person (, who is great, )' An extra space between the first comma and the noun phrase will be unavoidable.");

            d.Add("W", "Gets the weight in digit form.");
            d.Add("W-W", "Gets the weight in word form.");
            d.Add("W-WH", "Gets the weight in word form with hyphens.");
            d.Add("EMPTY", "Returns an empty string");
            d.Add("VIDE", "French for empty. Acts the same as the EMPTY command.");
            d.Add("ISMANY", "Returns either 'true' or 'false' as a string.");
            d.Add("PA", "Gets the possessive adjective/determinator.");
            d.Add("RP", "Gets the reflextive pronoun.");
            d.Add("FF", "Returns 'that' with a draw from the fact list.");
            d.Add("FOP", "Returns 'that' with a draw from the fact list.");
            d.Add("FSP", "Returns 'that' with a draw from the fact list.");
            d.Add("G", "Returns the group ID digit.");
            d.Add("AS", "Either a state or adjective is returned. The adjective has a 70% chance over state. If one is empty, the other is returned.");
            d.Add("SA", "Returns a state if there is one. If not, it returns an adjective, else an empty string.");
            d.Add("MOI", "Depending on what is set as 'other', this command returns a determiner phrase that describes the current object how they see it. MOI requires that other has a Trait which follows the following syntax for its script ID: ref" + this.getFullId());
            d.Add("TOI", "Depending on what is set as 'other', this command returns a determiner phrase that describes the current object how they see it. TOI requires that other has a Trait which follows the following syntax for its script ID: ref" + this.getFullId());
            d.Add("MON", "Depending on what is set as 'other', this command returns a possessive determiner phrase that describes the current object how they see it and own it. MON requires that other has a Trait which follows the following syntax for its script ID: ref" + this.getFullId());
            d.Add("YAR", "Does a command 'A-A' and draws from the moniker list. If no moniker exists, the command substitutes that with the 'TYPE' command for Humans, and 'N' command for objects.");
            d.Add("Y", "Draws 'no conflict' from bother adjectives and monikers.");
            d.Add("YSR", "Does a command 'S-A' and draws from the moniker list. If no moniker exists, the command substitutes that with the 'TYPE' command for Humans, and 'N' command for objects.");

            d.Add("WSP", "Returns the parent's SP code.");
            d.Add("WOP", "Returns the parent's OP code.");
            d.Add("WPP", "Returns the parent's PP code.");
            d.Add("WRP", "Returns the parent's RP code.");
            d.Add("WPA", "Returns the parent's PA code.");

            d.Add("WSPP", "Returns the parent's SP code.");
            d.Add("WOPP", "Returns the parent's OP code.");
            d.Add("WPPP", "Returns the parent's PP code.");
            d.Add("WRPP", "Returns the parent's RP code.");
            d.Add("WPAP", "Returns the parent's PA code.");

            return d;
        }

        public void setActorTense(int tense)
        {
            this.tense = tense;
        }

        public int getActorTense()
        {
            return this.tense;
        }

        public void merge(Matter mergedTo, Matter migrant)
        {
            if (mergedTo == null || migrant == null) return;
            mergedTo.AddAdjective(migrant.Adjectives.ToArray());
            mergedTo.addAdverb(migrant.Adverbs.ToArray());
            mergedTo.addState(migrant.States.ToArray());
            mergedTo.AddAlias(migrant.Aliases.ToArray());
            mergedTo.addWho(migrant.Who.ToArray());
        }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using StoryHelperLibrary.Helpers;

namespace StoryHelper.Classes
{
    [JsonConverter(typeof(PropertyNameMatchingConverter))]
    public class StoryMomentCollection : JSerializable<StoryMomentCollection>, DBActionable, IComparable
    {
        public StoryMomentCollection()
        {
            this.cost = -1;
            this.storyname = "";
            this.synopsis = "";
            this.teaser = "";
            this.keywords = "";
            this.dbID = -1;
            this.cover = "";
            
        }

        public StoryMomentCollection(DBStory db):base() 
        {
            this.setFromDBObject(db);
        }

        public int cost { get; set; }
        public string storyname { get; set; }
        public string synopsis { get; set; }
        public string teaser { get; set; }
        public string keywords { get; set; }
        public string cover { get; set; }
        public int dbID { get; set; }
        public int ownerId { get; set; }
        private int tenses { get; set; }
        public int chapter { get; set; }
        public bool tenses_readonly { get; set; } 
        public List<Character> character = new List<Character>();

        public int Tense
        {
            get { return tenses; }
            set { 

                tenses = value; 
            }
        }


        //public int getDBTense()
        //{

        //    return this.Tense;
        //}

        //public void setDBTense(int tense)
        //{
        //    foreach(var sm in this.StoryMoments)
        //    {
        //        sm.Tense = tense;
        //    }

        //    this.Tense = tense;
        //}

        public List<Character> Characters 
        {
            get { return character; }
            set { character = value; }
        }

        private List<StoryMoment> stories = new List<StoryMoment>();

        public List<StoryMoment> StoryMoments
        {
            get 
            {
                
                return stories; 
            }
            set { stories = value; }
        }

        public void add(StoryMoment sm)
        {
            if (!this.stories.Contains(sm))
            {
                this.stories.Add(sm);
            }
            this.stories.Sort();
        }

        public void addCharacter(Character character)
        {
            if (character != null)
            {
                if (!this.Characters.Contains(character))
                {
                    this.Characters.Add(character);
                }
                else
                {
                    int index = this.Characters.IndexOf(character);
                    Character c = this.Characters[index];
                    if (!System.Object.ReferenceEquals(character, c))
                    {
                        c.set(character);
                        //this.Characters.RemoveAt(index);
                        //this.Characters.Insert(index, character);
                    }
                }
            }
        }

        public void addCharacters(List<Character> characters)
        {
            foreach(var c in characters)
            {
                this.addCharacter(c);
            }
        }

        public void removeCharacter(Character character)
        {
            if (character != null && this.Characters.Contains(character))
            {
                this.Characters.Remove(character);
            }
        }

        public void updateCharacters(StoryMoment sm, Human human)
        {
            int momentIndex = this.StoryMoments.IndexOf(sm);

            if(momentIndex > -1)
            {
                if(!System.Object.ReferenceEquals(this.StoryMoments[momentIndex], sm))
                {
                    // Try to update the storymoment without upsetting the references.
                    this.StoryMoments[momentIndex].set(sm);
                }

                Human smHuman = this.StoryMoments[momentIndex].find(human.Character.ScriptId) as Human;

                if (smHuman != null && !System.Object.ReferenceEquals(smHuman.Character, human.Character))
                {
                    smHuman.Character = human.Character;
                }

                if (smHuman != null && this.Characters.Contains(smHuman.Character))
                {
                    Character smcCharacter = this.Characters[this.Characters.IndexOf(smHuman.Character)];
                    if (!System.Object.ReferenceEquals(smcCharacter, smHuman.Character))
                    {
                        // Existing takes precidence. Changes to it should affect all afterwards.
                        smHuman.Character = smcCharacter;

                    }
                }
            }

            
        }

        public string getJson()
        {
            var data = new
            {
                Cost = this.cost,
                Chapter = this.chapter,
                Characters = this.Characters,
                Cover = this.cover,
                Keywords = this.keywords,
                OwnerId = this.ownerId,
                StoryMoments = this.StoryMoments,
                Storyname = this.storyname,
                Synopsis = this.synopsis,
                Teaser = this.teaser,
                Tense = this.Tense,
                ReadonlyTenses = this.tenses_readonly,
                
            };
            //var jSerializerSettings = new JsonSerializerSettings();
            //jSerializerSettings.
            string muhString = Newtonsoft.Json.JsonConvert.SerializeObject(data);
            return muhString;
        }

        public static StoryMomentCollection factory(string json, int userId = -1)
        {
            try
            {
                StoryMomentCollection smc = Newtonsoft.Json.JsonConvert.DeserializeObject<StoryMomentCollection>(json);
                //StoryMomentCollection smc = new StoryMomentCollection();
                //Newtonsoft.Json.JsonConvert.PopulateObject(json, test);
                // What is params? A keyword? What does it do?
                //Newtonsoft.Json.JsonSerializerSettings settings = new Newtonsoft.Json.JsonSerializerSettings();
                //settings.MissingMemberHandling = Newtonsoft.Json.MissingMemberHandling.Error;
                //dynamic b = Newtonsoft.Json.JsonConvert.DeserializeObject(json);
                //string val = (string)b["Pig"];

                //foreach (System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken> x in b.ChildrenTokens)
                //{
                //    string test = "";
                //    for (var y = 0; y < x.Count; y++)
                //    {
                //        test += x[y].ToString() + ", ";
                //    }
                //    if(!String.IsNullOrWhiteSpace(test)) test = test.Remove(test.Length - 2, 2);

                //    Console.WriteLine(test);
                //}

               // var test = Newtonsoft.Json.JsonConvert.DeserializeObject(json, settings);

                if (smc != null)
                {
                    // Clear imported characters as their references are different from those found...
                    // ... in the Human objects due to the deserialization process. 
                    smc.Characters.Clear();
                    smc.setId(-1);
                    smc.dbID = -1;
                    smc.ownerId = userId;
                    foreach (var story in smc.StoryMoments)
                    {
                        story.Id = -1;
                        smc.tenses = story.Tense;
                        story.storyDescription = smc.synopsis;
                        var smList = story.Items;
                        foreach (var element in smList)
                        {
                            if (element is Human)
                            {
                                (element as Human).dbID = -1;
                                (element as Human).userId = userId;
                                foreach (var trait in (element as Human).Traits)
                                {
                                    trait.dbID = -1;
                                    trait.userId = userId;
                                }

                                foreach (var garment in (element as Human).Garments)
                                {
                                    garment.dbID = -1;
                                    garment.userId = userId;
                                }

                                if ((element as Human).Character != null) 
                                {
                                    (element as Human).Character.Id = -1;
                                    (element as Human).Character.OwnerId = userId;

                                    // Add the character to the main story character list
                                    // Make sure that the story character list is unique
                                    smc.addCharacter((element as Human).Character);
                                }

                                

                            }
                            else if (element is WordGroup)
                            {
                                (element as WordGroup).dbID = -1;
                                (element as WordGroup).ownerId = userId;
                            }
                            else continue;

                            

                        }
                    }
                }

                // Reverse sweep the smc character list and add it to the storyMoments Items.
                foreach (var story in smc.StoryMoments)
                {
                    var smList = story.Humans;
                    foreach (var element in smList)
                    {

                        foreach ( var character in smc.Characters)
                        {
                            if (character.Equals(element.Character))
                            {
                                element.Character = character;
                                break;
                            }
                        }
                    }
                }


                    return smc;
            }
            catch (Exception ex)
            {

                return null;
            }
        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("cost", this.cost);
            info.AddValue("cover", this.cover);
            info.AddValue("keywords", this.keywords);
            info.AddValue("storyname", this.storyname);
            info.AddValue("synopsis", this.synopsis);
            info.AddValue("teaser", this.teaser);
            info.AddValue("tenses", this.tenses);
            info.AddValue("tenses_readonly", this.tenses_readonly);
            info.AddValue("chapter", this.chapter);
            //info.AddValue("dbID", this.dbID);
            if (this.stories.Count > 0) info.AddValue("StoryMoments", this.StoryMoments);
        }

        public StoryMomentCollection(SerializationInfo info, StreamingContext ctxt)
        {

            try
            {
                this.cost = (int)info.GetValue("cost", typeof(int));
            }
            catch (Exception)
            { }
            try
            {
                this.chapter = (int)info.GetValue("chapter", typeof(int));
            }
            catch (Exception)
            { }
            try
            {
                this.storyname = (string)info.GetValue("storyname", typeof(string));
            }
            catch (Exception)
            { }
            try
            {
                this.synopsis = (string)info.GetValue("synopsis", typeof(string));
            }
            catch (Exception)
            { }
            try
            {
                this.teaser = (string)info.GetValue("teaser", typeof(string));
            }
            catch (Exception)
            { }
            try
            {
                this.keywords = (string)info.GetValue("keywords", typeof(string));
            }
            catch (Exception)
            { }
            try
            {
                this.cover = (string)info.GetValue("cover", typeof(string));
            }
            catch (Exception)
            { }
            //try
            //{
            //    this.dbID = (int)info.GetValue("dbID", typeof(int));
            //}
            //catch (Exception)
            //{ }

            try
            {
                this.tenses = (int)info.GetValue("tenses", typeof(int));
            }
            catch (Exception)
            { }

            try
            {
                this.tenses_readonly = (bool)info.GetValue("tenses_readonly", typeof(bool));
            }
            catch (Exception)
            { }


            try
            {
                List<StoryMoment> list = new List<StoryMoment>();
                list = (List<StoryMoment>)info.GetValue("StoryMoments", typeof(IList<StoryMoment>));
                foreach (StoryMoment t in list)
                {
                    t.Storyname = this.storyname;
                    this.stories.Add(t);

                }
            }
            catch (Exception)
            { }

        }

        public DBbase getDBObejct(DBbase d)
        {
            DBStory c = d as DBStory;
            if (c == null) c = new DBStory();


            c.storyname = this.storyname;
            c.synopsis = this.synopsis;
            c.teaser = this.teaser;
            c.ownerId = this.ownerId;
            c.keywords = this.keywords;
            c.id = this.dbID;
            c.cover = this.cover;
            c.chapter = this.chapter;
            c.cost = this.cost;
            c.default_tenseId = this.Tense;
            c.tenses_readonly = this.tenses_readonly ? 1 : 0;

            return c;
        }

        public void setFromDBObject(DBbase d)
        {
            var c = d as DBStory;
            if (c == null) return;
            this.storyname = c.storyname;
            this.synopsis = c.synopsis;
            this.teaser = c.teaser;
            this.ownerId = c.ownerId;
            this.keywords = c.keywords;
            this.dbID = c.id;
            this.cover = c.cover;
            this.cost = c.cost;
            this.chapter = c.chapter;
            this.Tense = (c.default_tenseId);
            this.tenses_readonly = c.tenses_readonly == 1 ? true : false;
        }


        public StoryMomentCollection getClone()
        {
            DBStory dbMatter = new DBStory();
            this.getDBObejct(dbMatter);
            StoryMomentCollection h = new StoryMomentCollection();
            h.setFromDBObject(dbMatter);

            foreach (var ch in this.Characters)
            {
                h.Characters.Add(ch.getClone());
            }

            //foreach (var ch in this.UserCharacters)
            //{
            //    h.UserCharacters.Add(ch.getClone());
            //}

            return h;
        }

        public int CompareTo(object obj)
        {
            if (obj == null)
                return -1;
            if (!(obj is StoryMomentCollection))
                return -1;
            if (obj.Equals(this))
                return 0;

            //string formatter = "{0}, {1} {2}";
            //string thisObject = String.Format(formatter, this.FamilyName, this.FirstName, this.MiddleName);
            //string otherObject = String.Format(formatter, ((Human)obj).FamilyName, ((Human)obj).FirstName, ((Human)obj).MiddleName);

            string formatter = "{0}, {1}";
            string thisObject = String.Format(formatter, this.storyname, this.ownerId.ToString());
            string otherObject = String.Format(formatter, ((StoryMomentCollection)obj).storyname, ((StoryMomentCollection)obj).ownerId.ToString());


            return thisObject.CompareTo(otherObject); ;
        }

        public override bool Equals(System.Object obj)
        {
            // If parameter is null return false.
            if (obj == null)
            {
                return false;
            }

            // If parameter cannot be cast to Point return false.
            StoryMomentCollection p = obj as StoryMomentCollection;
            if ((System.Object)p == null)
            {
                return false;
            }

            // check for reference equality.
            if (System.Object.ReferenceEquals(this, p)) return true;

            // Return true if the fields match:

            return
                (this.storyname.Equals(p.storyname)) &&
                (this.ownerId == p.ownerId);
        }


        public string getId()
        {
            throw new NotImplementedException();
        }

        public void setId(long id)
        {
            this.dbID = (int)id;
        }
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using static StoryHelper.Classes.ThreaderBase;
using Newtonsoft.Json;
using StoryHelperLibrary.Helpers;

namespace StoryHelper.Classes
{
    [JsonConverter(typeof(PropertyNameMatchingConverter))]
    public class StoryMoment : EventBase, IComparable, DBActionable, JSerializable<StoryMoment>
    {
        private string story = "";
        private List<Registrable<ActionParser>> registrables = new List<Registrable<ActionParser>>();
        
        public int storiesId { get; set; }
        public string picture { get; set; }
        public int globalPercentage { get; set; }
        public int charactersId { get; set; }
        public string characterScriptId = "";
        public string storyDescription = "";
        public Settings settings = new Settings();
        public StringBuilder errLog = new StringBuilder();
        public List<WordGroup> WordGroups { get; set; } = new List<WordGroup>();
        public List<Human> Humans { get; set; } = new List<Human>();


        public StoryMoment()  
        {
            this.storiesId = -1;
            this.picture = "";
            this.globalPercentage = 100;
        }

        public StoryMoment(DBMoment db, Settings settings): this()
        {
            this.storiesId = -1;
            this.setFromDBObject(db);
            this.settings = settings;
            this.picture = "";
            this.globalPercentage = 100;
        }

        public StoryMoment(string storyName, int storyMomentId, Settings settings): this()
        {
            this.storiesId = -1;
            this.storyMomentId = storyMomentId;
            this.storyname = storyName;
            this.settings = settings;
            this.picture = "";
            this.globalPercentage = 100;
        }

        public string Story
        {
            get { return story; }
            set { story = value; }
        }

        private int tense = 2;

        public int Tense
        {
            get { return tense; }
            set {
                this.setTense(value);
            }
        }

        public int getTense()
        {
            return this.tense;
        }

        public void setTense(int tense)
        {
            if (tense == Verb.getTenseDictionary()[Verb.VerbTense.Future] || tense == Verb.getTenseDictionary()[Verb.VerbTense.Present] || tense == Verb.getTenseDictionary()[Verb.VerbTense.SimplePast])
            {
                this.tense = tense;
            }
            return;
        }


        private List<Registrable<ActionParser>> items = new List<Registrable<ActionParser>>();
        public List<Registrable<ActionParser>> Items 
        { 
            get 
            {
                items.Clear();
                items.AddRange(this.Humans);
                items.AddRange(this.WordGroups);
                items.AddRange(this.registrables);
                return items;

            }
            set
            {
                this.Humans.Clear();
                this.WordGroups.Clear();
                this.registrables.Clear();
                foreach( var i in value)
                {
                    this.addActor(i);
                }
            }
        } 
        


        private string storyname = "";

        public string Storyname
        {
            get { return storyname; }
            set { storyname = value; }
        }
        private int storyMomentId = -1;

        public int MomentId
        {
            get { return storyMomentId; }
            set { storyMomentId = value; }
        }
        private int id = -1;

        public int Id
        {
            get { return id; }
            set { id = value; }
        }

        private string momentDescription = "";

        public string Description
        {
            get { return momentDescription; }
            set { momentDescription = value; }
        }

        //public void saveActors()
        //{
        //    MySqlController my = new MySqlController(settings);
        //    //this.setLinkedPOVs();
        //    my.storeMyActors(this);
        //}

        public void loadActors()
        {
            if (String.IsNullOrWhiteSpace(settings.databaseName)) return;
            MySqlController my = new MySqlController(settings);
            Dictionary<string, Registrable<ActionParser>> dic = my.getMyStoryActors(this);

            //if (parentStory != null)
            //{
            //    parentStory.UserCharacters = dic.Values
            //}

            // set the pov of the characters
            //this.setLinkedPOVgivenDictionary(dic);
        }

        public void set(StoryMoment other)
        {

            this.characterScriptId = other.characterScriptId;
            this.charactersId = other.charactersId;
            this.Description = other.Description;
            this.globalPercentage = other.globalPercentage;
            this.Humans = other.Humans;
            this.id = other.id;
            this.Id = other.Id;
            this.Items = other.Items;
            this.MomentId = other.MomentId;
            this.picture = other.picture;
            this.registrables = other.registrables;
            this.settings = other.settings;
            this.storiesId = other.storiesId;
            this.story = other.story;
            this.Story = other.Story;
            this.storyDescription = other.storyDescription;
            this.storyMomentId = other.storyMomentId;
            this.storyname = other.storyname;
            this.Storyname = other.Storyname;
            this.Tense = other.Tense;
            this.tense = other.tense;
            this.WordGroups = other.WordGroups;

            this.Update();
        }


        public void Update()
        {

            var smList = this.Humans;
            foreach (var human1 in smList) 
            {
                
                if (!String.IsNullOrWhiteSpace(human1.Character.LinkedCharacterName))
                {
                    foreach (var human2 in smList)
                    {
                       
                        if (human1.Equals(human2)) continue;

                        try
                        {

                            if (human2.Character.ScriptId == human1.Character.LinkedCharacterName)
                            {
                                // check if the characters are pointing eachother
                                if (human2.Character.LinkedCharacterName == human1.Character.ScriptId)
                                {
                                // if characters point eachother, then remove the linked character from the other
                                human2.Character.LinkedCharacterName = "";
                                }



                                if (!human2.perspective_readonly && !human1.perspective_readonly)
                                {
                                    human1.Perspective = human2.Perspective;
                                    human1.Character.Perspective = human2.Character.Perspective;
                                }
                            }

                        }
                        catch (Exception)
                        {

                        }
                    }
                }
            }


            doSmartReplacers();
            }



        private Dictionary<string, Registrable<ActionParser>> getActorDictionary()
        {
            Dictionary<string, Registrable<ActionParser>> dic = new Dictionary<string,Registrable<ActionParser>>();
            var smList = this.Humans;
            foreach(var item in smList)
            {
                if(item is Human)
                {
                    try
                    {
                        dic.Add((item as Human).Character.ScriptId, item);
                    }
                    catch (Exception) { }

                }
            }

            return dic;
        }

        public void doSmartReplacers()
        {
            var smList = this.Items;
            

            foreach (ActionParser actor in smList)
            {
                if (actor is Registrar<ActionParser>)
                {
                    Registrable<ActionParser> other = null;
                    if (actor is Matter && actor is ActionParser)
                    {
                        other = null;

                        if (actor is Human)
                        {
                            foreach (Registrable<ActionParser> x in smList)
                            {
                                if (x.getId().Equals((actor as Human).Other))
                                {
                                    other = x;
                                    break;
                                }
                            }

                            // Set other
                            if (other != null)
                            {
                                (actor as Human).setOther(other);
                            }



                        }

                        if (!String.IsNullOrWhiteSpace((actor as Matter).Other))
                        {
                            replaceStringWithinActor((actor as ActionParser), (actor as Matter).Other, "other");
                        }
                        else
                        {
                            replaceStringWithinActor((actor as ActionParser), (actor as Matter).getFullId(), "other");
                        }
                        replaceStringWithinActor((actor as ActionParser), actor.getId(), "this");
                        if ((actor as Human).isPov) replaceStringWithinActor((actor as ActionParser), (actor as Human).getFullId(), "main");

                    }

                    foreach (KeyValuePair<string, ActionParser> kp in (actor as Registrar<ActionParser>).Registry)
                    {

                        string ownerId = getOwnerId(kp.Value);
                        string otherId = getOtherId(kp.Value);
                        string thisId = kp.Key;

                        if (!String.IsNullOrEmpty(thisId) && !String.IsNullOrEmpty(ownerId) && !(thisId.Equals(ownerId)))
                        {
                            replaceStringWithinActor(kp.Value, ownerId + "." + thisId, "this");
                        }
                        if (!String.IsNullOrEmpty(ownerId))
                        {
                            replaceStringWithinActor(kp.Value, otherId,  "other");
                        }
                        if (!String.IsNullOrEmpty(otherId))
                        {
                            replaceStringWithinActor(kp.Value, ownerId, "owner");
                        }
                        

                        //if (mainCharacter != null) replaceStringWithinActor(kp.Value, mainCharacter.getFullId(), "main");
                    }
                }
            }
        }

        private string getOwnerId(ActionParser actor)
        {
            if (actor == null) return "";
            if (actor is Matter)
            {
                var m = (actor as Matter).getOwner();
                if (m == null) return (actor as Matter).getOwnerId();
                else
                {
                    return getOwnerId((m as Matter));
                }

            }

            return "";
        }

        private string getOtherId(ActionParser actor)
        {
            if (actor is Matter)
            {
                var m = (actor as Matter).getOwner();
                if (String.IsNullOrEmpty((actor as Matter).Other))
                {
                    if (m is Matter)
                    {
                        Matter mm = (m as Matter);
                        if (!String.IsNullOrEmpty(mm.Other))
                        {
                            return mm.Other;
                        }
                    }
                    if (!String.IsNullOrEmpty(m.getOwnerId()))
                    {
                        return m.getOwnerId();
                    }
                }
                else
                    return (actor as Matter).Other;
            }

            return "";
        }

        private void replaceStringWithinActor(ActionParser actor, string lookFor, string changeTo)
        {

            if (actor is Human)
            {
                Human m = (actor as Human);
                if (m.Colour != null) m.Colour = m.Colour.Replace(lookFor, changeTo);
                this.doChangeOwner(m.Adjectives, changeTo, lookFor);
                this.doChangeOwner(m.Aliases, changeTo, lookFor);
                this.doChangeOwner(m.States, changeTo, lookFor);
                this.doChangeOwner(m.Adverbs, changeTo, lookFor);
                this.doChangeOwner(m.Who, changeTo, lookFor);
                this.doChangeOwner(m.Scripts, changeTo, lookFor);
            }

            if (actor is Trait)
            {
                Trait t = (actor as Trait);
                this.doChangeOwner(t.Adjectives, changeTo, lookFor);
                this.doChangeOwner(t.Aliases, changeTo, lookFor);
                this.doChangeOwner(t.States, changeTo, lookFor);
                this.doChangeOwner(t.Adverbs, changeTo, lookFor);
                this.doChangeOwner(t.Who, changeTo, lookFor);

            }
            if (actor is Garment)
            {
                Garment t = (actor as Garment);
                this.doChangeOwner(t.Adjectives, changeTo, lookFor);
                this.doChangeOwner(t.Aliases, changeTo, lookFor);
                this.doChangeOwner(t.GarmentThat_, changeTo, lookFor);
                this.doChangeOwner(t.States, changeTo, lookFor);
                this.doChangeOwner(t.Adverbs, changeTo, lookFor);
                this.doChangeOwner(t.Who, changeTo, lookFor);
                t.FabricType = t.FabricType.Replace(changeTo, lookFor);
                t.Location = t.Location.Replace(lookFor, changeTo);
            }
            if (actor is WordGroup)
            {
                WordGroup w = (actor as WordGroup);
                this.doChangeOwner(w.Words, changeTo, lookFor);
            }
        }

        private void doChangeOwner(IList<string> list, string ownerId, string lookFor)
        {
            if (list is ListDrawString)
            {
                (list as ListDrawString).massReplace(ownerId, lookFor, this.settings.startCommand, this.settings.endCommand);
            }
            else
            {

                for (int x = list.Count - 1; x >= 0; x--)
                {
                    if (list[x].ToLower().IndexOf(lookFor.ToLower()) > -1 && list[x].Contains(this.settings.startCommand) && list[x].Contains(this.settings.endCommand))
                    {
                        string str = list[x].Replace(lookFor, ownerId);
                        list.RemoveAt(x);
                        list.Add(str);

                    }
                }
            }

        }

        //private void setLinkedPOVgivenDictionary(Dictionary<string, Registrable<ActionParser>> dic)
        //{
        //    // set the pov of the characters
        //    foreach (var entry in dic)
        //    {
        //        if ((entry.Value is Human))
        //        {
        //            Human linked = this.setLinkedPOV(dic, (entry.Value as Human).Character);
        //            if (linked != null)
        //            {
        //                (entry.Value as Human).Perspective = linked.Perspective;
        //            }
        //        }
        //    }
        //}

        //private Human setLinkedPOV(Dictionary<string, Registrable<ActionParser>> dic, Character other)
        //{
        //    foreach (var entry in dic)
        //    {
        //        if ((entry.Value is Human))
        //        {
        //            if (other.linkedCharacterId > 0)
        //            {
        //                if ((entry.Value as Human).Character.id == other.linkedCharacterId && !(entry.Value as Human).Character.Equals(other))
        //                {
        //                    return (entry.Value as Human);
        //                }
        //            }
        //            else if (!String.IsNullOrWhiteSpace(other.linkedCharacterName))
        //            {
        //                if ((entry.Value as Human).Character.scriptId.Equals(other.linkedCharacterName) && !(entry.Value as Human).Character.Equals(other))
        //                {
        //                    return (entry.Value as Human);
        //                }
        //            }
        //        }
        //    }

        //    return null;
        //}

        public void save(int storyId)
        {
            //setLinkedPOVs();
            MySqlController my = new MySqlController(this.settings);
            if (!this.settings.hasConnected)
            {
                throw new Exception("Failed to connect");
            }

            this.storiesId = storyId;
            int storyMomentId = (int)my.storeStoryMoment(this);

            // storyId could be 1 because the return value is either the amount of rows affected, or the new id.
            if (storyMomentId > 1)
            {
                this.id = storyMomentId;
                my.storeMyActors(this);
            }
            else if (storyMomentId == 1)
            {
                my.storeMyActors(this);
            }
            else
            {
                throw new Exception("Failed to get Moment Id.");
            }
        }

        /// <summary>
        /// Finds a Matter object
        /// </summary>
        /// <param name="id"></param>
        /// <returns>Matter or null if not found</returns>
        public ActionParser find(string id)
        {
            var result = this.Items.Where(y => id.ToLower().StartsWith(y.getFullId().ToLower()));
            foreach (Registrable<ActionParser> m in result)
            {
                if (String.Equals(m.getFullId(), id.ToLower(), StringComparison.OrdinalIgnoreCase))
                {
                    if(m is ActionParser)
                    {
                        return m as ActionParser;
                    }
                }
                if(m is Matter)
                {
                    var item = (m as Matter).find(id);
                    if (item != null)
                    {
                        return item;
                    }
                }
                    
            }

            return null;
        }

        public void addActor(Registrable<ActionParser> actor)
        {
            if (actor == null) return;
            if (actor is Human && !this.Humans.Contains(actor as Human))
            {
                this.Humans.Add(actor as Human);
                return;
            }
            if (actor is WordGroup && !this.WordGroups.Contains(actor as WordGroup))
            {
                this.WordGroups.Add(actor as WordGroup);
                return;
            }
            if (!this.registrables.Contains(actor)) 
            {
                this.registrables.Add(actor);
            }
        }
 
        public void removeActor(Registrable<ActionParser> actor)
        {
            if (actor != null)
            {
                if (actor is Human)
                {
                    if (this.Humans.Contains(actor as Human)) this.Humans.Remove(actor as Human);
                }
                else if (actor is WordGroup)
                {
                    if (this.WordGroups.Contains(actor as WordGroup)) this.WordGroups.Remove(actor as WordGroup);
                }
            }
        }

        public override string ToString()
        {
            return this.Storyname + " - " + this.MomentId.ToString();
        }


        public int CompareTo(object obj)
        {
            if (!(obj is StoryMoment)) return 1;

            if ((obj as StoryMoment).Storyname.CompareTo(this.Storyname) == 0)
            {
                if ((obj as StoryMoment).storyMomentId < this.storyMomentId) return 1;
                if ((obj as StoryMoment).storyMomentId == this.storyMomentId) return 0;
                return -1;
            }
            else
            {
                return this.Storyname.CompareTo((obj as StoryMoment).Storyname);
            }
        }

        public string getJson()
        {
            string muhString = Newtonsoft.Json.JsonConvert.SerializeObject(this);
            return muhString;
        }

        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            if (this.Id != -1) info.AddValue("Id", this.Id);

            info.AddValue("MomentId", this.MomentId);
            if (!String.IsNullOrEmpty(this.Story)) info.AddValue("PieceOfStory", this.Story);
            if (!String.IsNullOrEmpty(this.Description)) info.AddValue("Description", this.Description);
            if (!String.IsNullOrEmpty(this.Storyname)) info.AddValue("Storyname", this.Storyname);
            if (this.globalPercentage > 0) info.AddValue("globalPercentage", this.globalPercentage);
            if (this.charactersId > 0) info.AddValue("charactersId", this.charactersId);
            info.AddValue("characterScriptId", this.characterScriptId);
            info.AddValue("tense", this.tense);
            
            info.AddValue("picture", this.picture);
            info.AddValue("storiesId", this.storiesId);

            List<Human> humans = new List<Human>();
            List<WordGroup> wordgroups = new List<WordGroup>();

            foreach (object o in this.Items)
            {
                if (o is Human)
                {
                    humans.Add(o as Human);
                }

                else if (o is WordGroup)
                {
                    wordgroups.Add(o as WordGroup);
                }
            }

            if (humans.Count > 0) info.AddValue("Humans", humans);
            if (wordgroups.Count > 0) info.AddValue("Wordgroups", wordgroups);



            
        }

        //Deserialization constructor.
        public StoryMoment(SerializationInfo info, StreamingContext ctxt) : this()
        {
            this.storiesId = -1;
            //Get the values from info and assign them to the appropriate properties
            try
            {
                this.id = (int)info.GetValue("Id", typeof(int));
            }
            catch (Exception)
            {}
            try
            {
                this.charactersId = (int)info.GetValue("charactersId", typeof(int));
            }
            catch (Exception)
            { }
            try
            {
                this.characterScriptId = (string)info.GetValue("characterScriptId", typeof(string));
            }
            catch (Exception)
            { }
            try
            {
                this.Story = (string)info.GetValue("PieceOfStory", typeof(string));
            }
            catch (Exception)
            { }
            try
            {
                this.Description = (string)info.GetValue("Description", typeof(string));
            }
            catch (Exception)
            { }
            try
            {
                this.Storyname = (string)info.GetValue("Storyname", typeof(string));
            }
            catch (Exception)
            { }
            try
            {
                this.MomentId = (int)info.GetValue("MomentId", typeof(int));
            }
            catch (Exception)
            { }
            try
            {
                this.storiesId = (int)info.GetValue("storiesId", typeof(int));
            }
            catch (Exception)
            { }
            try
            {
                this.picture = (string)info.GetValue("picture", typeof(string));
            }
            catch (Exception)
            { }
            try
            {
                this.globalPercentage = (int)info.GetValue("globalPercentage", typeof(int));
            }
            catch (Exception)
            { }

            try
            {
                List<Human> list = new List<Human>();
                list = (List<Human>)info.GetValue("Humans", typeof(List<Human>));
                foreach (Human t in list)
                {
                    this.Items.Add(t);
                }
            }
            catch (Exception)
            { }

            try
            {
                List<WordGroup> list = new List<WordGroup>();
                list = (List<WordGroup>)info.GetValue("Wordgroups", typeof(List<WordGroup>));
                foreach (WordGroup t in list)
                {
                    this.Items.Add(t);
                }
            }
            catch (Exception)
            { }

            try {
                this.tense = (int)info.GetValue("tense", typeof(int));
            }
            catch (Exception) { }

        }

        public override bool Equals(System.Object obj)
        {
            // If parameter is null return false.
            if (obj == null)
            {
                return false;
            }

            // If parameter cannot be cast to Point return false.
            StoryMoment p = obj as StoryMoment;
            if ((System.Object)p == null)
            {
                return false;
            }

            // check for reference equality.
            if (System.Object.ReferenceEquals(this, p)) return true;

            // Return true if the fields match:

            return
                (this.MomentId.Equals(p.MomentId)) &&
                (this.storyname.Equals(p.storyname));
        }

        public DBbase getDBObejct(DBbase d)
        {
            DBMoment c = new DBMoment();

            c.id = this.id;
            c.momentId = this.MomentId;
            c.picture = this.picture;
            c.storiesId = this.storiesId;
            c.story = this.Story;
            //c.tense = getDBTense();
            c.description = this.Description;
            c.globalPercentage = this.globalPercentage;
            c.charactersId = this.charactersId;

            return c;
        }

        public void setFromDBObject(DBbase d)
        {
            DBMoment c = d as DBMoment;
            if(c == null) return;
            this.Description = c.description;
            this.globalPercentage = c.globalPercentage;
            this.Id = c.id;
            this.MomentId = c.momentId;
            this.picture = c.picture;
            this.storiesId = c.storiesId;
            this.Story = c.story;
            this.charactersId = c.charactersId;
            //this.Tense = 
            //setDBTense(c.tense);
        }


        public long getId()
        {
            return this.id;
        }

        public void setId(long id)
        {
            this.Id = (int)id;
        }


        public StoryMoment getClone()
        {
            DBMoment dbMatter = new DBMoment();
            dbMatter = this.getDBObejct(dbMatter) as DBMoment;
            StoryMoment storyMoment = new StoryMoment();
            storyMoment.setFromDBObject(dbMatter);


            var smList = this.Items;
            foreach (var item in smList)
            {
                var clonedItem = (item as JSerializable<ActionParser>).getClone();
                

                if (clonedItem is Matter)
                {
                    (clonedItem as Matter).selfRegisterAll();
                }
                storyMoment.addActor(clonedItem as Registrable<ActionParser>);
            }

            

            storyMoment.tense = this.tense;
            storyMoment.storyname = this.storyname;
            storyMoment.storiesId = this.storiesId;
            storyMoment.settings = this.settings;



            return storyMoment;
        }

        /// <summary>
        ///     Checks if one storymoment has any reference equality to the current one being used in variable this.storymoment
        /// </summary>
        /// <param name="s"></param>
        /// <returns></returns>
        public static bool passCloneTest(StoryMoment s, StoryMoment otherStory)
        {
            if (System.Object.ReferenceEquals(s, otherStory)) return false;
            Dictionary<string, ActionParser> registeredObjectsForHuman = null;
            Dictionary<string, ActionParser> registeredObjectsForOther = null;
            foreach (var item in s.Items)
            {
                if (item is Human)
                {
                    registeredObjectsForHuman = (item as Human).getDictionaryOfRegisteredObjects();
                    foreach (var other in otherStory.Items)
                    {
                        if (other is Human)
                        {
                            var human = (item as Human);
                            var humanOther = (other as Human);
                            
                            registeredObjectsForOther = humanOther.getDictionaryOfRegisteredObjects();
                            foreach (var item2 in registeredObjectsForHuman)
                            {
                                foreach (var other2 in registeredObjectsForOther)
                                {
                                    if (System.Object.ReferenceEquals(other2, item2))
                                    {
                                        return false;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return true;
        }


        
    }
}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using StoryHelperLibrary.Helpers;

namespace StoryHelper.Classes
{
    [JsonConverter(typeof(PropertyNameMatchingConverter))]
    public class Trait : Matter
    {
        public Trait() : base() 
        {
            this.IsUsed = false;
        }

        public Trait(string name) : base(name) 
		{
            this.Id = name.Replace(" ", "_");
			//this.IsUsed = false;
		}

        public override ActionParser deepCopy()
        {
            Trait t = new Trait(this.Name);
            this.copy(t);

            return t as ActionParser;
        }

        protected override Matter copy(Matter m)
        {
            Trait t = m as Trait;

            return base.copy(t);
        }

        public override ActionParser getClone()
        {

            DBTrait dbMatter = new DBTrait();
            this.getDBObejct(dbMatter);
            Trait m = new Trait();
            m.setFromDBObject(dbMatter);
            return m;
            //return this.deepCopy();
            //return (ActionParser)Newtonsoft.Json.JsonConvert.DeserializeObject<Trait>(this.getJson());
        }

        protected override void setDelegates()
        {
            base.setDelegates();
            var d = getFreshParameterList();


            
            addDelegate("MY", "", null, (x, y) => { 
                if (this.Owner != null && this.Owner is Matter)
                    return (this.Owner as Matter).interpret("PA", tense);
                return this.interpret("PA", tense);
            });
        }


        public override string interpret(string code, int tense)
        {
            return base.interpret(code, tense);


            Verb.Gender gender = Verb.Gender.it;
            string verb = Verb.getVerb(code, this.IsMany, 3, true, gender, tense);
            if (!String.IsNullOrWhiteSpace(verb)) return verb;

            switch (code.ToUpper())
            {
                case "PP":
                    return this.getPossesivePronoun();
                case "PPP":
                    return this.Name + "'s";
                case "SP":
                    return this.getSubjectPronoun();
                case "SPP":
                    return this.Name;
                case "OP":
                    return this.getObjectPronouns();
                case "OPP":
                    return this.Name;
                case "PAP":
                    return this.Name + "'s";
                case "MY":
                    if (this.Owner != null && this.Owner is Matter)
                        return (this.Owner as Matter).interpret("PA", tense);
                    return base.interpret(code, tense);
                default:
                    return base.interpret(code, tense);
            }
        }

        public override Dictionary<string, string> help()
        {
            Dictionary<string, string> dic = base.help();
            dic.Add("G", "Returns the groupId number.");
            dic.Add("MY", "Returns the parent pa code.");
            dic.Add("PP", "Gets a personal possesive pronoun.");
            dic.Add("SP", "Gets a subject pronoun.");
            dic.Add("OP", "Gets an object pronoun.");
            dic.Add("PA", "Gets a possessive adjective pronoun.");
            dic.Add("RP", "Gets a reflexive pronoun.");
            

            return dic;
        }

        public override void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            base.GetObjectData(info, context);

        }


        //Deserialization constructor.
        public Trait(SerializationInfo info, StreamingContext ctxt)
            : base(info, ctxt)
        {

        }

         public override int CompareTo(object obj)
         {
             return base.CompareTo(obj);
         }

         public override DBbase getDBObejct(DBbase o)
         {
             DBTrait t = o as DBTrait;
             if (t == null) t = new DBTrait();
             
             t.scriptId = this.Id;
             t.name_readonly = this.name_readonly ? 1 : 0;

             

             return base.getDBObejct(t);
         }

         public override void setFromDBObject(DBbase o)
         {
             DBTrait t = o as DBTrait;
             if (t == null) t = new DBTrait();
             base.setFromDBObject(t);
             this.setId(t.scriptId);
             this.name_readonly = t.name_readonly == 1 ? true : false;
         }

         

         public override bool Equals(System.Object obj)
         {
             // If parameter is null return false.
             if (obj == null)
             {
                 return false;
             }

             // If parameter cannot be cast to Point return false.
             Trait p = obj as Trait;
             if ((System.Object)p == null)
             {
                 return false;
             }

             // check for reference equality.
             if (System.Object.ReferenceEquals(this, p)) return true;

             // Return true if the fields match:

             return 
                // (this.IsMany == p.IsMany) &&
                // (this.getFullId().Equals(p.getFullId())) &&
                // this.Name.Equals(p.Name) &&
                //this.Other.Equals(p.Other) &&
                //this.Size.Equals(p.Size) &&
                //this.Weight.Equals(p.Weight) &&
                //this.GroupId == p.GroupId &&
                //this.IsMany == p.IsMany &&
                //this.IsUsed == p.IsUsed &&
                this.Id.ToLower().Equals(p.Id.ToLower());
         }

         public void combine(Trait other)
         {
             if (other == null) return;
             foreach (var item in other.Adjectives) this.AddAdjective(item);
             foreach (var item in other.Adverbs) this.addAdverb(item);
             foreach (var item in other.Aliases) this.AddAlias(item);
             foreach (var item in other.States) this.addState(item);
             foreach (var item in other.Who) this.addWho(item);


             if (!String.IsNullOrWhiteSpace(other.Colour))
             {
                 this.Colour = other.Colour;
             }

             if (!String.IsNullOrWhiteSpace(other.Size))
             {
                 this.Size = other.Size;
             }
         }

         public static Trait createConjunction(string name, string condition, string outcome1, string outcome2)
         {
             Trait t = new Trait("c_" + name.Replace(" ", "_"));
             t.GroupId = 71;
             t.AddAdjective("[owner." + condition + "?[owner." + outcome1 + ".A-A]:[owner." + outcome2 + ".A-A]]");
             t.addAdverb("[owner." + condition + "?[owner." + outcome1 + ".V-A]:[owner." + outcome2 + ".V-A]]");
             t.AddAlias("[owner." + condition + "?[owner." + outcome1 + ".K-A]:[owner." + outcome2 + ".K-A]]");
             t.addState("[owner." + condition + "?[owner." + outcome1 + ".S-A]:[owner." + outcome2 + ".S-A]]");
             t.addWho("[owner." + condition + "?[owner." + outcome1 + ".F-A]:[owner." + outcome2 + ".F-A]]");
             t.Size =   ("[owner." + condition + "?[owner." + outcome1 + ".Z]:[owner." + outcome2 + ".Z]]");
             t.Colour = ("[owner." + condition + "?[owner." + outcome1 + ".C]:[owner." + outcome2 + ".C]]");
             

             return t;

         }

    }
}
﻿//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Runtime.Serialization;

//namespace StoryHelper.Classes
//{
//    public class UserCharacter : JSerializable<UserCharacter>, IComparable, DBActionable
//    {
//        public string _firstName = "";
//        public string _middleName = "";
//        public string _familyName = "";
//        public string _height = "";
//        public string _colour = "";

//        public string scriptId = "";

//        public List<UserCharacter> listeners = new List<UserCharacter>();
//        public Pronouns pronouns = new Pronouns(Pronouns.Pronoun.It);

//        public int id { get; set; }
//        public int userId { get; set; }
//        public int charactersId { get; set; }
//        public int storiesId { get; set; }
//        private int perspectiveId = 3;
//        public int PerspectiveId 
//        {
//            get
//            {
//                return perspectiveId;
//            }
//            set
//            {
//                perspectiveId = value;
//            }
//        }
//        public int age { get; set; }
//        public int weight { get; set; }
//        public bool isAnIt { get; set; }
//        public bool isMany { get; set; }

//        public Human belongsTo = null;

//        public string firstName 
//        {
//            get
//            {
//                if (String.IsNullOrWhiteSpace(this._firstName)) return "";
//                return this._firstName;
//            }
//            set
//            {
//                this._firstName = value;
//            }
//        }
//        public string middleName
//        {
//            get
//            {
//                if (String.IsNullOrWhiteSpace(this._middleName)) return "";
//                return this._middleName;
//            }
//            set
//            {
//                this._middleName = value;
//            }
//        }
//        public string familyName
//        {
//            get
//            {
//                if (String.IsNullOrWhiteSpace(this._familyName)) return "";
//                return this._familyName;
//            }
//            set
//            {
//                this._familyName = value;
//            }
//        }
//        public bool hasVagina { get; set; }
//        public string height
//        {
//            get
//            {
//                if (String.IsNullOrWhiteSpace(this._height)) return "";
//                return this._height;
//            }
//            set
//            {
//                this._height = value;
//            }
//        }
//        public string colour
//        {
//            get
//            {
//                if (String.IsNullOrWhiteSpace(this._colour)) return "";
//                return this._colour;
//            }
//            set
//            {
//                this._colour = value;
//            }
//        }

//        public UserCharacter()
//        {
//            id = -1;
//            userId = -1;
//            storiesId = -1;
//            charactersId = -1;
//            PerspectiveId = -1;

//            weight = 0;
//            age = 18;

//            firstName = "";
//            middleName = "";
//            familyName = "";
//            hasVagina = true;
//            height = "";
//            colour = "";
//            isAnIt = false;
//            isMany = false;


//        }

//        public UserCharacter(int userId) : this()
//        {
//            this.userId = userId;
//        }

        

//        public UserCharacter(int userId, string firstName, string middleName, string familyName, bool hasVagina)
//            : this(userId)
//        {
//            this.firstName = firstName;
//            this.familyName = familyName;
//            this.middleName = middleName;
//            this.hasVagina = hasVagina;
//        }

//        public UserCharacter(int userId, Character character) : this()
//        {
//            this.firstName = character.firstName;
//            this.familyName = character.familyName;
//            this.middleName = character.middleName;
//            this.hasVagina = character.hasVagina;
//            this.height = character.height;
//            this.isAnIt = character.isAnIt;
//            this.isMany = character.isMany;
//            this.colour = character.colour;
//            this.age = character.age;
//            this.scriptId = character.scriptId;
//            this.userId = userId;
//        }

//        public UserCharacter(int userId, Character character, Pronouns pronoun) : this(userId, character)
//        {
//            this.pronouns = pronoun;
//        }

//        public void set(Human human)
//        {
//            this.firstName = human.FirstName;
//            this.middleName = human.MiddleName;
//            this.familyName = human.FamilyName;
//            this.colour = human.Colour;
//            this.charactersId = human.charactersId;
//            this.age = human.Age;
//            this.hasVagina = human.HasVagina;
//            this.height = human.Height;
//            this.isAnIt = human.IsAnIt;
//            this.isMany = human.IsMany;
//            //this.userId = human.userId;
//            this.weight = human.Weight;
//        }

//        public static T ObjectFromJson<T>(string json) where T : UserCharacter
//        {
//            try
//            {
//                return Newtonsoft.Json.JsonConvert.DeserializeObject<T>(json);
//            }
//            catch (Exception)
//            {

//                return null;
//            }
//        }

//        public string getJson()
//        {
//            string muhString = Newtonsoft.Json.JsonConvert.SerializeObject(this);
//            return muhString;
//        }

//        public UserCharacter getClone()
//        {
//            DBUserCharacter dbMatter = new DBUserCharacter();
//            dbMatter = this.getDBObejct(dbMatter) as DBUserCharacter;
//            UserCharacter h = new UserCharacter();
//            h.setFromDBObject(dbMatter);

//            return h;
//        }

//        public UserCharacter(SerializationInfo info, StreamingContext ctxt)
//        {
//            try
//            {
//                this.firstName = (string)info.GetValue("firstName", typeof(string));
//            }
//            catch (Exception)
//            { }
//            try
//            {
//                this.middleName = (string)info.GetValue("middleName", typeof(string));
//            }
//            catch (Exception)
//            { }
//            try
//            {
//                this.familyName = (string)info.GetValue("familyName", typeof(string));
//            }
//            catch (Exception)
//            { }
//            try
//            {
//                this.hasVagina = (bool)info.GetValue("hasVagina", typeof(bool));
//            }
//            catch (Exception)
//            { }
//            try
//            {
//                this.age = (int)info.GetValue("age", typeof(int));
//            }
//            catch (Exception)
//            { }
//            try
//            {
//                this.isAnIt = (bool)info.GetValue("isAnIt", typeof(bool));
//            }
//            catch (Exception)
//            { }
//            try
//            {
//                this.isMany = (bool)info.GetValue("isMany", typeof(bool));
//            }
//            catch (Exception)
//            { }
//            try
//            {
//                this.PerspectiveId = (int)info.GetValue("perspectiveId", typeof(int));
//            }
//            catch (Exception)
//            { }
//            try
//            {
//                this.height = (string)info.GetValue("height", typeof(string));
//            }
//            catch (Exception)
//            { }
//            try
//            {
//                this.colour = (string)info.GetValue("colour", typeof(string));
//            }
//            catch (Exception)
//            { }
//            try
//            {
//                this.weight = (int)info.GetValue("weight", typeof(int));
//            }
//            catch (Exception)
//            { }
//            try
//            {
//                this.userId = (int)info.GetValue("userId", typeof(int));
//            }
//            catch (Exception)
//            { }
//            try
//            {
//                string pronoun = (string)info.GetValue("Pronoun", typeof(string));
//                this.setPronoun(pronoun);
//            }
//            catch (Exception)
//            {
//            }
//        }

//        //override void GetObjectData(SerializationInfo info, StreamingContext context)

//        public void GetObjectData(SerializationInfo info, StreamingContext context)
//        {
//            if (!String.IsNullOrEmpty(this.familyName)) info.AddValue("firstName", this.firstName);
//            if (!String.IsNullOrEmpty(this.middleName)) info.AddValue("middleName", this.middleName);
//            if (!String.IsNullOrEmpty(this.familyName)) info.AddValue("familyName", this.familyName);
//            if (!String.IsNullOrEmpty(this.familyName)) info.AddValue("colour", this.colour);
//            if (!String.IsNullOrEmpty(this.familyName)) info.AddValue("weight", this.weight);
//            info.AddValue("height", this.height);
//            info.AddValue("hasVagina", this.hasVagina);
//            info.AddValue("age", this.age);
//            info.AddValue("isAnIt", this.isAnIt);
//            info.AddValue("isMany", this.isMany);
//            info.AddValue("perspectiveId", this.PerspectiveId);
//            info.AddValue("Pronoun", this.pronouns.selectedPronoun.ToString());
            

//        }

//        public void setPronoun(Pronouns.Pronoun pronoun)
//        {
//            this.pronouns = new Pronouns(pronoun);
//            if (!pronoun.Equals(Pronouns.Pronoun.It))
//            {
//                int x = 0;
//            }
//        }

//        public void setPronoun(string pronoun)
//        {
//            if (String.IsNullOrWhiteSpace(pronoun)) return;
//            try
//            {
//                var pronounEnum = Pronouns.getPronounFromString(pronoun);
//                this.setPronoun(pronounEnum);
//            }
//            catch (Exception ex)
//            {

//            }
//        }


//        public int CompareTo(object obj)
//        {
//            if (obj == null)
//                return -1;
//            if (!(obj is UserCharacter))
//                return -1;
//            if (obj.Equals(this))
//                return 0;

//            string formatter = "{0}, {1} {2}";
//            string thisObject = String.Format(formatter, this.firstName, this.familyName, this.middleName);
//            string otherObject = String.Format(formatter, ((Character)obj).firstName, ((Character)obj).familyName, ((Character)obj).middleName);


//            return thisObject.CompareTo(otherObject); ;
//        }

//        public DBbase getDBObejct(DBbase d)
//        {
//            DBUserCharacter h = new DBUserCharacter();
            
//            h.middleName = this.middleName;
//            h.firstName = this.firstName;
//            h.familyName = this.familyName;
//            h.hasVagina = this.hasVagina ? 1 : 0;
//            h.id = this.id;
//            h.age = this.age;
//            h.userId = this.userId;



//            h.weight = this.weight;
//            h.colour = this.colour;
//            h.height = this.height;
//            h.isAnIt = this.isAnIt ? 1 : 0;
//            h.isMany = this.isMany ? 1 : 0;
//            h.perspectiveId = this.PerspectiveId;
//            h.charactersId = this.charactersId;
//            h.storiesId = this.storiesId;

//            h.pronoun = this.pronouns.selectedPronoun.ToString();

//            return h;
//        }

//        public void setFromDBObject(DBbase d)
//        {
//            if (d is DBUserCharacter)
//            {
//                var h = d as DBUserCharacter;
//                this.userId = h.userId;
//                this.middleName = h.middleName;
//                this.id = h.id;
//                this.hasVagina = h.hasVagina == 1 ? true : false;
//                this.firstName = h.firstName;
//                this.familyName = h.familyName;
//                this.age = h.age;


//                this.storiesId = h.storiesId;
//                this.charactersId = h.charactersId;
//                this.PerspectiveId = h.perspectiveId;
//                this.isMany = h.isMany == 1 ? true : false;
//                this.isAnIt = h.isAnIt == 1 ? true : false;
//                this.height = h.height;
//                this.colour = h.colour;
//                this.weight = h.weight;

//                this.setPronoun(h.pronoun);

//            }
//        }

//        public override string ToString()
//        {
//            return this.firstName;
//        }

//        public override bool Equals(System.Object obj)
//        {
//            // If parameter is null return false.
//            if (obj == null)
//            {
//                return false;
//            }

//            // If parameter cannot be cast to Point return false.
//            UserCharacter p = obj as UserCharacter;
//            if ((System.Object)p == null)
//            {
//                return false;
//            }

//            // check for reference equality.
//            if (System.Object.ReferenceEquals(this, p)) return true;

//            // Return true if the fields match:

//            return
//                (this.middleName.Equals(p.middleName)) &&
//                (this.familyName.Equals(p.familyName)) &&
//                (this.firstName.Equals(p.firstName)) &&
//                (this.age == p.age) &&
//                (this.userId == p.userId) &&
//                (this.hasVagina == p.hasVagina);
//        }



//        public void setId(long id)
//        {
//            this.id = (int)id;
//        }
//    }
//}
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using StoryHelperLibrary.Helpers;

namespace StoryHelper.Classes
{
    [Serializable()]
    [JsonConverter(typeof(PropertyNameMatchingConverter))]
    public class WordGroup : Commandable, JSerializable<ActionParser>, IComparable, ActionParser, Registrable<ActionParser>, DBActionable, IComparer<WordGroup>
    {
        public int dbID { get; set; }
        public int ownerId { get; set; }
        private Registrar<ActionParser> owner = null;

        internal Registrar<ActionParser> Owner
        {
            get { return owner; }
            set { owner = value; }
        }

        public void setOwner(Registrar<ActionParser> owner)
        {
            if (owner == null) return;
            this.Owner = owner;
        }

        public Registrar<ActionParser> getOwner()
        {
            return this.owner;
        }

        private string groupTitle = "";

        public string GroupTitle
        {
            get { return groupTitle.ToLower(); }
            set { groupTitle = value.ToLower(); }
        }
        private ListDrawString words = new ListDrawString(100);

        public List<string> Words
        {
            get {
                //return this.get();
                this.words.replenish();
                return this.words;
            }
            set {
                //this.add(value);
                words = new ListDrawString(100, value);
            }
        }
        private int groupID = -1;

        public int GroupID
        {
            get { return groupID; }
            set { groupID = value; }
        }
        protected Random r = new Random();

        

        public void add(string adj)
        {
            if (String.IsNullOrEmpty(adj.Trim())) return;
            foreach (string str in this.words)
            {
                if (str.Equals(adj)) {
                    return;
                }
            }
            this.words.Add(adj);
        }

        public void add(string[] adjs)
        {
            if (adjs != null)
                foreach (string str in adjs)
                {

                    this.add(str);
                }
        }

        public void add(List<string> adjs)
        {
            foreach (string str in adjs)
            {
                this.add(str);
            }
        }

        public string[] getAsArray()
        {
            this.words.replenish();
            return this.Words.ToArray<string>();
        }

        public List<string> get()
        {
            this.words.replenish();
            return new List<string>(this.words);
        }

        public void remove(int index)
        {
            if (index > this.words.Count || index < 0) return;
            this.words.RemoveAt(index);
        }

        public void remove(string word)
        {
            if (String.IsNullOrEmpty(word)) return;
            this.words.Remove(word);
        }

        public WordGroup() 
        {
            this.dbID = -1;
            setDelegates();
        }

        public WordGroup(string id): this()
        {
            this.groupTitle = id;
        }

        public WordGroup(string id, List<string> list)
            : this(id)
        {
            foreach (string s in list)
            {
                this.words.Add(s);
            }
        }

        public virtual void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("classType", this.GetType().Name);
            info.AddValue("GroupTitle", this.GroupTitle);
            info.AddValue("Words", this.Words);
            info.AddValue("GroupID", this.GroupID);
            
            
        }

        //Deserialization constructor.
        public WordGroup(SerializationInfo info, StreamingContext ctxt)
        {
            this.dbID = -1;
            //Get the values from info and assign them to the appropriate properties
            try
            {
                this.GroupTitle = (string)info.GetValue("GroupTitle", typeof(string));
            }
            catch (Exception)
            { }
            try
            {
                this.GroupID = (int)info.GetValue("GroupID", typeof(int));
            }
            catch (Exception)
            { }
            try
            {
                this.Words = (List<string>)info.GetValue("Words", typeof(IList<string>));
            }
            catch (Exception)
            { }
        }

        //public virtual int CompareTo(object obj)
        //{
        //    if (obj == null)
        //        return -1;
        //    if (!(obj is WordGroup))
        //        return -1;
        //    return this.getId().CompareTo((obj as WordGroup).getId());

        //}

        public string getId()
        {
            return this.groupTitle.ToLower();
        }

        public string getFullId()
        {
            return this.getId();
        }

        public void setId(string id)
        {
            this.groupTitle = id.ToLower();
        }

        public string getName()
        {
            return this.getId();
        }

        private string parseVerbAssociatedCode(string code, int tense)
        {
            Verb.Gender type = Verb.Gender.female;
            //bool genderChanged = false;
            int pov = -2;

            string up = code.ToUpper();
            if (up.StartsWith("B"))
            {


                if (!int.TryParse(up.Substring(1, 1), out pov))
                {
                    return "";
                }

                int endingNumber = -1; // if the endingNumber of the code is double digit, then it better to strip the code of the 2 first characters rather than figure out if the code has 2 digits or not. 

                up = up.Remove(0, 2);
                if (!int.TryParse(up, out endingNumber))
                {
                    return "";
                }

                // Tense is from -1 to 2. It's easier to parse 0 to 3, but logically the range -1 to 2 is more intuitive linguisitically speaking. 
                endingNumber -= 1;
                var t = Verb.getRelativeTenseFromInt(endingNumber);
                //var r = Verb.getRelativeTense(endingNumber);
                //var d = Verb.getRelativeTenseFromInt(r);

                string verbCommand = Verb.prepareVerbCommand(this.words.draw(), t);

                

                string verby = Verb.getVerb(verbCommand, false, pov, false, Verb.Gender.female, tense);


                string associated = this.words.getLastAssociated(verby);


                return associated;


            }

            return "";
        }

        private string parseVerbCode(string code, int tense)
        {
            int pov = -2;

            string up = code.ToUpper();
            if (up.StartsWith("V"))
            {


                if (!int.TryParse(up.Substring(1, 1), out pov))
                {
                    return "";
                }

                int endingNumber = -1; 

                // if the endingNumber of the code is double digit, then it better to strip the code of the 2 first characters rather than figure out if the code has 2 digits or not. 
                up = up.Remove(0, 2);
                if (!int.TryParse(up, out endingNumber))
                {
                    return "";
                }

                // Tense is from -1 to 2. It's easier to parse 0 to 3, but logically the range -1 to 2 is more intuitive linguisitically speaking. 
                endingNumber -= 1;
                var t = Verb.getRelativeTenseFromInt(endingNumber);
                //var r = Verb.getRelativeTense(endingNumber);
                //var d = Verb.getRelativeTenseFromInt(r);

                string verbCommand = Verb.prepareVerbCommand(this.words.draw(), t);

                string verby = Verb.getVerb(verbCommand, false, pov, false, Verb.Gender.female, tense);

                return verby;


            }

            return "";
        }

        protected override void setDelegates()
        {
            var d = this.getFreshParameterList();
            //d.Add(new MethodPackage.Parameter("Adjective", "The adjective to convert into an adverb.", typeof(string)));
            addDelegate("ADVERB", "Convert an adjective to an adverb.", null, (x, y) => { return Adverb.adjectiveToAdverb(this.drawFromList(this.words, "", 100, true)); });
            d = this.getFreshParameterList();
            //d.Add(new MethodPackage.Parameter("Verb", "The verb to convert into an adverb.", typeof(string)));
            addDelegate("VERBTOADVERB", "Convert a verb to an adverb.", null, (x, y) => { return Adverb.verbToAdverb(this.drawFromList(this.words, "", 100, true)); });
            d = this.getFreshParameterList();
            addDelegate("DL", "draw linearly, sequentially.", null, (x, y) => { return this.drawFromList(this.words, "", 100, true); });
            addDelegate("SL", "Sublist. Gets an associated value if one exists. Otherwise, the key is selected", null, (x, y) => { return evaluateProbability(this.words.getAssociated(ListDrawString.DrawingStyle.Sublist), 100); });
            addDelegate("R", "Legacy. Operates same as SL.", null, (x, y) => { return evaluateProbability(this.words.getAssociated(ListDrawString.DrawingStyle.Sublist), 100); });
            addDelegate("FSL", "ForcedSublist. Forces an associated value. If list contains none, an empty string is returned.", null, (x, y) => { return evaluateProbability(this.words.getAssociated(ListDrawString.DrawingStyle.ForcedSublist), 100); });
            addDelegate("L", "LastSelected. Gets the last adjectinve selected.", null, (x, y) => { return this.words.LastSelected; });
            addDelegate("FB", "ForceBoth, key and associated", null, (x, y) => { return this.words.getAssociated(ListDrawString.DrawingStyle.ForcedBoth); });
            addDelegate("LSL", "LastSublist. Gets the last adjective selected's value in key-value system.", null, (x, y) => { return this.words.getAssociated(ListDrawString.DrawingStyle.LastSublist); });
            addDelegate("LB", "LastBoth. Gets the last adjective selected's value and key.", null, (x, y) => { return this.words.getAssociated(ListDrawString.DrawingStyle.LastBoth); });
            addDelegate("B", "Both. Gets both key and value of a randomly selected item.", null, (x, y) => { return this.words.getAssociated(ListDrawString.DrawingStyle.Both); });

            d = this.getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Key", "The key of the value to be fetched.", typeof(string)));
            addDelegate("KEY", "Gets the Value given a key supplied.", d, (x, y) => {
                string words = this.words.fetch(y[0]);
                return (String.IsNullOrWhiteSpace(words)) ?  y[0] :  words;
            });


            addDelegate("V2A", "Verb to adverb. If more than one word drawn, then returns empty.", null, (x, y) =>
            {
                string adj = this.drawFromList(this.words, "", 100);

                // if the selected word actually contains more than one word, return an empty string. 
                if (adj.Trim().Contains(" ")) return "";
                return Adverb.verbToAdverb(adj);
            });
            addDelegate("A2A", "gets the last adjectinve selected.", null, (x, y) => { return Adverb.adjectiveToAdverb(this.words.draw()); });
            
            addDelegate("A", "gets the last adjective selected.", null, (x, y) => { return getAdverbAdjective(this.words); });
            addDelegate("N", "gets the last adjective selected.", null, (x, y) =>
            {
                string category = this.groupTitle;
                if (category.StartsWith("adj - ") || category.StartsWith("adv - "))
                {
                    category = category.Remove(0, 6);
                }
                if (category.StartsWith("adj- ") || category.StartsWith("adv- "))
                {
                    category = category.Remove(0, 5);
                }
                if (category.StartsWith("adj-") || category.StartsWith("adv-"))
                {
                    category = category.Remove(0, 4);
                }
                if (category.StartsWith("adj - ") || category.StartsWith("adv - "))
                {
                    category = category.Remove(0, 6);
                }
                if (category.StartsWith("noun - ") || category.StartsWith("verb - "))
                {
                    category = category.Remove(0, 7);
                }
                if (category.StartsWith("noun- ") || category.StartsWith("verb- "))
                {
                    category = category.Remove(0, 6);
                }
                if (category.StartsWith("noun -") || category.StartsWith("verb -"))
                {
                    category = category.Remove(0, 6);
                }
                if (category.StartsWith("noun-") || category.StartsWith("verb-"))
                {
                    category = category.Remove(0, 5);
                }
                return category;
            });
            #region Verb Methods
            d = getFreshParameterList();

            addDelegate("V", "Something", null, (x, y) =>
            {
                var relativeTense = Verb.getTenseFromInt(this.tense);
                var verb = new Verb(this.drawFromList(this.words, "", 100, true), false, 3, Classes.Verb.Gender.it, relativeTense);
                return verb.getVerb();
            });

            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Relative tense", "Values accepted are -1, 0, 1, 2", typeof(int)));
            addDelegate("V", "Something", d, (x, y) =>
            {
                var relativeTense = Verb.getTenseFromInt(this.tense + MethodPackage.Parameter.getParameter(y[0]).getValue());
                var verb = new Verb(this.drawFromList(this.words, "", 100, true), false, 3, Classes.Verb.Gender.it, relativeTense);
                return verb.getVerb();
            });

            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Relative tense", "Values accepted are -1, 0, 1, 2", typeof(int)));
            d.Add(new MethodPackage.Parameter("Adverb", "And adverb to slap into the verb phrase.", typeof(string)));
            addDelegate("V", "Something", d, (x, y) =>
            {
                var relativeTense = Verb.getTenseFromInt(this.tense + MethodPackage.Parameter.getParameter(y[0]).getValue());
                var verb = new Verb(this.drawFromList(this.words, "", 100, true), false, 3, Classes.Verb.Gender.it, relativeTense, y[1]);
                return verb.getVerb();
            });
            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Adverb", "And adverb to slap into the verb phrase.", typeof(string)));
            addDelegate("V", "Something", d, (x, y) =>
            {
                var verb = new Verb(this.drawFromList(this.words, "", 100, true), false, 3, Classes.Verb.Gender.it, Verb.getTenseFromInt(this.tense), y[0]);
                return verb.getVerb();
            });
            d = getFreshParameterList();
            d.Add(new MethodPackage.Parameter("Relative tense", "Values accepted are -1, 0, 1, 2", typeof(int)));
            d.Add(new MethodPackage.Parameter("Relative tense", "Values accepted are -1, 0, 1, 2", typeof(int)));
            addDelegate("V", "Verbs", null, (x, y) => { return getAdverbAdjective(this.words); });

            #endregion
        }

        private int tense = 0;
        public string interpret(string code, int tense)
        {
            #region Method Starter
            if (String.IsNullOrWhiteSpace(code)) return evaluateProbability(this.words.getAssociated(ListDrawString.DrawingStyle.Sublist), 100);
            if (code.ToUpper().StartsWith("~")) return code.Remove(0, 1);

            // If the code isn't stripped before entering this method, then the code variable was passed by an already interpreted code which gave this code to be reinterpreted. 
            if (code.StartsWith(this.startCommand) && code.EndsWith(this.endCommand))
            {
                return code;
                //code = code.Remove(0, this.startCommand.Length);
                //code = code.Substring(0, code.Length - this.endCommand.Length);
            }

            // ensure that all methods are properly parsed
            if (code.IndexOf(".") > -1)
            {
                var listOfMethods = parseCommandMethods(code, ".", "(", ")");
                if (listOfMethods.Count > 1) return this.interpret(listOfMethods.ToArray(), tense);
            }

            // set the tense of the object to ensure up-to-date results on verbs
            this.tense = tense;

            // safely parsed methods at this point
            int parenthesesStart, parenthesesEnd;
            string methodName = code.ToUpper();
            List<string> parameters = new List<string>();
            string parameterString = findFirstCommand(code, out parenthesesStart, out parenthesesEnd, "(", ")", false);

            // malformed params or no params skips this
            if (!(parenthesesStart == -1 || parenthesesEnd == -1 || parenthesesEnd < parenthesesStart))
            {

                methodName = code.Substring(0, parenthesesStart).ToUpper().Trim();
                parameters.AddRange(parameterString.Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries));
            }

            string result = "";

            // If the wordgroup contains a number as a method name, then apply the default random draw and draw the amount the number indicates
            int methodNumber = -1;
            if (int.TryParse(methodName, out methodNumber))
            {
                if (methodNumber < 3)
                    return this.chainedAdjectives(methodNumber, ", ");
                else
                    return this.chainedAdjectives(methodNumber, ", ", ", and ");
                //evaluateProbability(this.words.getAssociated(ListDrawString.DrawingStyle.Sublist), 100);
            }

            // exact match method names
            try
            {
                if (functions.Keys.Contains(methodName))
                {
                    result = functions[methodName].Invoke(parameters);
                    if (!String.IsNullOrWhiteSpace(result)) return result;
                }
                else
                {
                    return code;
                }
                //result = delegates[methodName].Invoke(methodName, parameters);
            }
            catch (Exception ex)
            {
                // failed to find the method
                return ex.Message;
            }


            return "";
            #endregion
            // ======================================================================Legacy=======================================================================

            #region done
            Regex regexIsAdverb = new Regex(@"^adverb\(\w{1,}\)$", RegexOptions.IgnoreCase);
            if (regexIsAdverb.IsMatch(code))
            {
                string adverb = code.Remove(0, 7);
                adverb = adverb.Remove(adverb.Length - 1, 1);

                return Adverb.adjectiveToAdverb(adverb);
            }

            Regex regexIsVerbToAdverb = new Regex(@"^verbToAdverb\(\w{1,}\)$", RegexOptions.IgnoreCase);
            if (regexIsVerbToAdverb.IsMatch(code))
            {
                string adverb = code.Remove(0, 13);
                adverb = adverb.Remove(adverb.Length - 1, 1);

                return Adverb.verbToAdverb(adverb);
            }

            

            if (code.ToUpper().StartsWith("~"))
                return code.Remove(0, 1);

            int adjectiveCount = 0;

            if (int.TryParse(code, out adjectiveCount))
            {
                if (adjectiveCount < 3)
                    return this.chainedAdjectives(adjectiveCount, ", ");
                else
                    return this.chainedAdjectives(adjectiveCount, ", ", ", and ");
            }

            #endregion

            Regex regexWordgroupVerbCode = new Regex(@"^V\d{1,2}$");
            if (regexWordgroupVerbCode.IsMatch(code))
            {
                return parseVerbCode(code, tense);
            }

            Regex regexWordgroupVerbAssociatedCode = new Regex(@"^B\d{1,2}$");
            if (regexWordgroupVerbAssociatedCode.IsMatch(code))
            {
                return parseVerbAssociatedCode(code, tense);
            }

            Regex regexWordgroupVerbAssociatedCodeWithAdverb = new Regex(@"^B\d{1,2}$");
            if (regexWordgroupVerbAssociatedCode.IsMatch(code))
            {
                return parseVerbAssociatedCode(code, tense);
            }


            switch (code.ToUpper())
            {
                case "DL": // draw linearly, sequentially. 
                    return this.drawFromList(this.words, "", 100, true);// this.chainedAdjectives(1, ""); // + " " + getAliasName();
                case "SL": // gets an associated value if one exists. Otherwise, the key is selected
                    return evaluateProbability(this.words.getAssociated(ListDrawString.DrawingStyle.Sublist), 100);
                case "FSL": // forces an associated value. If list contains none, an empty string is returned.
                    return evaluateProbability(this.words.getAssociated(ListDrawString.DrawingStyle.ForcedSublist), 100);
                case "L": // gets the last adjectinve selected.
                    return this.words.LastSelected;
                case "FB":
                    return this.words.getAssociated(ListDrawString.DrawingStyle.ForcedBoth);
                case "LSL":
                    return this.words.getAssociated(ListDrawString.DrawingStyle.LastSublist);
                case "LB":
                    return this.words.getAssociated(ListDrawString.DrawingStyle.LastBoth);
                case "B":
                    return this.words.getAssociated(ListDrawString.DrawingStyle.Both);
                case "V2A":

                    string adj = this.drawFromList(this.words, "", 100);

                    // if the selected word actually contains more than one word, return an empty string. 
                    if (adj.Trim().Contains(" ")) return "";
                    return Adverb.verbToAdverb(adj);
                
                case "A2A":
                    return Adverb.adjectiveToAdverb(this.words.draw());
                case "A":
                    return getAdverbAdjective(this.words);
                case "N":
                    string category = this.groupTitle;
                    if (category.StartsWith("adj - ") || category.StartsWith("adv - "))
                    {
                        category = category.Remove(0, 6);
                    }
                    if (category.StartsWith("adj- ") || category.StartsWith("adv- "))
                    {
                        category = category.Remove(0, 5);
                    }
                    if (category.StartsWith("adj-") || category.StartsWith("adv-"))
                    {
                        category = category.Remove(0, 4);
                    }
                    if (category.StartsWith("adj - ") || category.StartsWith("adv - "))
                    {
                        category = category.Remove(0, 6);
                    }
                    if (category.StartsWith("noun - ") || category.StartsWith("verb - "))
                    {
                        category = category.Remove(0, 7);
                    }
                    if (category.StartsWith("noun- ") || category.StartsWith("verb- "))
                    {
                        category = category.Remove(0, 6);
                    }
                    if (category.StartsWith("noun -") || category.StartsWith("verb -"))
                    {
                        category = category.Remove(0, 6);
                    }
                    if (category.StartsWith("noun-") || category.StartsWith("verb-"))
                    {
                        category = category.Remove(0, 5);
                    }
                    return category;
                default:
                    return this.words.draw();
            }
        }

        protected string evaluateProbability(string word, int probability)
        {
            int value = r.Next(100);
            if (value > probability) return "";
            return word;
        }

        protected string getVerb(string paramCode, int tense, Verb.Gender gender = Verb.Gender.it, int pointOfView = 3)
        {
            
            //Verb verby = new Verb(paramCode, false, pointOfView, gender, Verb.VerbTense.SimplePast);
            var verby = Verb.prepareVerbCommand(paramCode, Verb.VerbTense.SimplePast);
            string verb = Verb.getVerb(verby.ToString(), false, pointOfView, true, gender, tense);
            if (!String.IsNullOrWhiteSpace(verb)) return verb;
            return "";
        }

        protected string getAdverbAdjective(ListDrawString list)
        {
        //    string theAdjective = this.drawFromList(list, "");
        //    if (String.IsNullOrWhiteSpace(theAdjective)) return "";
            return list.getAssociated(ListDrawString.DrawingStyle.Both);
            //return theAdverb + " " + theAdjective;
        }

        protected string drawFromList(ListDrawString list, string defaultString, int probability = 100, bool linear = false)
        {
            int value = r.Next(100);
            if (value > probability) return defaultString;

            if (list.ListCount() > 0)
            {
                if (!linear) return list.draw();
                else return list.drawLinear();
            }
            else
                return defaultString;
        }

        public string interpret(string[] code, int tense)
        {
            string[] returnValues = new string[code.Length];
            int x = 0;
            foreach (string str in code)
            {
                returnValues[x] = this.interpret(str, tense);
            }

            return String.Join(" ", returnValues);
        }

        public Dictionary<string, string> help()
        {
            Dictionary<string, string> d = new Dictionary<string, string>();
            d.Add("N", "Returns the name of the group.");
            d.Add("1", "Returns a random alias. 2 returns two of them, comma sperated. ");

            return d;
        }

        public string getJson()
        {
            string muhString = Newtonsoft.Json.JsonConvert.SerializeObject(this);
            return muhString;
        }

        public ActionParser getClone()
        {
            //return (ActionParser)Newtonsoft.Json.JsonConvert.DeserializeObject<WordGroup>(this.getJson());

            DBWordGroup dbWordgroup = new DBWordGroup();
            //DBMatter dbMatter = new DBMatter();

            //dbMatter = base.getDBObejct(dbMatter) as DBMatter;

            dbWordgroup = this.getDBObejct(dbWordgroup) as DBWordGroup;
            WordGroup wordGroup = new WordGroup();
            wordGroup.setFromDBObject(dbWordgroup);


            wordGroup.dbID = this.dbID;
            wordGroup.GroupID = this.GroupID;
            wordGroup.GroupTitle = this.GroupTitle;
            wordGroup.Owner = this.Owner;
            wordGroup.ownerId = this.ownerId;
            wordGroup.Words = this.Words;

            return wordGroup;
        }

        private string chainedAdjectives(int amount)
        {
            string str = "";

            if(this.words.ListCount() < amount) amount = this.words.ListCount();
            for (int x = 0; x < amount; x++)
            {
                str += this.words.draw() + ", ";
            }

            if (str.Length > 2)
                str = str.Substring(0, str.Length - 2);

            return str;
        }

        private string chainedAdjectives(int amount, string seperator, string ender = "")
        {
            string[] strs = this.words.draw(amount);
            if (strs.Length == 0) return "";

            if (strs.Length > 2 && ender.Length > 0)
            {
                // pop the last element
                string finalString = strs[strs.Length - 1];
                List<string> strings = new List<string>(strs);
                strings.RemoveAt(strs.Length - 1);
                strs = strings.ToArray();
                return String.Join(seperator, strs) + ender + finalString;
            }

            return String.Join(seperator, strs);
        }

        public override string ToString()
        {
            return this.getId();
        }


        public DBbase getDBObejct(DBbase d)
        {
            DBWordGroup w = new DBWordGroup();
            w.words = String.Join("|", this.words.ToArray());
            w.scriptId = this.getId();
            w.id = this.dbID;
            w.ownerId = this.ownerId;
            

            return w as DBbase;
        }

        public void setFromDBObject(DBbase d)
        {
            DBWordGroup w = d as DBWordGroup;
            this.setId(w.scriptId);
            this.groupTitle = w.scriptId;
            this.dbID = w.id;
            this.ownerId = w.ownerId;
            this.words = new ListDrawString(100, w.words.Split('|').ToList());
        }


        public void setId(long id)
        {
            this.dbID = (int)id;
        }

        public override bool Equals(System.Object obj)
        {
            // If parameter is null return false.
            if (obj == null)
            {
                return false;
            }

            // If parameter cannot be cast to Point return false.
            WordGroup p = obj as WordGroup;
            if ((System.Object)p == null)
            {
                return false;
            }

            // check for reference equality.
            if (System.Object.ReferenceEquals(this, p)) return true;

            // Return true if the fields match:

            return (this.getId().Equals(p.getId()));
        }


        public bool FullEquals(System.Object obj)
        {
            if (!this.Equals(obj)) return false;
            return this.words.Count == this.words.Count;
        }

        int IComparable.CompareTo(object obj)
        {
            if (obj == null)
                return -1;
            if (!(obj is WordGroup))
                return -1;
            return this.getId().CompareTo((obj as WordGroup).getId());

        }

        public int Compare(WordGroup x, WordGroup y)
        {

            if (x == null) return -1;
            if (y == null) return 1;
            return x.getId().CompareTo(y.getId());

        }

        public void setActorTense(int tense)
        {
            this.tense = tense;
        }

        public int getActorTense()
        {
            return this.tense;
        }
    }


    



}
